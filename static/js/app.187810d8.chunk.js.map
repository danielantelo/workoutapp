{"version":3,"sources":["utils/routing.tsx","theme/index.ts","theme/components/Select.ts","components/Loader/index.tsx","components/Content/Tables.tsx","fitness-tools/constants.ts","components/Content/Typography.tsx","components/Content/Video.tsx","screens/About/FitnessComponents/index.tsx","components/Logo/index.tsx","components/Navigation/index.tsx","components/Layouts/index.tsx","fitness-tools/nutrition/calculators.ts","domain/constants/index.ts","domain/exercises/exercises.ts","fitness-tools/weightlifting/calculators.ts","fitness-tools/utils/measurements.ts","fitness-tools/utils/weight.ts","domain/programs/routines/arnold.ts","domain/programs/routines/athleanx.ts","domain/programs/routines/builtwithschience.ts","domain/programs/routines/greyskull.ts","domain/programs/routines/kinobody.ts","domain/programs/routines/leangains.ts","domain/programs/routines/oldschool.ts","domain/programs/routines/other.ts","domain/programs/routines/reddit.ts","domain/programs/routines/startingstrength.ts","domain/programs/routines/stronglifts.ts","domain/programs/routines/vigilante.ts","domain/programs/routines/wendler.ts","domain/programs/programs.ts","screens/About/index.tsx","screens/Welcome/index.tsx","utils/calendar.ts","domain/nutrition/nutrition.ts","domain/standards/speed.ts","domain/standards/strength.ts","domain/trainee/trainee.ts","domain/trainee/targets.ts","domain/trainee/schedule.ts","domain/trainee/store.ts","domain/trainee/log.ts","components/Dashboards/index.tsx","components/Forms/Select/index.tsx","components/Forms/index.tsx","components/Forms/BodyFatSelector/index.tsx","components/Forms/HeightInput/index.tsx","utils/measurements.ts","screens/GetStarted/AboutYou.tsx","components/Standards/StandardsComparison.tsx","components/Standards/LiftingStandardsCalculator.tsx","screens/GetStarted/Activity.tsx","screens/GetStarted/Configuration.tsx","screens/GetStarted/Nutrition.tsx","screens/GetStarted/Preferences.tsx","screens/GetStarted/Scheduling.tsx","screens/GetStarted/index.tsx","screens/ProgramSelection/Comparison.tsx","components/Nutrition/index.tsx","components/Nutrition/NutritionRecommendation.tsx","components/Targets/LiftingTargets.tsx","components/Targets/SpeedTargets.tsx","components/Workouts/WorkoutRoutinesHScroll.tsx","screens/ProgramSelection/ProgramRecommendation.tsx","screens/ProgramSelection/index.tsx","screens/Dashboard/Today.tsx","components/Workouts/WorkoutsList.tsx","screens/Dashboard/ThisWeek.tsx","screens/Dashboard/Comparison.tsx","screens/Dashboard/CurrentTargets.tsx","screens/Dashboard/index.tsx","screens/Program/index.tsx","screens/Settings/index.tsx","screens/Vault/index.tsx","screens/Log/index.tsx","domain/workout/helpers.ts","screens/Workout/WorkoutSheet/components/ExerciseInfo.tsx","screens/Workout/WorkoutSheet/components/SetIdentifier.tsx","screens/Workout/WorkoutSheet/helpers.ts","screens/Workout/WorkoutSheet/Sets.tsx","screens/Workout/WorkoutSheet/Warmups.tsx","screens/Workout/WorkoutSheet/index.tsx","screens/Workout/index.tsx","App.tsx","screens/About/FitnessComponents/strength-icon.png","screens/About/FitnessComponents/cardio-icon.png","screens/About/FitnessComponents/speed-icon.png","components/Logo/logo.png","components/Navigation/go.png","assets/comics/comic1.png","assets/comics/comic2.png","assets/comics/comic3.jpeg","screens/Welcome/welcome2.png","components/Forms/BodyFatSelector/Male10.png","components/Forms/BodyFatSelector/Male15.png","components/Forms/BodyFatSelector/Male20.png","components/Forms/BodyFatSelector/Male25.png","components/Forms/BodyFatSelector/Male30.png","components/Forms/BodyFatSelector/Female10.png","components/Forms/BodyFatSelector/Female15.png","components/Forms/BodyFatSelector/Female20.png","components/Forms/BodyFatSelector/Female25.png","components/Forms/BodyFatSelector/Female30.png"],"names":["Destination","nativeBaseTheme","extendTheme","fontSizes","xs","sm","md","lg","xl","colors","primary","secondary","components","Select","baseStyle","borderWidth","textAlign","paddingTop","Router","children","Platform","OS","useNavigate","useNavigateDom","linkStyle","color","Link","to","label","style","textDecoration","Text","ExternalLink","text","onPress","Linking","openURL","RoutingButton","rest","navigate","Button","setTimeout","getWorkoutUrl","id","Workout","replace","toString","Loader","Center","height","Spinner","accessibilityLabel","Gender","UnitsType","ActivityLevel","Table","VStack","TableHeader","headings","HStack","alignItems","justifyContent","borderBottomWidth","borderBottomColor","marginBottom","map","heading","width","length","fontWeight","sideBorder","content","TableCell","bottomBorder","Box","fontSize","borderRightWidth","borderRightColor","TableRow","values","item","Paragraph","BulletPoint","marginY","marginLeft","marginRight","Video","video","includes","alignSelf","source","uri","useNativeControls","videoId","FitnessComponents","t","useTranslation","Image","resizeMode","alt","require","bold","Logo","size","tabs","icon","action","Program","Log","image","Dashboard","Vault","Settings","Navigation","location","useLocation","useStoredState","selectedTab","setSelectedTab","useEffect","pathname","forEach","tab","idx","bg","safeAreaBottom","shadow","position","bottom","left","Pressable","opacity","py","flex","mb","as","MaterialCommunityIcons","name","DefaultLayout","showNav","showLogo","backgroundColor","safeArea","maxWidth","marginX","paddingY","ScrollView","HeadedLayout","headerElements","safeAreaTop","top","zIndex","paddingBottom","marginTop","Goal","ExperienceLevel","DietType","WeekDay","ExerciseType","Exercise","bmrFormulas","miffinStJeor","gender","weightInLbs","heightInInches","age","Female","harrisBenedict","katchMcArdle","bodyFat","formulas","epley","weight","reps","brzycki","oconner","lombardi","wathan","Math","exp","mayhem","lander","calculatRepMax","oneRepMax","multiplier","floor","abs","calculateThreeRepMax","calculateFiveRepMax","calculateEightRepMax","calculateTenRepMax","calculateTwelveRepMax","calculateFithteenRepMax","calculateTwentyRepMax","calculateRepMaxes","formula","acc","Object","keys","reduce","current","calculate1RepMax","threeRepMax","fiveRepMax","eightRepMax","tenRepMax","twelveRepMax","fithteenRepMax","twentyRepMax","lbsToKg","lbs","feetToInches","feet","toNearestIncrement","unitsType","increment","inc","Metric","round","arnoldRoutines","author","link","level","Beginner","Novice","Male","goal","Strength","Size","Lean","Speed","daysPerWeek","workoutDuration","weeklySchedule","duration","workouts","routine","exercise","Squat","sets","Array","fill","targetReps","startingWeight","Bench","Chinup","bodyweight","AMRAP","BehindNeckPress","Curl","Situp","ahtleanXRoutines","Intermediate","warmup","percentage","mainSets","secondarySets","MultiLunge","HipThrust","minReps","maxReps","DbCarry","ratio","Facepull","Deadlift","ReverseLunge","Press","Row","DbOverheadCarry","HipBand","PullApart","builtWithScienceRoutines","Advanced","isAtLeastIntermediate","Vigilante","numberOfSets","Pullup","LegCurls","DragCurl","InclineDumbbellBench","BulgarianSplitSquat","CableRow","LateralRaises","Kickbacks","Flyes","greyskullRoutines","Dip","basis","rptSets","kinobodyRoutines","InclineBench","TricepRopePushdowns","LegRaises","HammerCurl","RomanianDeadlift","DumbbellBench","Skullcrushers","LegExtensions","Calfs","AbWheel","InclineFlyes","InclineCurls","OneArmLateralRaises","leanGainsRoutines","TricepExtensions","oldSchoolRoutines","WalkingLunges","DumbbellRow","otherRoutines","CableCrunches","RackChins","DumbbellPress","HackSquats","HighPulls","LegPress","MachineChestPress","PreacherCurl","ConcentrationCurl","SpiderCurls","Pulldowns","FrontSquat","Lunge","redditRoutines","ignoreForTracking","ssRoutines","PowerClean","optional","volumeSets","progressionSets","Hyperextensions","PowerSnatch","slRoutines","Shrugs","note","CloseGripBench","vigilanteRoutines","RDL","MuscleUp","Planche","TurkishGetUp","HandstandPushup","DiamondPushUp","standard531Cycle","wendlerRoutines","weekIndex","weekNumber","flat","GoodMorning","Pushup","programs","sort","a","b","getProgram","find","program","About","Heading","GetStarted","Headline","Welcome","Container","paddingLeft","NutritionType","DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getDateOfWeekday","dayName","date","Date","allowPast","now","getDay","day","findIndex","toLowerCase","diff","nextDayTimestamp","getTime","isDateInPast","today","setHours","getNextWorkoutDay","weekStart","previousWorkoutDate","proposedDate","scheduleDay","previousWorkoutDay","previousWorkoutDayIndex","getNextScheduledWeekday","schedule","found","parts","push","week","convertScheduleToWeekdays","getTargetCalories","tdee","cycleNutrition","numberOfWorkoutDays","higherCaloriesOnWeekends","preferAggressiveCut","isCut","Cut","AggressiveCut","modifier","Bulk","Maintain","getEnergyExpenditureModifier","average","workoutdaysTarget","restdaysTarget","weekendTarget","trainingDay","restDay","weekend","energyExpenditureModifier","getNutritionRecommendation","cms","activityLevel","primaryGoal","secondaryGoal","needsMetabolicReset","calcWeight","calcHeight","bmi","calculateBMI","bmr","args","calculateBMR","Sedentary","Active","VeryActive","LightlyActive","calculateTDEE","targetProtein","bodyWeightInLbs","roundToNearest","grams","calculateMinimumProteinRequirement","largeDeficitDueToBodyfatMessage","type","reason","getNutritionTypeRecommendation","targetCalories","getTodaysCalories","recommendedNutrition","isWorkoutDay","dayOfWeek","isDateWeekend","speedStandards","mileRun","fiveKmRun","getSpeedStandards","standardExercises","strengthStandards","getLiftStandards","getStrengthLevel","everLifted","strengthMetrics","accLevel","lift","liftMetrics","liftLevel","liftStandards","levelStandards","oneRepMaxForComparison","meetsOneRepMaxBasedStandard","meetsWeightBasedStandard","meetsRepBasedStandard","getLiftLevel","isLowerStandard","indexOf","undefined","calculateStrengthStandards","lifts","key","repMaxes","getTraineeMetrics","trainee","currentLifts","hasLifted","bestMileRunTime","bestfiveKmRunTime","speedMetrics","strengthLevel","speedLevel","mileRunTime","runStandards","meetsMileRunStandard","meetsFiveKmStandard","getSpeedLevel","getTraineeRecommendations","traineeMetrics","preferredNumberOfWorkoutsPerWeek","preferredWorkoutDuration","preferredUnitsType","prefersHigherCaloriesOnWeekends","prefersCycledNutrition","prefersAggressiveCut","recommendedPrograms","maxDaysPerWeek","maxWorkoutDuration","suitablePrograms","filter","isLevelAppropriate","isGenderAppropriate","meetsPrimaryGoal","meetsSecondaryGoal","isSuitableSchedule","bestMatch","getProgramRecommendations","speedTargets","standards","getNextSpeedTargets","liftTargets","lifterStandards","getLiftTarget","currentLift","levelStandard","levelOneRepMax","levelRatio","target","getNextLiftTargets","bodyFatTarget","scheduleReducer","payload","experienceLevel","createSchedule","newSchedule","exerciseId","setId","value","status","startTime","endTime","isWarmup","recommendedWeight","updateWorkoutWithCompletedSet","Error","firstWorkoutMustBeOnWeekStart","totalWorkouts","workoutWeeklyIndex","workoutId","set","traineeReducer","formData","field","defaultTrainee","preferredDietType","preferredWeekStart","preferredWorkoutDays","prefersProgramHoping","prefersMinimalLegs","preferredBarbellIncrement","preferredBarbellDecrement","preferredDumbbellIncrement","preferredDumbbellDecrement","useTrainee","useStoredReducer","dispatch","updateTrainee","traineeLoaded","resetTrainee","useActiveProgram","activeProgram","setActiveProgram","activeProgramLoaded","unsetIsActive","updateSchedule","scheduleLoaded","unsetSchedule","todaysWorkout","getTodaysWorkout","active","initialiseProgram","resetProgram","useLog","workoutLog","setWorkoutLog","workoutLogLoaded","removeWorkoutLog","logLoaded","logWorkout","workout","datePerformed","resetLog","DashboardHeading","DashboardCard","useTheme","padding","rounded","white","DashboardLabel","DashboardDetail","onValueChange","selectedValue","items","border","baseStyles","paddingRight","borderColor","borderRadius","inputWeb","inputIOS","inputAndroid","iconContainer","fixAndroidTouchableBug","Icon","EnumSelect","Enum","EnumMultiSelect","selectedValues","onChange","Checkbox","Group","defaultValue","space","flexWrap","my","FormCard","InlineField","allowWrap","StackedField","BottomButtonsBox","BodyFatImageMap","10","15","20","25","30","BodyFatSelector","setBodyFat","Radio","Number","percent","HeightInput","setHeight","Imperial","Input","keyboardType","onChangeText","ImperialHeightInput","useState","setFeet","inches","setInches","onSetHeight","feetAndInchesToInches","input","converted","inchesToFeet","inchestToFeetAndInches","formatDecimalMins","time","min","sec","getWeightLabel","getHeightLabel","getCircumferenceLabel","AboutYou","waist","unitLabel","StrengthStandardsComparison","weightLabel","horizontal","showsHorizontalScrollIndicator","minWidth","getCellContent","isStandard","italic","SpeedtandardsComparison","genderStandards","LiftingStandardsCalculator","setLifts","useMemo","attr","cellWidth","calculated","Activity","maxPushUps","maxPullUps","returningFromBreak","newLifts","Configuration","Nutrition","Switch","isChecked","checked","Preferences","Scheduling","weightUnitLabel","Alert","colorScheme","flexShrink","newValues","Arrow","enableContinueButton","ProgramSelection","disabled","Comparison","NutritionInfo","protocol","Divider","NutritionRecommendations","NutritionRecommendation","LiftingTargets","roundedFiveReps","SpeedTargets","getExerciseRepLabel","currentIndex","array","str","join","WorkoutRoutinesHScroll","showVideos","wid","hasDivider","orientation","ProgramRecommendation","setProgram","showAllPrograms","setShowAllPrograms","selectedProgram","selectedProgramWorkouts","programList","Today","startWorkout","calories","protein","Trans","WorkoutList","dateFormat","isDone","MaterialIcons","toLocaleDateString","weekday","month","goToWorkout","ThisWeek","CurrentTargets","thisWeeksWorkouts","entry","dayjs","isSame","getScheduledForThisWeek","completedCount","URL","hostname","total","year","workoutName","getPreviousWorkoutOfType","previous","i","getPreviousLift","previousWorkout","previousSet","updateCurrentLifts","setCurrentLifts","curr","trackingAttempt","prev","currentWeight","currentReps","currentFails","fails","isFail","ExerciseInfo","modalVisible","setModalVisible","Modal","isOpen","onClose","CloseButton","SetIdentifier","background","getTargetRepsPlaceholder","placeholder","getPreviousLabel","Sets","getRecommendedWeight","onSetComplete","onChangeSetReps","onChangeSetWeight","setSets","onUpdate","newSets","debounce","debouncedSave","display","Warmups","WorkoutSheet","useParams","setsDone","setSetsDone","nextRestDuration","setNextRestDuration","remainingTime","setRemainingTime","getWorkoutById","count","getCompleteSetCount","totalSets","getWorkoutTotalSetCount","getSetRecommendedWeight","barbellIncrement","barbellDecrement","dumbbellIncrement","dumbbellDecrement","smallestIncrement","deloadDecrement","firstSetWeight","needsDeload","passedLastAttempt","needsToRepeatPrevious","Progress","w","strokeWidth","isPlaying","restTime","App","NativeBaseProvider","theme","path","Home","element","i18n","use","initReactI18next","init","resources","lng","fallbackLng","module","exports"],"mappings":"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","file":"static/js/app.187810d8.chunk.js","sourcesContent":["import { Button, IButtonProps, Text } from 'native-base';\nimport { Linking, Platform } from 'react-native';\nimport { NavigateFunction } from 'react-router';\nimport { HashRouter, Link as DomLink, useNavigate as useNavigateDom } from 'react-router-dom';\nimport { NativeRouter, Link as NativeLink, useNavigate as useNavigateNative } from 'react-router-native';\n\nexport enum Destination {\n  About = '/About',\n  Dashboard = '/Dashboard',\n  GetStarted = '/GetStarted',\n  Home = '/',\n  Log = '/Log',\n  ProgramSelection = '/ProgramSelection',\n  Program = '/Program',\n  Settings = '/Settings',\n  Vault = '/Vault',\n  Workout = '/Workout/:id',\n}\n\nexport const Router = ({ children }: { children: React.ReactNode }) =>\n  Platform.OS === 'web' ? <HashRouter>{children}</HashRouter> : <NativeRouter>{children}</NativeRouter>;\n\nexport const useNavigate = () => (Platform.OS === 'web' ? useNavigateDom() : useNavigateNative());\n\nconst linkStyle = { color: '#FF8533' };\n\nexport const Link = ({ to, label }: { to: Destination; label: string }) => {\n  return Platform.OS === 'web' ? (\n    <DomLink to={to} style={{ textDecoration: 'none' }}>\n      <Text style={linkStyle}>{label}</Text>\n    </DomLink>\n  ) : (\n    <NativeLink to={to}>\n      <Text style={linkStyle}>{label}</Text>\n    </NativeLink>\n  );\n};\n\nexport const ExternalLink = ({ to, text }: { to: string; text: string }) => {\n  return (\n    <Text\n      style={linkStyle}\n      onPress={() => {\n        Linking.openURL(to);\n      }}\n    >\n      {text}\n    </Text>\n  );\n};\n\nexport const RoutingButton = ({\n  children,\n  to,\n  onPress,\n  ...rest\n}: {\n  children: React.ReactNode;\n  to: Destination | string;\n  secondary?: boolean;\n  onPress?: () => void;\n} & IButtonProps) => {\n  const navigate = useNavigate();\n  return (\n    <Button\n      {...rest}\n      onPress={() => {\n        onPress && onPress();\n        // @TODO use callbacks to fix bug with reducers not finishing before gotTo called\n        setTimeout(function () {\n          navigate(to);\n        }, 1000);\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const goToAbout = (navigate: NavigateFunction) => navigate(Destination.About);\n\nexport const goToGetStarted = (navigate: NavigateFunction) => navigate(Destination.GetStarted);\n\nexport const goToHome = (navigate: NavigateFunction) => navigate(Destination.Home);\n\nexport const goToDashboard = (navigate: NavigateFunction) => navigate(Destination.Dashboard);\n\nexport const goToLog = (navigate: NavigateFunction) => navigate(Destination.Log);\n\nexport const goToProgram = (navigate: NavigateFunction) => navigate(Destination.Program);\n\nexport const goToVault = (navigate: NavigateFunction) => navigate(Destination.Vault);\n\nexport const goToSettings = (navigate: NavigateFunction) => navigate(Destination.Settings);\n\nexport const goToWorkout = (navigate: NavigateFunction) => (id: number) => navigate(getWorkoutUrl(id));\n\nexport const getWorkoutUrl = (id: number) => Destination.Workout.replace(':id', id.toString());\n","import { extendTheme } from 'native-base';\n\nimport { Select } from './components/Select';\n\nexport const nativeBaseTheme = extendTheme({\n  fontSizes: {\n    xs: 11,\n    sm: 13,\n    md: 15,\n    lg: 18,\n    xl: 28,\n  },\n  colors: {\n    primary: {\n      '50': '#FFF3EB',\n      '100': '#FFE7D6',\n      '200': '#FFCEAD',\n      '300': '#FFB685',\n      '400': '#FF9D5C',\n      '500': '#FF8533',\n      '600': '#F56200',\n      '700': '#B84900',\n      '800': '#7A3100',\n      '900': '#3D1800',\n    },\n    secondary: {\n      '50': '#f9f9f8',\n      '100': '#e0e0de',\n      '200': '#a5a5a5',\n      '300': '#808080',\n      '400': '#656565',\n      '500': '#4a4a4a',\n      '600': '#434343',\n      '700': '#3a3a3a',\n      '800': '#323232',\n      '900': '#222222',\n    },\n  },\n  components: {\n    Select,\n  },\n});\n","export const Select = {\n  baseStyle: {\n    borderWidth: 0,\n    textAlign: 'right',\n    paddingTop: 0,\n  },\n};\n\n","import { Center, Spinner } from 'native-base';\n\nexport const Loader = () => (\n  <Center height={'100%'}>\n    <Spinner accessibilityLabel=\"Loading\" />\n  </Center>\n);\n","import React from 'react';\nimport { Box, HStack, Text, VStack } from 'native-base';\n\ninterface Cell {\n  content?: string | number | React.ReactNode;\n  fontWeight?: number | string;\n  textAlign?: string;\n  width?: string | number;\n  sideBorder?: boolean;\n  bottomBorder?: boolean;\n}\n\nexport const Table = ({ children }: { children: React.ReactNode }) => <VStack>{children}</VStack>;\n\nexport const TableHeader = ({ headings }: { headings: Cell[] }) => {\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'space-between'}\n      borderBottomWidth={1}\n      borderBottomColor={'secondary.100'}\n      marginBottom={1}\n    >\n      {headings.map((heading, id) => (\n        <TableCell\n          key={`${id}-${heading.content}`}\n          width={`${100 / headings.length}%`}\n          textAlign={heading.textAlign ?? 'center'}\n          fontWeight={500}\n          sideBorder={heading.sideBorder}\n          {...heading}\n        />\n      ))}\n    </HStack>\n  );\n};\n\nexport const TableCell = ({ width, textAlign, sideBorder, bottomBorder, content, fontWeight }: Cell) => {\n  return (\n    <>\n      {typeof content === 'object' ? (\n        <Box width={width}>{content}</Box>\n      ) : (\n        <Text\n          fontSize={'xs'}\n          fontWeight={fontWeight}\n          width={width}\n          textAlign={textAlign}\n          borderRightWidth={sideBorder ? 1 : 0}\n          borderBottomWidth={bottomBorder ? 1 : 0}\n          borderRightColor={'secondary.100'}\n        >\n          {content}\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport const TableRow = ({ children, values }: { children?: React.ReactNode; values?: Cell[] }) => {\n  return (\n    <HStack alignItems={'center'} justifyContent={'space-between'} marginBottom={1}>\n      {values?.map((item: Cell, id: number) => (\n        <TableCell key={`cell-${id}`} width={item.width ?? `${100 / values.length}%`} {...item} />\n      ))}\n      {children}\n    </HStack>\n  );\n};\n","export enum Gender {\n  Male = 'Male',\n  Female = 'Female',\n}\n\nexport enum UnitsType {\n  Metric = 'Metric (kg/cm)',\n  Imperial = 'Imperial (lbs/inches)',\n}\n\nexport enum ActivityLevel {\n  Sedentary = 'Not active and sedentary job',\n  LightlyActive = 'Lightly active and sedentary job',\n  Active = 'Active (over 10k steps per day)',\n  VeryActive = 'Very Active (physically demanding job)',\n}\n","import { HStack, Text } from 'native-base';\n\nexport const Paragraph = ({ children }: { children: React.ReactNode }) => <Text marginBottom={5}>{children}</Text>;\n\nexport const BulletPoint = ({ children }: { children: React.ReactNode }) => (\n  <HStack marginY={1} marginLeft={3}>\n    <Text marginRight={2}>{'\\u{29BF}'}</Text>\n    <Text>{children}</Text>\n  </HStack>\n);\n","import YoutubePlayer from 'react-native-youtube-iframe';\nimport { Video as ExpoVideo } from 'expo-av';\n\nexport const Video = ({ video, width = 320 }: { video: string; width?: number }) => {\n  const height = width * (9 / 16);\n  if (video.includes('http')) {\n    return (\n      <ExpoVideo\n        style={{\n          alignSelf: 'center',\n          width,\n          height,\n        }}\n        source={{\n          uri: video,\n        }}\n        useNativeControls\n      />\n    );\n  }\n\n  return <YoutubePlayer width={width} height={height} videoId={video} />;\n};\n","import { Text, HStack, Image, VStack } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nexport const FitnessComponents = () => {\n  const { t } = useTranslation();\n  return (\n    <VStack>\n      <HStack marginBottom={3} alignItems={'center'}>\n        <Image\n          marginRight={3}\n          width={50}\n          height={50}\n          resizeMode={'contain'}\n          alt={t('Strength')}\n          source={require('./strength-icon.png')}\n        />\n        <Text>\n          <Text fontSize={'xs'} bold>\n            {t('Strength:')}{' '}\n          </Text>\n          <Text fontSize={'xs'}>\n            {t(\n              'This is the “power” essential for vigilantes fighting crime! Without muscular strength, your body would be weak and unable to lift or carry heavy objects. The way to increase strength is to train with heavy weights, working in the 3 - 6 and the 8 - 12 rep ranges. We measure and track your strength by calculating your bodyweight to weight lifted ratio and one rep max (1RM).'\n            )}\n          </Text>\n        </Text>\n      </HStack>\n      <HStack marginBottom={3} alignItems={'center'}>\n        <Image\n          marginRight={3}\n          width={50}\n          height={50}\n          resizeMode={'contain'}\n          alt={t('Endurance')}\n          source={require('./cardio-icon.png')}\n        />\n        <Text>\n          <Text fontSize={'xs'} bold>\n            {t('Endurance:')}{' '}\n          </Text>\n          <Text fontSize={'xs'}>\n            {t(\n              'Endurance is critical for those long battles! It is the ability of your muscles and cardiovascular system to perform for extended periods of time. The way to increase endurance is to train in high rep ranges and improve sustaining physical exertion for extended periods of time. We measure and track your endurance through the number of push ups, pull ups and squat jumps you can do, the distance you can carry heavy objects and your 5k run time.'\n            )}\n          </Text>\n        </Text>\n      </HStack>\n      <HStack marginBottom={3} alignItems={'center'}>\n        <Image\n          marginRight={3}\n          width={50}\n          height={50}\n          resizeMode={'contain'}\n          alt={t('speed')}\n          source={require('./speed-icon.png')}\n        />\n        <Text>\n          <Text fontSize={'xs'} bold>\n            {t('Speed:')}{' '}\n          </Text>\n          <Text fontSize={'xs'}>\n            {t(\n              \"Can't let those villains get away! Speed is all about how fast you can move. We measure and track your speed by practicing and testing your mile run time.\"\n            )}\n          </Text>\n        </Text>\n      </HStack>\n    </VStack>\n  );\n};\n","import { Image } from 'native-base';\n\ntype LogoSize = 'sm' | 'md';\n\nconst Logo = ({ size }: { size?: LogoSize }) => {\n  let height = 268; // actual image height\n  switch (size) {\n    case 'sm':\n      height = height / 10;\n      break;\n    case 'md':\n      height = height / 4;\n      break;\n  }\n  return (\n    <Image marginBottom={1} width={'100%'} height={height} alt={'logo'} resizeMode={'contain'} source={require(`./logo.png`)} />\n  );\n};\n\nexport default Logo;\n","import { ReactElement, useEffect } from 'react';\nimport { Center, HStack, Icon, Image, Pressable, Text } from 'native-base';\nimport { NavigateFunction, useLocation } from 'react-router';\nimport { ImageSourcePropType, Platform } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useStoredState } from 'react-native-use-stored-state';\n\nimport { goToDashboard, goToLog, goToProgram, goToSettings, goToVault, useNavigate } from '../../utils/routing';\n\ninterface Tab {\n  label?: string;\n  icon?: string;\n  image?: ImageSourcePropType;\n  action: (navigate: NavigateFunction) => void;\n}\n\nconst tabs: Tab[] = [\n  {\n    label: 'Program',\n    icon: 'dumbbell',\n    action: goToProgram,\n  },\n  {\n    label: 'Log',\n    icon: 'calendar',\n    action: goToLog,\n  },\n  {\n    image: require('./go.png'),\n    action: goToDashboard,\n  },\n  {\n    label: 'Vault',\n    icon: 'video',\n    action: goToVault,\n  },\n  {\n    label: 'Settings',\n    icon: 'cog',\n    action: goToSettings,\n  },\n];\n\nexport const Navigation = (): ReactElement => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab] = useStoredState<number>('ACTIVE_NAV_TAB', 2);\n\n  useEffect(() => {\n    if (location.pathname.includes('Dashboard') || location.pathname.includes('Workout')) {\n      setSelectedTab(2);\n    } else {\n      tabs.forEach((tab, idx) => {\n        if (tab.label && location.pathname.includes(tab.label)) {\n          setSelectedTab(idx);\n        }\n      });\n    }\n  }, [location]);\n\n  return (\n    <HStack\n      bg={'secondary.100'}\n      alignItems={'center'}\n      safeAreaBottom\n      shadow={5}\n      paddingTop={2}\n      //@ts-expect-error forced web styles for sticky nav\n      style={Platform.OS === 'web' ? { position: 'fixed', bottom: 0, left: 0, width: '100%' } : {}}\n    >\n      {tabs.map((tab, id) => (\n        <Pressable\n          key={`nav-tab-${id}`}\n          opacity={selectedTab === id ? 1 : 0.5}\n          py={2}\n          flex={1}\n          onPress={() => {\n            setSelectedTab(id);\n            tab.action(navigate);\n          }}\n        >\n          <Center>\n            {tab.icon && <Icon mb={1} as={MaterialCommunityIcons} name={tab.icon} size={'md'} />}\n            {tab.label && <Text>{tab.label}</Text>}\n            {tab.image && <Image width={10} height={10} alt={'Next Workout'} resizeMode={'contain'} source={tab.image} />}\n          </Center>\n        </Pressable>\n      ))}\n    </HStack>\n  );\n};\n","import { Box, Center, ScrollView, Text } from 'native-base';\nimport { Platform } from 'react-native';\n\nimport Logo from '../Logo';\nimport { Navigation } from '../Navigation';\n\nexport const DefaultLayout = ({\n  children,\n  showNav,\n  showLogo,\n  backgroundColor = 'secondary.50',\n}: {\n  showNav?: boolean;\n  showLogo?: boolean;\n  children: React.ReactNode;\n  backgroundColor?: 'secondary.100' | 'secondary.50';\n}) => {\n  return (\n    <>\n      <Box flex={1} backgroundColor={backgroundColor}>\n        <Box safeArea flex={1} maxWidth={600} width={'95%'} marginX={'auto'} paddingY={5}>\n          <ScrollView>\n            {showLogo && (\n              <Center paddingY={5}>\n                <Logo size={'md'} />\n              </Center>\n            )}\n            {children}\n          </ScrollView>\n        </Box>\n      </Box>\n      {showNav && <Navigation />}\n    </>\n  );\n};\n\nexport const HeadedLayout = ({\n  showNav,\n  children,\n  backgroundColor = 'secondary.50',\n  heading,\n  headerElements,\n  showLogo = true,\n}: {\n  showNav?: boolean;\n  children: React.ReactNode;\n  heading?: string;\n  headerElements?: React.ReactNode;\n  backgroundColor?: string;\n  showLogo?: boolean;\n}) => {\n  return (\n    <Box flex={1} backgroundColor={backgroundColor}>\n      <Box flex={1} maxWidth={600} width={'100%'} marginX={'auto'}>\n        <Box\n          safeAreaTop\n          bg={'secondary.500'}\n          paddingY={2}\n          //@ts-expect-error forced web styles for sticky top\n          style={Platform.OS === 'web' ? { position: 'fixed', top: 0, left: 0, width: '100%', zIndex: 100 } : {}}\n        >\n          <Center>\n            {showLogo && <Logo size={'sm'} />}\n            {heading && (\n              <Text bold color={'white'}>\n                {heading}\n              </Text>\n            )}\n            {headerElements && <>{headerElements}</>}\n          </Center>\n        </Box>\n        <ScrollView\n          flex={1}\n          width={'96%'}\n          marginX={'auto'}\n          paddingBottom={20}\n          style={Platform.OS === 'web' ? { marginTop: '75px' } : {}}\n        >\n          {children}\n        </ScrollView>\n        {showNav && <Navigation />}\n      </Box>\n    </Box>\n  );\n};\n","import { ActivityLevel, Gender } from '../constants';\n\ninterface BmrArgs {\n  weightInLbs: number;\n  heightInInches: number;\n  age: number;\n  gender: Gender;\n  bodyFat?: number;\n}\n\nconst bmrFormulas: { [key: string]: (args: BmrArgs) => number } = {\n  miffinStJeor: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age - 161;\n    }\n\n    return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age + 5;\n  },\n  harrisBenedict: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 655.1 + 4.35 * weightInLbs + 4.7 * heightInInches - 4.7 * age;\n    }\n\n    return 66.47 + 6.24 * weightInLbs + 12.7 * heightInInches - 6.755 * age;\n  },\n  katchMcArdle: ({ bodyFat = 20, weightInLbs }: BmrArgs) => {\n    const leanMass = ((weightInLbs / 2.2) * (100 - bodyFat)) / 100;\n    return 370 + 21.6 * leanMass;\n  },\n};\n\nexport const calculateBMR = (args: BmrArgs, formula?: keyof typeof bmrFormulas): number => {\n  if (formula) {\n    return Math.round(bmrFormulas[formula](args));\n  }\n\n  const acc = Object.keys(bmrFormulas).reduce<number>((acc, current) => {\n    return acc + bmrFormulas[current as unknown as keyof typeof bmrFormulas](args);\n  }, 0);\n\n  return Math.round(acc / Object.keys(bmrFormulas).length);\n};\n\nexport const calculateTDEE = (activityLevel: ActivityLevel, bmr: number): number => {\n  let tdee;\n  switch (activityLevel) {\n    case ActivityLevel.Sedentary:\n      tdee = bmr * 1.2;\n      break;\n    case ActivityLevel.Active:\n      tdee = bmr * 1.55;\n      break;\n    case ActivityLevel.VeryActive:\n      tdee = bmr * 1.725;\n      break;\n    case ActivityLevel.LightlyActive:\n    default:\n      tdee = bmr * 1.375;\n  }\n\n  return Math.floor(tdee / 10) * 10;\n};\n\nexport const calculateMinimumProteinRequirement = (bodyWeightInLbs: number, bodyFat?: number, roundToNearest = 1): number => {\n  let grams = bodyWeightInLbs;\n  if (bodyFat) grams = bodyWeightInLbs - bodyWeightInLbs * (bodyFat / 100);\n  return Math.round(grams / roundToNearest) * roundToNearest;\n};\n\nexport const calculateBMI = (weightInLbs: number, heightInInches: number) => {\n  const bmi = (weightInLbs / heightInInches ** 2) * 703;\n  return Math.round(bmi * 10) / 10;\n};\n","export { ActivityLevel, UnitsType, Gender } from '../../fitness-tools';\n\nexport enum Goal {\n  Strength = 'Strength',\n  Size = 'Size',\n  Lean = 'Leanness',\n  Speed = 'Speed',\n}\n\nexport enum ExperienceLevel {\n  Beginner = 'Average Joe',\n  Novice = 'Novice',\n  Intermediate = 'Intermediate',\n  Advanced = 'Advanced',\n  Vigilante = 'Vigilante',\n}\n\nexport enum DietType {\n  Balanced = 'Balanced',\n  Keto = 'Keto',\n  Carnivore = 'Carnivore',\n  Pescatarian = 'Pescatarian',\n  Vegetarian = 'Vegetarian',\n  Vegan = 'Vegan',\n}\n\nexport enum WeekDay {\n  Monday = 'Monday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday',\n  Thursday = 'Thursday',\n  Friday = 'Friday',\n  Saturday = 'Saturday',\n  Sunday = 'Sunday',\n}\n","export enum ExerciseType {\n  Duration = 'Barbell',\n  Distance = 'Dumbbell',\n  Bodyweight = 'Bodyweight',\n  Machine = 'Machine',\n}\n\nexport enum Exercise {\n  Bench = 'Bench Press',\n  InclineBench = 'Incline Press',\n  InclineDumbbellBench = 'Incline Dumbbell Bench',\n  DumbbellBench = 'Flat Dumbbell Bench',\n  Press = 'Press',\n  DumbbellPress = 'Dumbbell Press',\n  CloseGripBench = 'Close Grip Bench Press',\n  LateralRaises = 'Lateral Raises',\n  OneArmLateralRaises = 'One Arm Cable Lateral Raises',\n  DiamondPushUp = 'Diamond Pushups',\n  Flyes = 'Flyes',\n  InclineFlyes = 'Incline DB Chest Flyes',\n  MachineChestPress = 'Machine Chest Press',\n  BehindNeckPress = 'Behind-the-Neck Overhead Press',\n\n  Deadlift = 'Deadlift',\n  RDL = 'Romanian Deadlift',\n  Squat = 'Squat',\n  FrontSquat = 'Front Squat',\n  Hyperextensions = 'Hyperextensions',\n  GoodMorning = 'Good Mornings',\n  LegPress = 'Leg Press',\n  LegCurls = 'Leg Curls',\n  LegExtensions = 'Leg Extensions',\n  BulgarianSplitSquat = 'Bulgarian Split Squats',\n  RomanianDeadlift = ' Romanian Deadlifts',\n  Calfs = 'Calf Raises',\n  HackSquats = 'Hack Squats',\n  Lunge = 'Lunge',\n\n  Curl = 'Curls',\n  InclineCurls = 'Incline Curls',\n  PreacherCurl = 'Preacher Curl',\n  TricepExtensions = 'Tricep Extensions',\n  Skullcrushers = 'Skullcrushers',\n  HammerCurl = 'Hammer Curls',\n  DBSkulls = 'Dumbbell Skullcrushers',\n  TricepRopePushdowns = 'Tricep Rope Pushdowns',\n  Kickbacks = 'Tricep Cable Kickbacks',\n  ConcentrationCurl = 'Conentration Curl',\n  SpiderCurls = 'Spider Curls',\n  DragCurl = 'Drag Curls',\n\n  Row = 'Row',\n  DumbbellRow = 'Dumbbell Row',\n  Shrugs = 'Shrugs',\n  CableRow = 'Seated Cable Row',\n  Pulldowns = 'Pulldowns',\n  RackChins = 'Rack Chins',\n\n  MultiLunge = 'Multi Directional Lunge',\n  ReverseLunge = 'Reverse Lunge',\n  WalkingLunges = 'Walking Lunges',\n  HipThrust = 'Hip Thrusts',\n  HipBand = 'Hip Bands Side Steps',\n\n  Facepull = 'Face pulls',\n  PullApart = 'Band Pull Aparts',\n  HighPulls = 'Dumbbell High Pulls / Upright Rows',\n\n  Pullup = 'Pull Ups',\n  Chinup = 'Chin Ups',\n  Pushup = 'Push Ups',\n  Dip = 'Dips',\n  MuscleUp = 'Muscle Ups',\n  HandstandPushup = 'Handstand Pushups',\n  Planche = 'Planche',\n\n  CableCrunches = 'Cable Crunches',\n  Situp = 'Sit Up',\n  LegRaises = 'Leg Raises',\n  AbWheel = 'Ab Wheel',\n  AlternatingLegRaises = 'Alternating Leg Raises',\n  TurkishGetUp = 'Turkish Get Ups',\n\n  PowerClean = 'Power Clean',\n  PowerSnatch = 'Power Snatch',\n\n  MileRun = 'Mile Run',\n  FiveKmRun = '5k Run',\n\n  DbCarry = 'Dumbbell Carry',\n  DbOverheadCarry = 'Dumbbell Ovehead Carry',\n}\n","const formulas: { [key: string]: (weight: number, reps: number) => number } = {\n  epley: (weight, reps) => weight * (1 + reps / 30),\n  brzycki: (weight, reps) => weight * (36 / (37 - reps)),\n  oconner: (weight, reps) => weight * (1 + 0.025 * reps),\n  lombardi: (weight, reps) => weight * reps ** 0.1,\n  wathan: (weight, reps) => (weight * 100) / (48.8 + 53.8 * Math.exp(-1 * (reps * 0.075))),\n  mayhem: (weight, reps) => (weight * 100) / (52.2 + 41.9 * Math.exp(-1 * (reps * 0.055))),\n  lander: (weight, reps) => (weight * 100) / (101.3 - 2.67123 * reps),\n};\n\nexport const calculate1RepMax = (weight: number, reps: number, formula?: keyof typeof formulas): number => {\n  if (reps == 0 || weight == 0) {\n    return 0;\n  }\n\n  if (reps == 1) {\n    return weight;\n  }\n\n  if (formula) {\n    return formulas[formula](weight, reps);\n  }\n\n  const acc = Object.keys(formulas).reduce((acc, current) => {\n    return acc + formulas[current](weight, reps);\n  }, 0);\n\n  return Math.floor(acc / Object.keys(formulas).length);\n};\n\nconst calculatRepMax = (oneRepMax: number, multiplier: number) => {\n  if (oneRepMax < 0) {\n    return Math.floor((Math.abs(oneRepMax) * (1 - multiplier) + Math.abs(oneRepMax)) * -1);\n  }\n\n  return Math.floor(oneRepMax * multiplier);\n};\n\nexport const calculateThreeRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.93);\n\nexport const calculateFiveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.88);\n\nexport const calculateEightRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.8);\n\nexport const calculateTenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.74);\n\nexport const calculateTwelveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.7);\n\nexport const calculateFithteenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.66);\n\nexport const calculateTwentyRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.59);\n\nexport const calculateRepMaxes = (\n  weight: number,\n  reps: number,\n  formula?: keyof typeof formulas\n): {\n  oneRepMax: number;\n  threeRepMax: number;\n  fiveRepMax: number;\n  eightRepMax: number;\n  tenRepMax: number;\n  twelveRepMax: number;\n  fithteenRepMax: number;\n  twentyRepMax: number;\n} => {\n  const oneRepMax = calculate1RepMax(weight, reps, formula);\n  return {\n    oneRepMax,\n    threeRepMax: calculateThreeRepMax(oneRepMax),\n    fiveRepMax: calculateFiveRepMax(oneRepMax),\n    eightRepMax: calculateEightRepMax(oneRepMax),\n    tenRepMax: calculateTenRepMax(oneRepMax),\n    twelveRepMax: calculateTwelveRepMax(oneRepMax),\n    fithteenRepMax: calculateFithteenRepMax(oneRepMax),\n    twentyRepMax: calculateTwentyRepMax(oneRepMax),\n  };\n};\n","export const kgToLbs = (kg: number): number => (kg *= 2.2);\n\nexport const lbsToKg = (lbs: number): number => (lbs /= 2.2);\n\nexport const cmToInches = (cms: number): number => Math.round(cms * 0.393701);\n\nexport const inchesToCm = (inches: number): number => Math.round(inches / 0.393701);\n\nexport const feetToCms = (feet: number): number => Math.round(feet * 30.48);\n\nexport const cmsToFeet = (cms: number): number => Math.round(cms / 30.48);\n\nexport const feetToInches = (feet: number): number => feet * 12;\n\nexport const inchesToFeet = (inches: number): number => inches / 12;\n\nexport const feetAndInchesToInches = (feet: number, inches: number): number => feetToInches(feet) + inches;\n\nexport const inchestToFeetAndInches = (input: number): number[] => {\n  const converted = inchesToFeet(input);\n  const feet = Math.floor(converted);\n  const inches = Math.round(feetToInches(converted - feet));\n  return [feet, inches];\n};\n","import { UnitsType } from '../constants';\n\nexport const toNearestIncrement = ({\n  weight,\n  unitsType,\n  increment,\n}: {\n  weight: number;\n  unitsType?: UnitsType;\n  increment?: number;\n}) => {\n  const inc = increment ?? unitsType === UnitsType.Metric ? 2.5 : 5;\n  return Math.round(weight / inc) * inc;\n};\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const arnoldRoutines: Program[] = [\n  {\n    id: 'GoldenSix',\n    name: \"Arnold's Golden Six\",\n    author: 'Arnold Schwarzenegger',\n    link: 'https://www.t-nation.com/training/tip-train-with-arnolds-golden-six/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 8,\n    workouts: (): Workout[] => {\n      return [\n        {\n          name: 'Golden Six',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              sets: Array(4).fill({ targetReps: 10 }),\n              rest: 2,\n              startingWeight: 'fithteenRepMax',\n            },\n            {\n              exercise: Exercise.Bench,\n              sets: Array(3).fill({ targetReps: 10 }),\n              rest: 2,\n              startingWeight: 'fithteenRepMax',\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.BehindNeckPress,\n              sets: Array(4).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: Array(4).fill({ AMRAP: true }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const ahtleanXRoutines: Program[] = [\n  {\n    id: 'AXFullBody',\n    name: 'AthleanX Perfect Total Body',\n    author: 'Jeff Cavaliere',\n    link: 'https://athleanx.com/articles/full-body-workout-plan',\n    video: 'R6gZoAzAhCg',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 8,\n    workouts: (level?: ExperienceLevel): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const mainRest = 2;\n      const secondarySets = Array(level === ExperienceLevel.Beginner ? 3 : 4);\n      const secondaryRest = 1;\n      const startingWeight = 'eightRepMax';\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Squat,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-squat.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.HipThrust,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-hip-thrust.mp4',\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-bench-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Chinup,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/weighted-chinup.mp4',\n              warmup: [\n                { percentage: 0, reps: 5 },\n                { percentage: 0, reps: 5 },\n              ],\n              sets: [...secondarySets].fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              video: '//athleanx.com/wp-content/uploads/2019/07/farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.5 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/banded-facepull.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-deadlift.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.ReverseLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/reverse-barbell-lunge.mp4',\n              sets: [...secondarySets].fill({ targetReps: 10 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-overhead-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-row.mp4',\n              warmup,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/dumbbell-overhead-farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.25 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.HipBand,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/hip-band-mini-ladder.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.PullApart,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/band-pull-aparts.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'AXPushPullLegs',\n  //   name: 'AthleanX Perfect Push Pull Legs',\n  //   author: 'Jeff Cavaliere',\n  //   link: 'https://athleanx.com/articles/full-body-workout-plan',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 6,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nconst warmup = [\n  { percentage: 50, reps: 5 },\n  { percentage: 60, reps: 5 },\n  { percentage: 70, reps: 3 },\n];\n\nexport const builtWithScienceRoutines: Program[] = [\n  {\n    id: 'BWSFullBody',\n    author: 'Jeremy Ethier',\n    name: 'Built With Science Full Body Workout For Growth',\n    link: 'https://builtwithscience.com/best-full-body-workout/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 8,\n    workouts: (level: ExperienceLevel): Workout[] => {\n      const isAtLeastIntermediate =\n        level === ExperienceLevel.Intermediate || level == ExperienceLevel.Advanced || level == ExperienceLevel.Vigilante;\n      const numberOfSets = isAtLeastIntermediate ? 4 : 3;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2.5,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2.5,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup: [{ reps: 5 }, { reps: 5 }],\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2.5,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(numberOfSets).fill({ minReps: 10, maxReps: 15 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Press,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2.5,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(numberOfSets).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1.5,\n            },\n            ...(isAtLeastIntermediate\n              ? [\n                  {\n                    exercise: Exercise.DragCurl,\n                    sets: Array(numberOfSets - 1).fill({ minReps: 8, maxReps: 10 }),\n                    rest: 1.5,\n                  },\n                ]\n              : []),\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2.5,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.InclineDumbbellBench,\n              warmup,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2.5,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.BulgarianSplitSquat,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 10 }),\n              rest: 1,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.CableRow,\n              warmup,\n              rest: 2.5,\n              sets: Array(numberOfSets).fill({ minReps: 6, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(numberOfSets).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1.5,\n            },\n            ...(isAtLeastIntermediate\n              ? [\n                  {\n                    exercise: Exercise.Kickbacks,\n                    sets: Array(numberOfSets).fill({ minReps: 10, maxReps: 15 }),\n                    rest: 1.5,\n                  },\n                  {\n                    exercise: Exercise.Flyes,\n                    sets: Array(numberOfSets).fill({ minReps: 10, maxReps: 15 }),\n                    rest: 1.5,\n                  },\n                ]\n              : []),\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'BWSUpperLower',\n    author: 'Jeremy Ethier',\n    name: 'Built With Science Upper Lower Workout For Growth',\n    link: 'https://builtwithscience.com/upper-body-workout/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 4,\n    workoutDuration: 60,\n  },\n  {\n    id: 'BWSPPL',\n    author: 'Jeremy Ethier',\n    name: 'Built With Science Push Pull Legs Workout For Growth',\n    link: 'https://builtwithscience.com/push-pull-legs-routine/',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 6,\n    workoutDuration: 60,\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const greyskullRoutines: Program[] = [\n  {\n    id: 'Greyskull',\n    author: 'John Sheaffer',\n    name: 'Greyskull LP',\n    link: 'https://greyskull.app/workouts/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 45,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const startingWeight = 'tenRepMax';\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }];\n      const mainRest = 3;\n\n      return [\n        {\n          name: 'Week 1 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 1 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 1 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n            },\n          ],\n        },\n\n        {\n          name: 'Week 2 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }],\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nconst startingWeight = 'fiveRepMax';\n\nconst warmup: RoutineSet[] = [\n  { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n  { percentage: 70, reps: 5, basis: 'fiveRepMax' },\n  { percentage: 80, reps: 3, basis: 'fiveRepMax' },\n];\n\nconst rptSets: RoutineSet[] = [\n  { targetReps: 6 },\n  { targetReps: 8, percentage: 90, basis: 'firstSet' },\n  { targetReps: 10, percentage: 80, basis: 'firstSet' },\n];\n\nconst mainRest = 3;\n\nexport const kinobodyRoutines: Program[] = [\n  {\n    id: 'KinoLucifer',\n    name: 'Kinobody Greek God - Lucifer Workout',\n    author: \"Greg O'Gallagher\",\n    link: 'https://blog.kinobody.com/best-of/celebrity-workout-routines/build-devilish-strength-with-the-kinobody-tom-ellis-lucifer-workout/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 8,\n    workouts: (): Workout[] => {\n      return [\n        {\n          name: 'Workout A: Chest, Shoulders, Triceps and Abs',\n          routine: [\n            {\n              exercise: Exercise.InclineBench,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: [\n                { targetReps: 8 },\n                { targetReps: 10, percentage: 90, basis: 'firstSet' },\n                { targetReps: 12, percentage: 80, basis: 'firstSet' },\n              ],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: [{ targetReps: 15 }, { targetReps: 6 }, { targetReps: 6 }, { targetReps: 6 }],\n              rest: 0.25,\n            },\n            {\n              exercise: Exercise.LegRaises,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n            },\n          ],\n        },\n        {\n          name: 'Workout B: Back, Biceps and Legs',\n          routine: [\n            {\n              exercise: Exercise.Chinup,\n              warmup: [\n                { reps: 5, weight: 0 },\n                { reps: 5, weight: 0 },\n              ],\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: [\n                { targetReps: 8 },\n                { targetReps: 8, percentage: 90, basis: 'firstSet' },\n                { targetReps: 10, percentage: 80, basis: 'firstSet' },\n              ],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.BulgarianSplitSquat,\n              warmup,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ targetReps: 15 }, { targetReps: 15 }, { targetReps: 15 }, { targetReps: 15 }],\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'KinoThor',\n    name: 'Kinobody Superhero - Thor Workout',\n    author: \"Greg O'Gallagher\",\n    link: 'https://blog.kinobody.com/workouts-and-exercises/chris-hemsworth-thor-ragnarok-workout-routine/',\n    level: [ExperienceLevel.Novice, ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 8,\n    workouts: (): Workout[] => {\n      return [\n        {\n          name: 'Workout A: Upperbody (Chest Emphasis)',\n          routine: [\n            {\n              exercise: Exercise.InclineBench,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.CableRow,\n              warmup,\n              sets: Array(3).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.DumbbellBench,\n              sets: rptSets,\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 6, maxReps: 8 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Skullcrushers,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: [{ targetReps: 15 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }],\n              rest: 0.25,\n            },\n          ],\n        },\n        {\n          name: 'Workout B: Legs & Abs',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: Array(4).fill({ minReps: 8, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LegExtensions,\n              sets: Array(3).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(3).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1,\n            },\n            {\n              exercise: Exercise.LegRaises,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.AbWheel,\n              sets: Array(4).fill({ minReps: 10, maxReps: 15 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout C: Upperbody (Shoulder & Arm Emphasis)',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup: [{ reps: 5 }, { reps: 5 }],\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.InclineFlyes,\n              sets: [{ targetReps: 15 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }],\n              rest: 0.25,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              sets: Array(3).fill({ minReps: 6, maxReps: 8 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.OneArmLateralRaises,\n              sets: [{ targetReps: 15 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }],\n              rest: 0.25,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'KinoSuperman',\n    name: 'Kinobody Superhero - Superman Workout',\n    author: \"Greg O'Gallagher\",\n    link: 'https://blog.kinobody.com/workouts-and-exercises/henry-cavill-workout/',\n    level: [ExperienceLevel.Novice, ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 8,\n    workouts: (): Workout[] => {\n      const mainSets: RoutineSet[] = [\n        { minReps: 6, maxReps: 8 },\n        { minReps: 6, maxReps: 8 },\n        { minReps: 8, maxReps: 10 },\n        { minReps: 8, maxReps: 10 },\n      ];\n      return [\n        {\n          name: 'Workout A: Upperbody (Chest Emphasis)',\n          routine: [\n            {\n              exercise: Exercise.InclineBench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.CableRow,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.DumbbellBench,\n              sets: [{ targetReps: 12 }, { targetReps: 10 }, { targetReps: 8 }, { targetReps: 6 }],\n              rest: 0.5,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 6, maxReps: 8 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Skullcrushers,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: [{ targetReps: 12 }, { targetReps: 10 }, { targetReps: 8 }, { targetReps: 6 }, { minReps: 12, maxReps: 15 }],\n              rest: 0.5,\n            },\n          ],\n        },\n        {\n          name: 'Workout B: Legs & Abs',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: Array(4).fill({ minReps: 8, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LegExtensions,\n              sets: Array(3).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(3).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(3).fill({ minReps: 10, maxReps: 15 }),\n              rest: 1,\n            },\n            {\n              exercise: Exercise.LegRaises,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.AbWheel,\n              sets: Array(4).fill({ minReps: 10, maxReps: 15 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout C: Upperbody (Shoulder Emphasis)',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup: [{ reps: 5 }, { reps: 5 }],\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.InclineDumbbellBench,\n              sets: [{ targetReps: 12 }, { targetReps: 10 }, { targetReps: 8 }, { targetReps: 6 }],\n              rest: 0.5,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              sets: Array(3).fill({ minReps: 6, maxReps: 8 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: [{ targetReps: 12 }, { targetReps: 10 }, { targetReps: 8 }, { targetReps: 6 }, { minReps: 12, maxReps: 15 }],\n              rest: 0.5,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nconst startingWeight = 'eightRepMax';\n\nconst warmup: RoutineSet[] = [\n  { percentage: 40, reps: 5, basis: 'fiveRepMax' },\n  { percentage: 60, reps: 5, basis: 'fiveRepMax' },\n  { percentage: 70, reps: 3, basis: 'fiveRepMax' },\n];\n\nconst rptSets: RoutineSet[] = [\n  { targetReps: 8, AMRAP: true },\n  { targetReps: 10, AMRAP: true, percentage: 90, basis: 'firstSet' },\n  { targetReps: 12, AMRAP: true, percentage: 80, basis: 'firstSet' },\n];\n\nconst mainRest = 3;\n\nexport const leanGainsRoutines: Program[] = [\n  {\n    id: 'LeangainsRPT',\n    name: 'Leangains RPT',\n    author: 'Martin Berkhan',\n    link: 'https://leangains.com/reverse-pyramid-training-guide/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 8,\n    workouts: (): Workout[] => {\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { targetReps: 6, AMRAP: true },\n                { targetReps: 8, AMRAP: true },\n              ],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.Skullcrushers,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: rptSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(2).fill({ targetReps: 10 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const oldSchoolRoutines: Program[] = [\n  {\n    id: 'OldSchool2Day',\n    author: 'Kevin Hellman',\n    name: 'Old School Trainer 2 Days a Week Minimalist Routine',\n    link: 'https://oldschooltrainer.com/minimalist-power-and-bulk/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 2,\n    workoutDuration: 45,\n    weeklySchedule: [0, 3],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const mainSets = [\n        { targetReps: 5 },\n        { targetReps: 5 },\n        { targetReps: 5, AMRAP: true },\n        ...Array(3).fill({ targetReps: 15, percentage: 50 }),\n      ];\n      const mainRest = 2;\n      const startingWeight = 'eightRepMax';\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      return [\n        {\n          name: 'Lower',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(3).fill({ targetReps: 10 }),\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: [...Array(3).fill({ targetReps: 8 }), ...Array(2).fill({ targetReps: 10, percentage: 50 })],\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(3).fill({ targetReps: 15 }),\n            },\n            {\n              exercise: Exercise.LegRaises,\n              sets: Array(3).fill({ targetReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Upper',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(3).fill({ targetReps: 15 }),\n            },\n            {\n              exercise: Exercise.Pullup,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const otherRoutines: Program[] = [\n  {\n    id: 'StartingAesthetics',\n    name: 'Starting Aesthetics',\n    link: 'https://powerexplosive.com/starting-aesthetics/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 4,\n    workoutDuration: 45,\n    weeklySchedule: [0, 1, 3, 5],\n    duration: 8,\n    workouts: (): Workout[] => {\n      const startingWeight = 'tenRepMax';\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 6 }, { targetReps: 6 }, { targetReps: 6, AMRAP: true }];\n      const mainRest = 2;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: Array(3).fill({ targetReps: 8 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ targetReps: 8 }),\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              sets: Array(3).fill({ targetReps: 10 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'PHAT',\n    author: 'Layne Norton',\n    name: 'PHAT: Power Hypertrophy Adaptive Training',\n    link: 'https://simplyshredded.com/mega-feature-layne-norton-training-series-full-powerhypertrophy-routine-updated-2011.html',\n    level: [ExperienceLevel.Beginner],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 5,\n    workoutDuration: 60,\n    weeklySchedule: [0, 1, 3, 4, 5],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      return [\n        {\n          name: 'Upper Power',\n          routine: [\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: Array(3).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'fiveRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              sets: Array(2).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.RackChins,\n              sets: Array(2).fill({ minReps: 6, maxReps: 10 }),\n            },\n            {\n              exercise: Exercise.DumbbellBench,\n              warmup,\n              sets: Array(3).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'fiveRepMax',\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: Array(2).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.DumbbellPress,\n              sets: Array(3).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 6, maxReps: 10 }),\n            },\n            {\n              exercise: Exercise.Skullcrushers,\n              sets: Array(3).fill({ minReps: 6, maxReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Lower Power',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: Array(3).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'fiveRepMax',\n            },\n            {\n              exercise: Exercise.HackSquats,\n              sets: Array(2).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LegExtensions,\n              sets: Array(2).fill({ minReps: 6, maxReps: 10 }),\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: Array(3).fill({ minReps: 5, maxReps: 8 }),\n              rest: 3,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(2).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(5).fill({ minReps: 6, maxReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Back & Shoulders Hypertrophy',\n          routine: [\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: Array(6).fill({ targetReps: 3, percentage: 70, basis: 'fiveRepMax' }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.RackChins,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.CableRow,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(2).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.DumbbellPress,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.HighPulls,\n              sets: Array(2).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ minReps: 12, maxReps: 20 }),\n            },\n          ],\n        },\n        {\n          name: 'Lower Body Hypertrophy',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: Array(6).fill({ targetReps: 3, percentage: 70, basis: 'fiveRepMax' }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.HackSquats,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LegPress,\n              sets: Array(3).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.LegExtensions,\n              sets: Array(3).fill({ minReps: 15, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(2).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(2).fill({ minReps: 15, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(4).fill({ minReps: 10, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(3).fill({ minReps: 15, maxReps: 20 }),\n            },\n          ],\n        },\n        {\n          name: 'Chest & Arms Hypertrophy',\n          routine: [\n            {\n              exercise: Exercise.DumbbellPress,\n              warmup,\n              sets: Array(6).fill({ targetReps: 3, percentage: 70, basis: 'fiveRepMax' }),\n              rest: 1.5,\n            },\n            {\n              exercise: Exercise.InclineDumbbellBench,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.MachineChestPress,\n              sets: Array(3).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.InclineFlyes,\n              sets: Array(2).fill({ minReps: 15, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.PreacherCurl,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.ConcentrationCurl,\n              sets: Array(2).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.SpiderCurls,\n              sets: Array(2).fill({ minReps: 15, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(2).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Kickbacks,\n              sets: Array(2).fill({ minReps: 15, maxReps: 20 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'PHUL',\n    author: 'Brandon Campbell',\n    name: 'PHUL: Power Hypertrophy Upper Lower',\n    link: 'https://www.muscleandstrength.com/workouts/phul-workout',\n    level: [ExperienceLevel.Beginner],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 4,\n    workoutDuration: 60,\n    weeklySchedule: [0, 1, 3, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      return [\n        {\n          name: 'Upper Power',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: Array(4).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.InclineDumbbellBench,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: Array(4).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pulldowns,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Press,\n              sets: Array(3).fill({ minReps: 5, maxReps: 8 }),\n              rest: 2,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 6, maxReps: 10 }),\n            },\n            {\n              exercise: Exercise.Skullcrushers,\n              sets: Array(3).fill({ minReps: 6, maxReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Lower Power',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: Array(4).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: Array(4).fill({ minReps: 3, maxReps: 5 }),\n              rest: 3,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.LegPress,\n              sets: Array(4).fill({ minReps: 10, maxReps: 15 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n            },\n          ],\n        },\n        {\n          name: 'Upper Hyperthrophy',\n          routine: [\n            {\n              exercise: Exercise.InclineBench,\n              warmup,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.DumbbellBench,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.CableRow,\n              warmup,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n            },\n          ],\n        },\n        {\n          name: 'Lower Hyperthrophy',\n          routine: [\n            {\n              exercise: Exercise.FrontSquat,\n              warmup,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Lunge,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n            },\n            {\n              exercise: Exercise.LegExtensions,\n              sets: Array(4).fill({ minReps: 10, maxReps: 15, percentage: 70 }),\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(4).fill({ minReps: 10, maxReps: 15, percentage: 70 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(8).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const redditRoutines: Program[] = [\n  {\n    id: 'RedditBegginers',\n    author: 'r/Fitness',\n    name: 'Reddit Basic Beginner Routine',\n    link: 'https://thefitness.wiki/routines/r-fitness-basic-beginner-routine/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 45,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }];\n      const mainRest = 3;\n      const startingWeight = 'eightRepMax';\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'RedditPPL',\n    author: 'Metallicadpa',\n    name: 'Reddit Linear Progression Push Pull Legs',\n    link: 'https://www.reddit.com/r/Fitness/comments/37ylk5/a_linear_progression_based_ppl_program_for/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 6,\n    workoutDuration: 45,\n    weeklySchedule: [0, 1, 2, 3, 4, 5, 6],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const mainSets = [\n        { targetReps: 5 },\n        { targetReps: 5 },\n        { targetReps: 5 },\n        { targetReps: 5 },\n        { targetReps: 5, AMRAP: true },\n      ];\n      const mainRest = 3;\n      const startingWeight = 'eightRepMax';\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      return [\n        {\n          name: 'Pull A',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.CableRow,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(5).fill({ minReps: 12, maxReps: 20 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Push A',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.InclineDumbbellBench,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(6).fill({ minReps: 15, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n          ],\n        },\n        {\n          name: 'Legs A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LegPress,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(5).fill({ minReps: 8, maxReps: 12 }),\n            },\n          ],\n        },\n\n        {\n          name: 'Pull B',\n          routine: [\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pulldowns,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.CableRow,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(5).fill({ minReps: 12, maxReps: 20 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Push B',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12, percentage: 70 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.InclineDumbbellBench,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.TricepRopePushdowns,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(6).fill({ minReps: 15, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n          ],\n        },\n        {\n          name: 'Legs B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.RomanianDeadlift,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n              rest: 2,\n            },\n            {\n              exercise: Exercise.LegPress,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LegCurls,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Calfs,\n              sets: Array(5).fill({ minReps: 12, maxReps: 20 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const ssRoutines: Program[] = [\n  {\n    id: 'StartingStrength',\n    author: 'Mark Rippetoe',\n    name: 'Starting Strength',\n    link: 'https://startingstrength.com/get-started/programs',\n    video: 'a9-a_8hC17M',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '37-wjE_c4NU',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              sets,\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'TexasMethod',\n    author: 'Mark Rippetoe',\n    name: 'The Texas Method',\n    link: 'https://startingstrength.com/article/the_texas_method',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 60, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 70, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const volumeSets: RoutineSet[] = [\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const progressionSets: RoutineSet[] = [{ targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '2ggG1M2gGes',\n              sets: [{ targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }],\n              rest,\n            },\n          ],\n        },\n        // @TODO think about how to deal with alternating exercises\n        {\n          name: 'Workout A2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerSnatch,\n              video: 'uyY_ySdN6OU',\n              sets: [\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n              ],\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const slRoutines: Program[] = [\n  {\n    id: 'StrongLifts',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Strong Lifts',\n    link: 'https://stronglifts.com/5x5/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          video: 'EP2g3Sj3qSw',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Dip,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'ICF',\n    author: 'Jason Blaha',\n    name: 'Ice Cream Fitness 5x5',\n    video: 'oAuARgqS6aQ',\n    link: 'https://www.muscleandstrength.com/workouts/jason-blaha-ice-cream-fitness-5x5-novice-workout',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Size, Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 90,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 2;\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const secondaryRest = 1.5;\n      const secondarySets = [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'yS8yUgRMiy4',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              video: 'Io4Fq0SpMAY',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'm_WPH1NYPxc',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              note: '10% ligther than Workout A',\n              ignoreForTracking: true,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'V8bDeB7UPFo',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.CloseGripBench,\n              video: '8hgpyLrdWXs',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              video: 'H2T3tSbI_iQ',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'Madcow',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Madcow 5x5',\n    link: 'https://stronglifts.com/madcow-5x5/',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 87.5, reps: 5, basis: 'fiveRepMax' },\n      ];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              note: 'Lighter than monday for recovery',\n              ignoreForTracking: true,\n              warmup: [\n                { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n              ],\n              sets: [\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: [{ targetReps: 6 }, { targetReps: 6 }, { targetReps: 6 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nconst startingWeight = 'tenRepMax';\nconst warmup = [\n  { percentage: 50, reps: 5 },\n  { percentage: 60, reps: 5 },\n  { percentage: 70, reps: 3 },\n];\n\nexport const vigilanteRoutines: Program[] = [\n  {\n    id: 'Vigilante2Day',\n    name: 'Vigilante Minimalist 2 Day Training',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 2,\n    weeklySchedule: [0, 3],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }];\n      const secondarySets = [{ targetReps: 5 }, { targetReps: 5, AMRAP: true }];\n      const mainRest = 2;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Press,\n              sets: secondarySets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              sets: secondarySets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 3 }, { targetReps: 3 }, { targetReps: 3, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Bench,\n              sets: secondarySets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Squat,\n              sets: secondarySets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              sets: secondarySets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'Vigilante3Day',\n    name: 'Vigilante Full Body Training',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (level: ExperienceLevel): Workout[] => {\n      const mainSets = [\n        { targetReps: 5 },\n        { targetReps: 5 },\n        { targetReps: 5, AMRAP: true },\n        ...(level === ExperienceLevel.Intermediate\n          ? [{ targetReps: 10, AMRAP: true, percentage: 65, ignoreForTracking: true }]\n          : []),\n      ];\n      const mainRest = 3;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(3).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'VigilanteAdvanced3Day',\n    name: 'Vigilante Advanced Full Body Training',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const mainSets: RoutineSet[] = [\n        { targetReps: 5, AMRAP: true },\n        { targetReps: 10, AMRAP: true, percentage: 70, ignoreForTracking: true },\n        { targetReps: 15, AMRAP: true, percentage: 60, ignoreForTracking: true },\n      ];\n      const mainRest = 2;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.MuscleUp,\n              bodyweight: true,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.HipThrust,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: mainSets,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Planche,\n              bodyweight: true,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(4).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight,\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.TurkishGetUp,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.HandstandPushup,\n              bodyweight: true,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.FrontSquat,\n              warmup,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight: 'twelveRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.InclineBench,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight: 'twelveRepMax',\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.DiamondPushUp,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.Chinup,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.HighPulls,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nconst standard531Cycle: RoutineSet[][] = [\n  [\n    { percentage: 65, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 75, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 85, targetReps: 5, basis: 'threeRepMax', AMRAP: true, ignoreForTracking: true },\n  ],\n  [\n    { percentage: 70, targetReps: 3, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 80, targetReps: 3, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 90, targetReps: 3, basis: 'threeRepMax', AMRAP: true, ignoreForTracking: true },\n  ],\n  [\n    { percentage: 75, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 85, targetReps: 3, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 95, targetReps: 1, basis: 'threeRepMax', AMRAP: true }, // only set used for recalculating 1RM\n  ],\n  [\n    { percentage: 40, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 50, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n    { percentage: 60, targetReps: 5, basis: 'threeRepMax', AMRAP: true, ignoreForTracking: true },\n  ],\n];\n\nexport const wendlerRoutines: Program[] = [\n  {\n    id: 'WendlerBBB',\n    author: 'Jim Wendler',\n    name: '5/3/1 Boring But Big',\n    link: 'https://www.jimwendler.com/blogs/jimwendler-com/101077382-boring-but-big',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size],\n    daysPerWeek: 4,\n    weeklySchedule: [0, 1, 3, 4],\n    workoutDuration: 60,\n    duration: 4,\n    workouts: (): Workout[] => {\n      const mainRest = 2;\n      const warmup: RoutineSet[] = [\n        { percentage: 40, reps: 5, basis: 'threeRepMax' },\n        { percentage: 50, reps: 5, basis: 'threeRepMax' },\n        { percentage: 60, reps: 3, basis: 'threeRepMax' },\n      ];\n      const workouts: Workout[] = standard531Cycle\n        .map((mainSets, weekIndex) => {\n          const weekNumber = weekIndex + 1;\n          return [\n            {\n              name: `Week ${weekNumber} Press`,\n              routine: [\n                {\n                  exercise: Exercise.Press,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Bench,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.Chinup,\n                  sets: Array(5).fill({ targetReps: 10 }),\n                  bodyweight: true,\n                },\n                {\n                  exercise: Exercise.TricepExtensions,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Curl,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Facepull,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Deadlift`,\n              routine: [\n                {\n                  exercise: Exercise.Deadlift,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Squat,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.CableCrunches,\n                  sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Bench`,\n              routine: [\n                {\n                  exercise: Exercise.Bench,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Press,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.DumbbellRow,\n                  sets: Array(5).fill({ targetReps: 10 }),\n                  bodyweight: true,\n                },\n                {\n                  exercise: Exercise.TricepExtensions,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Curl,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Facepull,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Squat`,\n              routine: [\n                {\n                  exercise: Exercise.Squat,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Deadlift,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.LegRaises,\n                  sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n                  bodyweight: true,\n                },\n              ],\n            },\n          ];\n        })\n        .flat();\n      return workouts;\n    },\n  },\n  {\n    id: 'WendlerBodybuilding',\n    author: 'Jim Wendler',\n    name: '5/3/1 Bodybuilding',\n    link: 'https://www.jimwendler.com/blogs/jimwendler-com/101075206-5-3-1-and-bodybuilding',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 4,\n    weeklySchedule: [0, 1, 3, 4],\n    workoutDuration: 60,\n    duration: 4,\n    workouts: (): Workout[] => {\n      const mainRest = 2;\n      const warmup: RoutineSet[] = [\n        { percentage: 40, reps: 5, basis: 'threeRepMax' },\n        { percentage: 50, reps: 5, basis: 'threeRepMax' },\n        { percentage: 60, reps: 3, basis: 'threeRepMax' },\n      ];\n      const workouts: Workout[] = standard531Cycle\n        .map((mainSets, weekIndex) => {\n          const weekNumber = weekIndex + 1;\n          return [\n            {\n              name: `Week ${weekNumber} Shoulders and Biceps`,\n              routine: [\n                {\n                  exercise: Exercise.Press,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.DumbbellPress,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.LateralRaises,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.Curl,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.PreacherCurl,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Back`,\n              routine: [\n                {\n                  exercise: Exercise.Deadlift,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Row,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.Chinup,\n                  warmup,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.GoodMorning,\n                  warmup,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.LegRaises,\n                  warmup,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.Facepull,\n                  sets: Array(3).fill({ targetReps: 12 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Chest and Triceps`,\n              routine: [\n                {\n                  exercise: Exercise.Bench,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Dip,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                },\n                {\n                  exercise: Exercise.Flyes,\n                  sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n                  bodyweight: true,\n                },\n                {\n                  exercise: Exercise.TricepExtensions,\n                  sets: Array(5).fill({ targetReps: 20 }),\n                },\n                {\n                  exercise: Exercise.Pushup,\n                  sets: Array(4).fill({ AMRAP: true }),\n                  bodyweight: true,\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Legs and Abs`,\n              routine: [\n                {\n                  exercise: Exercise.Squat,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.LegPress,\n                  sets: Array(5).fill({ minReps: 12, maxReps: 15 }),\n                },\n                {\n                  exercise: Exercise.LegCurls,\n                  sets: Array(5).fill({ minReps: 12, maxReps: 15 }),\n                },\n                {\n                  exercise: Exercise.LegExtensions,\n                  sets: Array(4).fill({ minReps: 12, maxReps: 15 }),\n                },\n                {\n                  exercise: Exercise.AbWheel,\n                  sets: Array(4).fill({ minReps: 12 }),\n                },\n              ],\n            },\n          ];\n        })\n        .flat();\n      return workouts;\n    },\n  },\n  {\n    id: 'WendlerMonolith',\n    author: 'Jim Wendler',\n    name: '5/3/1 Building the Monolith',\n    link: 'https://www.jimwendler.com/blogs/jimwendler-com/101078918-building-the-monolith-5-3-1-for-size',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 75,\n    duration: 6,\n    workouts: (): Workout[] => {\n      const mainRest = 2;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'threeRepMax' },\n        { percentage: 60, reps: 5, basis: 'threeRepMax' },\n      ];\n      return [\n        {\n          name: 'Week 1 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                { percentage: 90, reps: 5, basis: 'threeRepMax' },\n                { percentage: 70, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Pullup,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dip,\n              ignoreForTracking: true,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Week 1 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 1 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                { percentage: 90, reps: 5, basis: 'threeRepMax' },\n                { percentage: 45, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              warmup,\n              sets: Array(10).fill({ percentage: 70, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.PullApart,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 65, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dip,\n              ignoreForTracking: true,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 55, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              warmup,\n              sets: Array(10).fill({ percentage: 50, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Pullup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.PullApart,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 3 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, reps: 5, basis: 'threeRepMax', AMRAP: true },\n                { percentage: 75, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Pullup,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dip,\n              ignoreForTracking: true,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Week 3 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', AMRAP: true },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', AMRAP: true },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n                { percentage: 95, targetReps: 5, basis: 'threeRepMax', ignoreForTracking: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 3 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, reps: 5, basis: 'threeRepMax', AMRAP: true },\n                { percentage: 55, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              warmup,\n              sets: Array(10).fill({ percentage: 75, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              ignoreForTracking: true,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.PullApart,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              ignoreForTracking: true,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../constants';\nimport { Program } from './interfaces';\nimport { arnoldRoutines } from './routines/arnold';\nimport { ahtleanXRoutines } from './routines/athleanx';\n// import { aWorkoutRoutines } from './routines/aworkoutroutine';\nimport { builtWithScienceRoutines } from './routines/builtwithschience';\nimport { greyskullRoutines } from './routines/greyskull';\n// import { gzclRoutines } from './routines/gzcl';\nimport { kinobodyRoutines } from './routines/kinobody';\nimport { leanGainsRoutines } from './routines/leangains';\nimport { oldSchoolRoutines } from './routines/oldschool';\nimport { otherRoutines } from './routines/other';\nimport { redditRoutines } from './routines/reddit';\nimport { ssRoutines } from './routines/startingstrength';\nimport { slRoutines } from './routines/stronglifts';\nimport { vigilanteRoutines } from './routines/vigilante';\nimport { wendlerRoutines } from './routines/wendler';\n\nexport const programs: Program[] = [\n  ...ssRoutines,\n  ...slRoutines,\n  ...ahtleanXRoutines,\n  // ...aWorkoutRoutines,\n  ...builtWithScienceRoutines,\n  ...greyskullRoutines,\n  // ...gzclRoutines,\n  ...kinobodyRoutines,\n  ...leanGainsRoutines,\n  ...oldSchoolRoutines,\n  ...otherRoutines,\n  ...redditRoutines,\n  ...wendlerRoutines,\n  ...vigilanteRoutines,\n  ...arnoldRoutines,\n].sort((a, b) => {\n  return a.name > b.name ? 1 : -1;\n});\n\nexport const getProgram = (id: string): Program => programs.find((program) => program.id === id)!;\n\nexport const getProgramRecommendations = ({\n  gender,\n  strengthLevel,\n  primaryGoal,\n  secondaryGoal,\n  maxDaysPerWeek,\n  maxWorkoutDuration,\n}: {\n  gender: Gender;\n  strengthLevel: ExperienceLevel;\n  speedLevel: ExperienceLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  maxDaysPerWeek: number;\n  maxWorkoutDuration: number;\n}): { suitablePrograms: Program[]; bestMatch: string } => {\n  const suitablePrograms = programs.filter((program) => {\n    const isLevelAppropriate = program.level.includes(strengthLevel);\n    const isGenderAppropriate = program.gender.includes(gender);\n    const meetsPrimaryGoal = program.goal.includes(primaryGoal);\n    const meetsSecondaryGoal = program.goal.includes(secondaryGoal);\n    const isSuitableSchedule = program.daysPerWeek <= maxDaysPerWeek && program.workoutDuration <= maxWorkoutDuration;\n    return isLevelAppropriate && isGenderAppropriate && meetsPrimaryGoal && meetsSecondaryGoal && isSuitableSchedule;\n  });\n  const bestMatch = 'Vigilante3Day';\n\n  return { suitablePrograms, bestMatch };\n};\n","import { Center, Heading, HStack, Image, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint, Paragraph } from '../../components/Content';\nimport { FitnessComponents } from './FitnessComponents';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { programs } from '../../domain/programs';\nimport { Destination, ExternalLink, RoutingButton } from '../../utils/routing';\n\nexport default function About() {\n  const { t } = useTranslation();\n  return (\n    <DefaultLayout showLogo>\n      <Paragraph>\n        {t(\n          'The internet is polluted with good and bad training advice, it is overwhelming and hard to know how to get started and how to advance in your fitness journey. This app fixes that, it matches your current level of strength and fitness, along with your lifestyle and goals, to tried and tested training and nutrition protocols focused on the main components of physical fitness:'\n        )}\n      </Paragraph>\n      <FitnessComponents />\n      <Paragraph>\n        {t(\n          'The app has a database of the most popular stregnth and weight lifting programs available for free on the internet that have been proven to work over and over again. These include:'\n        )}\n      </Paragraph>\n      {programs.map(({ id, name, link }) => (\n        <BulletPoint key={id}>\n          <ExternalLink to={link} text={name} />\n        </BulletPoint>\n      ))}\n      <Paragraph>\n        {t(\n          'The app filters them down to your level, preferences and disponibility, and maps out a journey of progression with appropriate conditioning and nutrition added, taking away all the guess work and giving years worth of training to follow. It will set you short term goals for strength, endurance and speed, and as you progress the programming updates and sets you new and more challenging targets. It keeps you progressing in the most optimal way possible and you will see your performance and physique transform to that of a vigilante...'\n        )}\n      </Paragraph>\n      <Center>\n        <Image\n          width={'100%'}\n          height={185}\n          resizeMode={'contain'}\n          alt={'Welcome'}\n          source={require('../../assets/comics/comic1.png')}\n        />\n      </Center>\n      <Paragraph>\n        {t(\n          'Everything is tailored to your goals and preferences to ensure it is enjoyable and sustainable with the aim of getting you stronger, faster and leaner. Sustainability and consistency is the only recipe for success no matter the program you follow.'\n        )}\n      </Paragraph>\n      <Heading size={'sm'}>{t('Example 1')}</Heading>\n      <Paragraph>\n        {t(\n          'As a complete beginner who is overweight (200lbs/~30% BF), has never lifted before and has a sedentary job/lifestyle. Willing and able to workout at most 3 days a week for an hour and is happy keeping it simple with the main goal of being strong and lean, would go through a multi phase programming that cosists of:'\n        )}\n      </Paragraph>\n      <BulletPoint>\n        An initial goal to deadlift and squat bodyweight, bench 1 plate (60kg/135lbs) and do assisted pull ups with 50% bodyweight\n        assist (all for 5 reps). To achieve this we follow the <Text bold>Greyskull LP</Text> routine. Nutrition would be focused\n        around <Text bold>an aggresive cut</Text> (~600 calorie deficit = 2200calories) with ample protein (at least 1g per pound\n        of lean bodyweight = 140g).\n      </BulletPoint>\n      <BulletPoint>\n        With the initial goals met the programming will update and set you new targets of Bench Pressing bodyweight, Overhead\n        pressing 70% of bodyweight, Squating 2 plates (100kg/225lbs) and Deadlifting 1.5x bodyweight, as well as doing unassissted\n        pull ups. The weights will deload and the workout routine will switch to{' '}\n        <Text bold>AthleanX&apos;s Perfect Total Body</Text>. This adds some more volume and improves work capacity and endurance.\n        Nutrition would stay the same unless you have not lost any weight in over 2 weeks, at which point an{' '}\n        <Text bold>additional 200 calorie deficit</Text> is applied.\n      </BulletPoint>\n      <BulletPoint>\n        With the second set of goals met, things will start to get a bit more challenging. The new targets are now to bench press\n        2 plates (100kg/225lbs), overhead press 1 plate (60kg/135lbs) and deadlift 3 plates (140kg/315lbs). If progress is still\n        strong on the AthleanX routine you will remain on it, once you start stalling the app will suggest a deload and switching\n        back to <Text bold>Greyskull LP</Text> in order to make use of double progression focusing on improving those rep maxes on\n        previously done weights for new strength gains. Nutrition <Text bold>moves to maintenance calories</Text> to aid meeting\n        the goals and a metabolic reset from being on a deficit for an extended period of time. You should experience a\n        recomposition effect over the coming weeks.\n      </BulletPoint>\n      <BulletPoint>\n        Moving into stronger intermediate territory, the programming will once again update setting you even more challenging\n        targets along the lines of Squatting 3 plates (140kg/315lbs), Overhead Pressing your bodyweight, Bench Pressin\n        (120kg/265lbs) and Deadlifting 4 plates (180kg/405lbs). To achieve these, programming may change to{' '}\n        <Text bold>Madcow&apos;s 5x5</Text> potentially followed by various 3-day <Text bold>Jim Wendler 5/3/1</Text> templates\n        with the accessory work being tailored your goals in terms of workout duration and weakness areas you want to work on.\n        Nutrition will depend on the new body fat %. You get to chose to get leaner with a moderate 400 calorie deficit or do a\n        lean bulk with a small surplus of 300 calories. The app will usually recommend a <Text bold>moderate cut</Text> if abs are\n        still not visible and one of your goals is leanness.\n      </BulletPoint>\n      <Paragraph>\n        In all phases, each workout would end with either a mile run or a random bodyweight endurance exercise (pushups, inverted\n        rows, jump squats or muscle ups) with a random aim (could be reps for time, reps within a certain time, pyramid reps or\n        reps every minute for 10 minutes). These will also have goals set and tracked such as mile run time, max push ups in a\n        set, etc.\n      </Paragraph>\n      <Paragraph>\n        <Center>\n          <HStack width={'100%'}>\n            <Image\n              width={'50%'}\n              height={185}\n              resizeMode={'contain'}\n              alt={'Welcome'}\n              source={require('../../assets/comics/comic2.png')}\n            />\n            <Image\n              width={'50%'}\n              height={185}\n              resizeMode={'contain'}\n              alt={'Welcome'}\n              source={require('../../assets/comics/comic3.jpeg')}\n            />\n          </HStack>\n        </Center>\n      </Paragraph>\n      <Heading size={'sm'}>{t('Example 2')}</Heading>\n      <Paragraph>\n        As an individual in decent shape, who has been lifting for some time and can already squat and bench their bodyweight for\n        reps and can do pull ups, looking to train 5 or 6 days a week focusing on aesthetics would go through a multi phase\n        programming cosisting of:\n      </Paragraph>\n      <BulletPoint>\n        An initial goal to Bench Press 2 plates (100kg/225lbs), Overhead Press 1 plate (60kg/135lbs) and Deadlift 3 plates\n        (140kg/315lbs). To achieve this you follow <Text bold>PHUL: Power Hypertrophy Upper Lower</Text> working out 4 days a\n        week.\n      </BulletPoint>\n\n      <RoutingButton to={Destination.GetStarted}>Get Started</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { Center, Container, Image, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nconst Headline = ({ text }: { text: string }) => (\n  <Text fontSize={'2xl'} marginBottom={2} fontWeight={500}>\n    {text}\n  </Text>\n);\n\nexport default function Welcome() {\n  const { t } = useTranslation();\n  return (\n    <DefaultLayout showLogo backgroundColor={'secondary.100'}>\n      <Center paddingTop={5}>\n        <Text textAlign={'center'} fontSize={'lg'} marginBottom={5}>\n          {t('The simple, enjoyable and sustainable approach to training.')}\n        </Text>\n        <Headline text={t('Get Stronger,')} />\n        <Headline text={t('Get Faster,')} />\n        <Headline text={t('Get Leaner.')} />\n      </Center>\n      <Center paddingY={5}>\n        <Image width={'100%'} height={320} resizeMode={'contain'} alt={'Welcome'} source={require(`./welcome2.png`)} />\n      </Center>\n      <Center marginY={5}>\n        <Text textAlign={'center'}>\n          <>\n            {t(\n              'This app matches your current level of strength and fitness to tried and tested training and nutrition regimes that are sustainable for your lifestyle and preferences. It sets you short term goals and as you progress the programming updates with new targets and appropriate routines. It keeps you progressing in the most optimal way possible and you will see your physique and performance transform to that of a vigilante...'\n            )}\n            <Container paddingLeft={1}>\n              <Link to={Destination.About} label={t('Tell me more')} />\n            </Container>\n          </>\n        </Text>\n      </Center>\n      <RoutingButton to={Destination.GetStarted}>{t('Get Started')}</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { WeekDay } from '../domain/constants';\n\n// Hard coded week day array as internally represented by javascript, sunday - saturday\nconst DAYS = [\n  WeekDay.Sunday,\n  WeekDay.Monday,\n  WeekDay.Tuesday,\n  WeekDay.Wednesday,\n  WeekDay.Thursday,\n  WeekDay.Friday,\n  WeekDay.Saturday,\n];\n\nexport const getDateOfWeekday = (dayName: WeekDay, date = new Date(), allowPast = true): Date => {\n  const now = date.getDay();\n  // The index for the day you want\n  const day = DAYS.findIndex((item: string) => dayName.toLowerCase() === item.toLowerCase());\n  // diff between desired day of week and now\n  let diff = day - now;\n  diff = diff < 0 && !allowPast ? diff + 7 : diff;\n  // Get the timestamp for the desired day, negative if it has already passed\n  const nextDayTimestamp = date.getTime() + 1000 * 60 * 60 * 24 * diff;\n\n  return new Date(nextDayTimestamp);\n};\n\nexport const addDays = (date: Date, days: number) => {\n  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n};\n\nexport const isDateWeekend = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 6 || dayOfWeek === 0; // 6 = Saturday, 0 = Sunday\n};\n\nexport const isDateConsecutiveDay = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 4 || dayOfWeek === 5; // 4 = Thursday, 5 = Friday\n};\n\nconst isDateInPast = (date: Date) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return date.getTime() < today.getTime();\n};\n\nexport const convertScheduleToWeekdays = (schedule: number[], weekStart: WeekDay): WeekDay[] => {\n  let map: { found: boolean; parts: WeekDay[][] } = { found: false, parts: [[], []] };\n  map = DAYS.reduce((acc, current) => {\n    if (current === weekStart) acc.found = true;\n    acc.found ? acc.parts[1].push(current) : acc.parts[0].push(current);\n    return acc;\n  }, map);\n\n  const week = [...map.parts[1], ...map.parts[0]];\n  return schedule.map((day) => week[day]);\n};\n\nexport const getNextScheduledWeekday = (weeklySchedule: WeekDay[], previousWorkoutDate: Date): WeekDay => {\n  const previousWorkoutDay = DAYS[previousWorkoutDate.getDay()];\n  const previousWorkoutDayIndex = weeklySchedule.findIndex(\n    (item: string) => previousWorkoutDay.toLowerCase() === item.toLowerCase()\n  );\n  const nextWorkoutIndex = previousWorkoutDayIndex + 1 > weeklySchedule.length - 1 ? 0 : previousWorkoutDayIndex + 1;\n  return weeklySchedule[nextWorkoutIndex];\n};\n\nexport const getNextWorkoutDay = (weeklySchedule: number[], weekStart: WeekDay, previousWorkoutDate?: Date): Date => {\n  if (!previousWorkoutDate) {\n    let proposedDate = getDateOfWeekday(weekStart);\n    while (isDateInPast(proposedDate)) {\n      proposedDate = getNextWorkoutDay(weeklySchedule, weekStart, proposedDate);\n    }\n    return proposedDate;\n  }\n\n  const schedule = convertScheduleToWeekdays(weeklySchedule, weekStart);\n  const scheduleDay = getNextScheduledWeekday(schedule, previousWorkoutDate);\n  return getDateOfWeekday(scheduleDay, previousWorkoutDate, false);\n};\n","import {\n  calculateBMI,\n  calculateBMR,\n  calculateMinimumProteinRequirement,\n  calculateTDEE,\n  cmToInches,\n  kgToLbs,\n} from '../../fitness-tools';\nimport { isDateWeekend } from '../../utils/calendar';\nimport { ActivityLevel, Gender, Goal, UnitsType } from '../constants';\n\nconst AGGRESSIVE_CUT_DEFICIT = -600;\nconst CUT_DEFICIT = -400;\nconst BULK_SURPLUS = 300;\nconst MAX_CALORIES = 2600;\nconst UNDERWEIGHT_BMI = 18.5;\n\nexport enum NutritionType {\n  AggressiveCut = 'Aggressive Cut',\n  Cut = 'Cut',\n  Bulk = 'Lean Bulk',\n  Maintain = 'Maintain',\n}\n\nexport interface NutritionProtocol {\n  type: NutritionType;\n  note?: string;\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  cycleNutrition: boolean;\n  higherCaloriesOnWeekends: boolean;\n  targetCalories: {\n    energyExpenditureModifier: number;\n    trainingDay: number;\n    restDay: number;\n    weekend: number;\n    average: number;\n  };\n  targetProtein: number;\n}\n\nconst getNutritionTypeRecommendation = ({\n  gender,\n  bodyFat,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset,\n  bmi,\n}: {\n  gender: Gender;\n  bodyFat: number;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset: boolean;\n  bmi: number;\n}): { type: NutritionType; reason?: string } => {\n  const largeDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to handle an aggressive deficit while still making gains in strength and muscle mass.';\n  const smallDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to make gains in strength and muscle while on a small deficit.';\n  const metabolicResetMessage =\n    'Given you have been dieting on low or unknown calories for some time without results, it is essential you eat at maintenance for 2-4 weeks.';\n  const lowBMIMessage = 'You are underweight for your height and should focus on adding muscle to your frame.';\n\n  if (bmi < UNDERWEIGHT_BMI && bodyFat > 10) {\n    return { type: NutritionType.Bulk, reason: lowBMIMessage };\n  }\n\n  if (needsMetabolicReset) {\n    return { type: NutritionType.Maintain, reason: metabolicResetMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 20) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 30) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 15) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 20) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (primaryGoal === Goal.Lean) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (secondaryGoal === Goal.Lean && bodyFat >= 15) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (\n    primaryGoal === Goal.Size ||\n    secondaryGoal === Goal.Size ||\n    primaryGoal === Goal.Strength ||\n    secondaryGoal === Goal.Strength\n  ) {\n    return { type: NutritionType.Bulk };\n  }\n\n  return { type: NutritionType.Maintain };\n};\n\nconst getEnergyExpenditureModifier = (goal: NutritionType, preferAggressiveCut: boolean) => {\n  switch (goal) {\n    case NutritionType.AggressiveCut:\n    case NutritionType.Cut:\n      if (preferAggressiveCut) {\n        return AGGRESSIVE_CUT_DEFICIT;\n      }\n      return CUT_DEFICIT;\n    case NutritionType.Bulk:\n      return BULK_SURPLUS;\n    case NutritionType.Maintain:\n    default:\n      return 0;\n  }\n};\n\nconst getTargetCalories = ({\n  tdee,\n  goal,\n  cycleNutrition,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends,\n  preferAggressiveCut,\n}: {\n  tdee: number;\n  goal: NutritionType;\n  cycleNutrition: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends: boolean;\n  preferAggressiveCut: boolean;\n}): { trainingDay: number; restDay: number; weekend: number; average: number; energyExpenditureModifier: number } => {\n  const isCut = goal === NutritionType.Cut || goal === NutritionType.AggressiveCut;\n\n  const modifier = getEnergyExpenditureModifier(goal, preferAggressiveCut);\n  const average = tdee + modifier;\n\n  let workoutdaysTarget = average;\n  let restdaysTarget = average;\n  let weekendTarget = average;\n\n  if (cycleNutrition) {\n    workoutdaysTarget = average + Math.abs(modifier);\n    restdaysTarget = average - Math.abs((modifier * numberOfWorkoutDays!) / (7 - numberOfWorkoutDays!));\n    weekendTarget = restdaysTarget;\n  }\n\n  if (higherCaloriesOnWeekends) {\n    weekendTarget = weekendTarget + 500;\n    workoutdaysTarget = workoutdaysTarget - 200;\n    restdaysTarget = restdaysTarget - 200;\n  }\n\n  if (isCut && workoutdaysTarget > MAX_CALORIES) {\n    workoutdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && restdaysTarget > MAX_CALORIES) {\n    restdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && weekendTarget > MAX_CALORIES) {\n    weekendTarget = MAX_CALORIES;\n  }\n\n  return {\n    trainingDay: workoutdaysTarget,\n    restDay: restdaysTarget,\n    weekend: weekendTarget,\n    average,\n    energyExpenditureModifier: modifier,\n  };\n};\n\nexport const getNutritionRecommendation = ({\n  gender,\n  weight,\n  height,\n  age,\n  unitsType,\n  bodyFat,\n  activityLevel,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset = false,\n  cycleNutrition = false,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends = false,\n  preferAggressiveCut = false,\n}: {\n  gender: Gender;\n  weight: number;\n  height: number;\n  age: number;\n  unitsType: UnitsType;\n  bodyFat: number;\n  activityLevel: ActivityLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset?: boolean;\n  cycleNutrition?: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends?: boolean;\n  preferAggressiveCut?: boolean;\n}): NutritionProtocol => {\n  const calcWeight = unitsType === UnitsType.Metric ? kgToLbs(weight) : weight;\n  const calcHeight = unitsType === UnitsType.Metric ? cmToInches(height) : height;\n\n  const bmi = calculateBMI(calcWeight, calcHeight);\n  const bmr = calculateBMR({ heightInInches: calcHeight, weightInLbs: calcWeight, gender, bodyFat, age });\n  const tdee = calculateTDEE(activityLevel, bmr);\n  const targetProtein = calculateMinimumProteinRequirement(calcWeight, bodyFat, 5);\n\n  const { type, reason } = getNutritionTypeRecommendation({\n    gender,\n    bodyFat,\n    primaryGoal,\n    secondaryGoal,\n    needsMetabolicReset,\n    bmi,\n  });\n\n  const targetCalories = getTargetCalories({\n    tdee,\n    goal: type,\n    cycleNutrition: cycleNutrition ?? false,\n    numberOfWorkoutDays,\n    higherCaloriesOnWeekends,\n    preferAggressiveCut,\n  });\n\n  return {\n    type,\n    note: reason,\n    bmi,\n    bmr,\n    tdee,\n    targetCalories,\n    targetProtein,\n    cycleNutrition,\n    higherCaloriesOnWeekends,\n  };\n};\n\nexport const getTodaysCalories = (recommendedNutrition: NutritionProtocol, isWorkoutDay: boolean) => {\n  const { targetCalories } = recommendedNutrition;\n  const isWeekend = isDateWeekend();\n  return (\n    (isWeekend ? targetCalories.weekend : isWorkoutDay ? targetCalories.trainingDay : targetCalories.restDay) ??\n    targetCalories.average\n  );\n};\n","import { ExperienceLevel, Gender } from '../constants';\n\nexport interface SpeedMetrics {\n  mileRun: number;\n  fiveKmRun: number;\n}\n\nconst speedStandards: {\n  [key in Gender]: {\n    [key in ExperienceLevel]: SpeedMetrics;\n  };\n} = {\n  [Gender.Male]: {\n    [ExperienceLevel.Beginner]: { mileRun: 9.5, fiveKmRun: 31.5 },\n    [ExperienceLevel.Novice]: { mileRun: 7.75, fiveKmRun: 26.33 },\n    [ExperienceLevel.Intermediate]: { mileRun: 6.5, fiveKmRun: 22.5 },\n    [ExperienceLevel.Advanced]: { mileRun: 5.75, fiveKmRun: 19.75 },\n    [ExperienceLevel.Vigilante]: { mileRun: 5.15, fiveKmRun: 17.75 },\n  },\n  [Gender.Female]: {\n    [ExperienceLevel.Beginner]: { mileRun: 10.75, fiveKmRun: 35.5 },\n    [ExperienceLevel.Novice]: { mileRun: 9, fiveKmRun: 30 },\n    [ExperienceLevel.Intermediate]: { mileRun: 7.75, fiveKmRun: 26.15 },\n    [ExperienceLevel.Advanced]: { mileRun: 6.8, fiveKmRun: 23 },\n    [ExperienceLevel.Vigilante]: { mileRun: 6.15, fiveKmRun: 20.75 },\n  },\n};\n\nexport const getSpeedStandards = (gender: Gender): { [key in ExperienceLevel]?: SpeedMetrics } => {\n  return speedStandards[gender];\n};\n\nexport const getSpeedLevel = (gender: Gender, mileRunTime: number, fiveKmRun: number) => {\n  const runStandards = getSpeedStandards(gender);\n  return Object.keys(runStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n    const levelStandards = runStandards[<ExperienceLevel>current]!;\n\n    const meetsMileRunStandard = mileRunTime <= levelStandards.mileRun;\n    const meetsFiveKmStandard = fiveKmRun <= levelStandards.fiveKmRun;\n\n    if (meetsMileRunStandard && meetsFiveKmStandard) {\n      return <ExperienceLevel>current;\n    }\n\n    return acc;\n  }, ExperienceLevel.Beginner);\n};\n","import { calculateRepMaxes, lbsToKg, UnitsType } from '../../fitness-tools';\nimport { ExperienceLevel, Gender } from '../constants';\nimport { Exercise } from '../exercises';\nimport { Lifts } from '../trainee';\n\nexport const standardExercises = [\n  Exercise.Bench,\n  Exercise.Squat,\n  Exercise.Press,\n  Exercise.Deadlift,\n  Exercise.Row,\n  Exercise.InclineBench,\n  Exercise.Curl,\n];\n\nexport interface LiftMetrics {\n  oneRepMax?: number;\n  threeRepMax?: number;\n  fiveRepMax?: number;\n  eightRepMax?: number;\n  tenRepMax?: number;\n  twelveRepMax?: number;\n  fithteenRepMax?: number;\n  twentyRepMax?: number;\n  ratio?: number;\n  reps?: number;\n}\n\nexport type StrengthMetrics = {\n  [key in Exercise]?: LiftMetrics;\n};\n\nconst strengthStandards: {\n  [key in Gender]: {\n    [key in Exercise]?: {\n      [key in ExperienceLevel]: LiftMetrics;\n    };\n  };\n} = {\n  [Gender.Male]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Novice]: { ratio: 1.25, oneRepMax: 93 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.5, oneRepMax: 130 },\n      [ExperienceLevel.Advanced]: { ratio: 2.25, oneRepMax: 173 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.75, oneRepMax: 219 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 1, oneRepMax: 78 },\n      [ExperienceLevel.Novice]: { ratio: 1.5, oneRepMax: 112 },\n      [ExperienceLevel.Intermediate]: { ratio: 2, oneRepMax: 152 },\n      [ExperienceLevel.Advanced]: { ratio: 2.5, oneRepMax: 200 },\n      [ExperienceLevel.Vigilante]: { ratio: 3, oneRepMax: 250 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 47 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 70 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 98 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 132 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 169 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 44 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 89 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 118 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 149 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.4, oneRepMax: 31 },\n      [ExperienceLevel.Novice]: { ratio: 0.55, oneRepMax: 46 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.8, oneRepMax: 64 },\n      [ExperienceLevel.Advanced]: { ratio: 1.05, oneRepMax: 86 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.35, oneRepMax: 109 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 41 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 85 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 115 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 147 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 30 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.6, oneRepMax: 37 },\n      [ExperienceLevel.Advanced]: { ratio: 0.85, oneRepMax: 68 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.15, oneRepMax: 91 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -13 },\n      [ExperienceLevel.Novice]: { reps: 5, oneRepMax: +8 },\n      [ExperienceLevel.Intermediate]: { reps: 15, oneRepMax: +34 },\n      [ExperienceLevel.Advanced]: { reps: 25, oneRepMax: +63 },\n      [ExperienceLevel.Vigilante]: { reps: 37, oneRepMax: +93 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -8 },\n      [ExperienceLevel.Novice]: { reps: 8, oneRepMax: +18 },\n      [ExperienceLevel.Intermediate]: { reps: 20, oneRepMax: +50 },\n      [ExperienceLevel.Advanced]: { reps: 34, oneRepMax: +86 },\n      [ExperienceLevel.Vigilante]: { reps: 49, oneRepMax: +125 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 18 },\n      [ExperienceLevel.Intermediate]: { reps: 41 },\n      [ExperienceLevel.Advanced]: { reps: 68 },\n      [ExperienceLevel.Vigilante]: { reps: 99 },\n    },\n  },\n  [Gender.Female]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 30 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 73 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 103 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 136 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 38 },\n      [ExperienceLevel.Novice]: { ratio: 1, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 87 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 120 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.5, oneRepMax: 157 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.5, oneRepMax: 31 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.75, oneRepMax: 51 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 74 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.5, oneRepMax: 101 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 13 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 44 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 67 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.4, oneRepMax: 93 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Novice]: { ratio: 0.35, oneRepMax: 23 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.55, oneRepMax: 34 },\n      [ExperienceLevel.Advanced]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Vigilante]: { ratio: 1, oneRepMax: 64 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 15 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 41 },\n      [ExperienceLevel.Advanced]: { ratio: 0.9, oneRepMax: 59 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.2, oneRepMax: 79 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.1, oneRepMax: 6 },\n      [ExperienceLevel.Novice]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.4, oneRepMax: 25 },\n      [ExperienceLevel.Advanced]: { ratio: 0.6, oneRepMax: 39 },\n      [ExperienceLevel.Vigilante]: { ratio: 0.85, oneRepMax: 55 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -22 },\n      [ExperienceLevel.Novice]: { reps: 3, oneRepMax: -8 },\n      [ExperienceLevel.Intermediate]: { reps: 6, oneRepMax: 10 },\n      [ExperienceLevel.Advanced]: { reps: 15, oneRepMax: 30 },\n      [ExperienceLevel.Vigilante]: { reps: 26, oneRepMax: 51 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -20 },\n      [ExperienceLevel.Novice]: { reps: 1, oneRepMax: -5 },\n      [ExperienceLevel.Intermediate]: { reps: 10, oneRepMax: +19 },\n      [ExperienceLevel.Advanced]: { reps: 22, oneRepMax: +45 },\n      [ExperienceLevel.Vigilante]: { reps: 35, oneRepMax: +72 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 5 },\n      [ExperienceLevel.Intermediate]: { reps: 19 },\n      [ExperienceLevel.Advanced]: { reps: 37 },\n      [ExperienceLevel.Vigilante]: { reps: 56 },\n    },\n  },\n};\n\nexport const getLiftStandards = (gender: Gender, exercise: Exercise): { [key in ExperienceLevel]?: LiftMetrics } => {\n  const genderStandards = strengthStandards[gender];\n  const liftStandards = genderStandards[exercise]!;\n  return liftStandards;\n};\n\nexport const getLiftLevel = (\n  gender: Gender,\n  lift: Exercise,\n  { oneRepMax, ratio, reps }: LiftMetrics,\n  unitsType = UnitsType.Metric\n): ExperienceLevel => {\n  const liftStandards = getLiftStandards(gender, lift);\n  return (\n    liftStandards &&\n    Object.keys(liftStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n      const levelStandards = liftStandards[<ExperienceLevel>current]!;\n\n      const oneRepMaxForComparison = oneRepMax && unitsType === UnitsType.Metric ? oneRepMax : lbsToKg(oneRepMax!);\n      const meetsOneRepMaxBasedStandard = levelStandards.oneRepMax && oneRepMaxForComparison >= levelStandards.oneRepMax;\n      const meetsRatioBasedStandard = ratio && levelStandards.ratio && ratio >= levelStandards.ratio;\n\n      const meetsWeightBasedStandard = meetsRatioBasedStandard || meetsOneRepMaxBasedStandard;\n      const meetsRepBasedStandard = reps && levelStandards.reps && reps >= levelStandards.reps;\n\n      if (meetsWeightBasedStandard || meetsRepBasedStandard) {\n        return <ExperienceLevel>current;\n      }\n\n      return acc;\n    }, ExperienceLevel.Beginner)\n  );\n};\n\nexport const getStrengthLevel = (gender: Gender, everLifted: boolean, strengthMetrics: StrengthMetrics): ExperienceLevel => {\n  if (!everLifted) {\n    return ExperienceLevel.Beginner;\n  }\n\n  const level = standardExercises.reduce<ExperienceLevel | undefined>((accLevel, lift) => {\n    const liftMetrics = strengthMetrics[lift as keyof StrengthMetrics];\n    if (!liftMetrics) return accLevel;\n\n    const liftLevel = getLiftLevel(Gender[gender], lift as Exercise, {\n      oneRepMax: liftMetrics?.oneRepMax,\n      ratio: liftMetrics?.ratio,\n      reps: liftMetrics?.reps,\n    });\n    const isLowerStandard =\n      accLevel && Object.values(ExperienceLevel).indexOf(liftLevel) < Object.values(ExperienceLevel).indexOf(accLevel);\n\n    if (liftLevel && (!accLevel || isLowerStandard)) {\n      return liftLevel;\n    }\n\n    return accLevel;\n  }, undefined);\n\n  return level ?? ExperienceLevel.Beginner;\n};\n\nexport const calculateStrengthStandards = (weight: number, lifts: Lifts): StrengthMetrics =>\n  standardExercises.reduce((acc, key: string) => {\n    const lift = lifts?.[key as keyof Lifts];\n    if (!lift) return acc;\n\n    const repMaxes = calculateRepMaxes(lift.weight, lift.reps);\n    return {\n      ...acc,\n      [key]: {\n        ...repMaxes,\n        ratio: Math.round((repMaxes.oneRepMax! / weight) * 100) / 100,\n      },\n    };\n  }, {});\n","import { ActivityLevel, DietType, ExperienceLevel, Gender, Goal, UnitsType, WeekDay } from '../constants';\nimport { Exercise } from '../exercises';\nimport { getNutritionRecommendation, NutritionType } from '../nutrition';\nimport { getProgramRecommendations } from '../programs';\nimport { calculateStrengthStandards, getSpeedLevel, getStrengthLevel, SpeedMetrics, StrengthMetrics } from '../standards';\nimport { getNextLiftTargets, getNextSpeedTargets } from './targets';\n\nexport interface Trainee {\n  preferredUnitsType: keyof typeof UnitsType;\n\n  gender: keyof typeof Gender;\n  age: number;\n  weight: number;\n  height: number;\n  waist: number;\n  bodyFat: number;\n\n  bestMileRunTime: number;\n  bestfiveKmRunTime: number;\n  maxPushUps: number;\n  maxPullUps: number;\n  hasLifted: boolean;\n  currentLifts: Lifts;\n\n  activityLevel: keyof typeof ActivityLevel;\n  primaryGoal: keyof typeof Goal;\n  secondaryGoal: keyof typeof Goal;\n\n  preferredDietType: keyof typeof DietType;\n  preferredWeekStart: keyof typeof WeekDay;\n  preferredNumberOfWorkoutsPerWeek: number;\n  preferredWorkoutDuration: number;\n  preferredWorkoutDays: Array<keyof typeof WeekDay>;\n  prefersProgramHoping: boolean;\n  prefersMinimalLegs: boolean;\n\n  returningFromBreak: boolean;\n  needsMetabolicReset: boolean;\n  prefersCycledNutrition: boolean;\n  prefersHigherCaloriesOnWeekends: boolean;\n  prefersAggressiveCut: boolean;\n\n  preferredBarbellIncrement: number;\n  preferredBarbellDecrement: number;\n  preferredDumbbellIncrement: number;\n  preferredDumbbellDecrement: number;\n}\n\nexport type LiftAttempt = { weight: number; reps: number; targetReps?: number; fails?: number };\n\nexport type Lifts = {\n  [key in Exercise]?: LiftAttempt;\n};\n\nexport interface TraineeMetrics {\n  strengthMetrics: StrengthMetrics;\n  strengthLevel: ExperienceLevel;\n  speedMetrics: SpeedMetrics;\n  speedLevel: ExperienceLevel;\n}\n\nexport const getTraineeMetrics = (trainee: Trainee): TraineeMetrics => {\n  const { gender, weight, currentLifts, hasLifted, bestMileRunTime, bestfiveKmRunTime } = trainee;\n\n  const strengthMetrics = calculateStrengthStandards(weight, currentLifts);\n  const strengthLevel = getStrengthLevel(Gender[gender], hasLifted, strengthMetrics);\n\n  const speedMetrics: SpeedMetrics = { mileRun: bestMileRunTime, fiveKmRun: bestfiveKmRunTime };\n  const speedLevel = getSpeedLevel(Gender[gender], bestMileRunTime, bestfiveKmRunTime);\n\n  return { strengthMetrics, strengthLevel, speedLevel, speedMetrics };\n};\n\nexport const getTraineeRecommendations = (trainee: Trainee, traineeMetrics: TraineeMetrics) => {\n  const {\n    gender,\n    primaryGoal,\n    secondaryGoal,\n    preferredNumberOfWorkoutsPerWeek,\n    preferredWorkoutDuration,\n    bodyFat,\n    preferredUnitsType,\n    weight,\n    height,\n    age,\n    activityLevel,\n    needsMetabolicReset,\n    prefersHigherCaloriesOnWeekends,\n    prefersCycledNutrition,\n    prefersAggressiveCut,\n  } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n\n  const recommendedPrograms = getProgramRecommendations({\n    gender: Gender[gender],\n    strengthLevel: strengthLevel!,\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    maxDaysPerWeek: preferredNumberOfWorkoutsPerWeek,\n    maxWorkoutDuration: preferredWorkoutDuration,\n    speedLevel: speedLevel!,\n  });\n\n  const recommendedNutrition = getNutritionRecommendation({\n    gender: Gender[gender],\n    weight: weight,\n    height: height,\n    age: age,\n    unitsType: UnitsType[preferredUnitsType],\n    bodyFat: bodyFat,\n    activityLevel: ActivityLevel[activityLevel],\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    needsMetabolicReset: needsMetabolicReset,\n    higherCaloriesOnWeekends: prefersHigherCaloriesOnWeekends,\n    cycleNutrition: prefersCycledNutrition,\n    numberOfWorkoutDays: preferredNumberOfWorkoutsPerWeek, // @TODO should be the selected program\n    preferAggressiveCut: prefersAggressiveCut,\n  });\n\n  const speedTargets = speedMetrics && getNextSpeedTargets(Gender[gender], speedMetrics);\n\n  const liftTargets = getNextLiftTargets(Gender[gender], strengthMetrics, weight);\n\n  const bodyFatTarget =\n    bodyFat > 10 && recommendedNutrition && [NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type)\n      ? bodyFat - 5\n      : undefined;\n\n  return { bodyFatTarget, liftTargets, speedTargets, recommendedNutrition, recommendedPrograms };\n};\n","import { calculateFiveRepMax } from '../../fitness-tools';\nimport { ExperienceLevel, Gender } from '../constants';\nimport { Exercise } from '../exercises';\nimport { getLiftStandards, getSpeedStandards, LiftMetrics, SpeedMetrics, StrengthMetrics } from '../standards';\n\nexport const getNextSpeedTargets = (gender: Gender, speedMetrics: SpeedMetrics): SpeedMetrics => {\n  const standards = getSpeedStandards(gender);\n  const mileRun = speedMetrics.mileRun ? speedMetrics.mileRun - 0.5 : standards[ExperienceLevel.Beginner]!.mileRun;\n  const fiveKmRun = speedMetrics.fiveKmRun ? speedMetrics.fiveKmRun - 1.5 : standards[ExperienceLevel.Beginner]!.fiveKmRun;\n\n  return { mileRun, fiveKmRun };\n};\n\nexport const getNextLiftTargets = (gender: Gender, lifterStandards: StrengthMetrics, weight: number): StrengthMetrics => {\n  const getLiftTarget = (exercise: Exercise) => {\n    const standards = getLiftStandards(gender, exercise);\n    const currentLift = lifterStandards[exercise];\n\n    if (!currentLift) {\n      const levelStandard = standards[ExperienceLevel.Beginner]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (levelRatio < levelOneRepMax) {\n        return { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n      } else {\n        return { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n      }\n    }\n\n    let target: LiftMetrics = {\n      oneRepMax: currentLift.oneRepMax! + 10,\n      fiveRepMax: calculateFiveRepMax(currentLift.oneRepMax! + 10),\n    };\n\n    const levels = Object.keys(standards);\n    for (const level of levels) {\n      const levelStandard = standards[level as keyof typeof standards]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (\n        levelOneRepMax < levelRatio &&\n        levelOneRepMax > currentLift.oneRepMax! &&\n        levelOneRepMax - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n        break;\n      } else if (\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n        break;\n      }\n    }\n\n    return target;\n  };\n\n  return {\n    [Exercise.Bench]: getLiftTarget(Exercise.Bench),\n    [Exercise.Squat]: getLiftTarget(Exercise.Squat),\n    [Exercise.Deadlift]: getLiftTarget(Exercise.Deadlift),\n    [Exercise.Press]: getLiftTarget(Exercise.Press),\n    [Exercise.Row]: getLiftTarget(Exercise.Row),\n  };\n};\n","import dayjs from 'dayjs';\n\nimport { getDateOfWeekday, getNextWorkoutDay } from '../../utils/calendar';\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { Program, Workout } from '../programs/interfaces';\n\nexport interface ScheduledWorkout extends Workout {\n  id: number;\n  date: Date;\n  startTime?: number;\n  endTime?: number;\n  status?: 'pending' | 'done' | 'in progress';\n}\n\nexport type ScheduleAction =\n  | 'create'\n  | 'start_workout'\n  | 'end_workout'\n  | 'change_set_weight'\n  | 'change_set_reps'\n  | 'complete_set';\n\ntype CreateSchedulePayload = { program: Program; experienceLevel: ExperienceLevel; weekStart: WeekDay };\ntype UpdateScheduleWorkoutPayload = { id: number; exerciseId: number; setId: number; value: number };\ntype CompleteSetPayload = UpdateScheduleWorkoutPayload & { isWarmup: boolean; recommendedWeight: number };\n\nexport const scheduleReducer = (\n  schedule: ScheduledWorkout[],\n  action: {\n    type: ScheduleAction;\n    payload: CreateSchedulePayload | UpdateScheduleWorkoutPayload | CompleteSetPayload;\n  }\n) => {\n  const { type, payload } = action;\n\n  if (type === 'create') {\n    const { program, experienceLevel, weekStart } = <CreateSchedulePayload>payload;\n    return createSchedule(program, experienceLevel, weekStart);\n  }\n\n  const newSchedule = [...schedule];\n  const { id, exerciseId, setId, value } = <UpdateScheduleWorkoutPayload>payload;\n\n  switch (type) {\n    case 'start_workout':\n      newSchedule[id].status = 'in progress';\n      newSchedule[id].startTime = Date.now();\n      return newSchedule;\n    case 'end_workout':\n      //markAllSetsAsComplete(schedule, id);\n      newSchedule[id].status = 'done';\n      newSchedule[id].endTime = Date.now();\n      return newSchedule;\n    case 'change_set_weight':\n      newSchedule[id].routine[exerciseId].sets[setId].weight = value;\n      return newSchedule;\n    case 'change_set_reps':\n      newSchedule[id].routine[exerciseId].sets[setId].reps = value;\n      return newSchedule;\n    case 'complete_set':\n      const { isWarmup, recommendedWeight } = <CompleteSetPayload>payload;\n      updateWorkoutWithCompletedSet(newSchedule, id, exerciseId, setId, isWarmup, recommendedWeight);\n      return newSchedule;\n    default:\n      throw new Error();\n  }\n};\n\nexport const createSchedule = (program: Program, experienceLevel: ExperienceLevel, weekStart: WeekDay = WeekDay.Monday) => {\n  // @TODO configurable per program, A/B splits should can be false\n  const firstWorkoutMustBeOnWeekStart = false;\n  const workouts = program.workouts(experienceLevel);\n  let totalWorkouts: number = program.daysPerWeek * program.duration;\n  let workoutWeeklyIndex = 0;\n  let date: Date | undefined = firstWorkoutMustBeOnWeekStart\n    ? getDateOfWeekday(weekStart, new Date(), false)\n    : getNextWorkoutDay(program.weeklySchedule, weekStart);\n\n  const schedule: ScheduledWorkout[] = [];\n  while (totalWorkouts > 0) {\n    schedule.push({\n      id: schedule.length,\n      date,\n      status: 'pending',\n      ...workouts[workoutWeeklyIndex],\n    });\n    date = getNextWorkoutDay(program.weeklySchedule, weekStart, date);\n    totalWorkouts--;\n    workoutWeeklyIndex++;\n    if (workoutWeeklyIndex === workouts.length) {\n      workoutWeeklyIndex = 0;\n    }\n  }\n\n  return schedule;\n};\n\nexport const getTodaysWorkout = (schedule: ScheduledWorkout[]): ScheduledWorkout | undefined => {\n  return schedule.find((item) => new Date(item.date).setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));\n};\n\nexport const getScheduledForThisWeek = (schedule: ScheduledWorkout[]): ScheduledWorkout[] => {\n  return schedule.filter((entry) => dayjs().isSame(entry.date, 'week')) || [];\n};\n\nexport const markAllSetsAsComplete = (schedule: ScheduledWorkout[], workoutId: number): void => {\n  schedule[workoutId].routine.forEach((exercise, exerciseId) => {\n    exercise.warmup?.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, true));\n    exercise.sets?.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, false));\n  });\n};\n\nexport const updateWorkoutWithCompletedSet = (\n  schedule: ScheduledWorkout[],\n  workoutId: number,\n  exerciseId: number,\n  setId: number,\n  isWarmup: boolean,\n  recommendedWeight?: number\n): void => {\n  if (isWarmup) {\n    const warmup = schedule[workoutId].routine[exerciseId].warmup![setId];\n    if (!warmup.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].warmup![setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].warmup![setId].status = 'done';\n  } else {\n    const set = schedule[workoutId].routine[exerciseId].sets[setId];\n    if (!set.reps) {\n      schedule[workoutId].routine[exerciseId].sets[setId].reps = set.maxReps ?? set.targetReps;\n    }\n    if (!set.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].sets[setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].sets[setId].status = 'done';\n  }\n};\n","import { useStoredReducer, useStoredState } from 'react-native-use-stored-state';\n\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { getProgram } from '../programs';\nimport { getTodaysWorkout, ScheduleAction, ScheduledWorkout, scheduleReducer } from './schedule';\nimport { Trainee } from './trainee';\n\nexport type UpdateTraineeFn = <K extends keyof Trainee>(field: K, value: Trainee[K]) => void;\n\nexport type TraineeReducerAction = 'set_data';\n\nexport const traineeReducer = (\n  formData: Trainee,\n  action: { type: TraineeReducerAction; payload: { field: keyof Trainee; value: string | number | boolean } }\n) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'set_data':\n      const { field, value } = payload;\n      return { ...formData, [field]: value };\n    default:\n      throw new Error();\n  }\n};\n\nconst defaultTrainee = <Trainee>{\n  preferredUnitsType: 'Metric',\n  gender: 'Male',\n  activityLevel: 'LightlyActive',\n  bodyFat: 20,\n  primaryGoal: 'Lean',\n  secondaryGoal: 'Strength',\n  preferredDietType: 'Balanced',\n  preferredWeekStart: 'Monday',\n  preferredNumberOfWorkoutsPerWeek: 3,\n  preferredWorkoutDuration: 60,\n  preferredWorkoutDays: ['Monday', 'Wednesday', 'Friday'],\n  prefersProgramHoping: false,\n  prefersMinimalLegs: false,\n  prefersCycledNutrition: false,\n  prefersHigherCaloriesOnWeekends: false,\n  prefersAggressiveCut: false,\n  preferredBarbellIncrement: 2.5,\n  preferredBarbellDecrement: 10,\n  preferredDumbbellIncrement: 2,\n  preferredDumbbellDecrement: 15,\n};\n\nexport const useTrainee = () => {\n  const [trainee, dispatch, traineeLoaded, resetTrainee] = useStoredReducer<Trainee, TraineeReducerAction>(\n    'TRAINEE_1.0.1',\n    traineeReducer,\n    defaultTrainee\n  );\n\n  const updateTrainee: UpdateTraineeFn = (field, value) => {\n    dispatch({ type: 'set_data', payload: { field, value } });\n  };\n\n  return { trainee, updateTrainee, traineeLoaded, resetTrainee };\n};\n\nexport const useActiveProgram = () => {\n  const [activeProgram, setActiveProgram, activeProgramLoaded, unsetIsActive] = useStoredState<string>('ACTIVE_PROGRAM_1.0.0');\n  const [schedule, updateSchedule, scheduleLoaded, unsetSchedule] = useStoredReducer<ScheduledWorkout[], ScheduleAction>(\n    'ACTIVE_SCHEDULE_1.0.0',\n    scheduleReducer\n  );\n\n  const program = activeProgram ? getProgram(activeProgram) : undefined;\n  const todaysWorkout = schedule ? getTodaysWorkout(schedule) : undefined;\n\n  const initialiseProgram = (id: string, experienceLevel: ExperienceLevel, weekStart: WeekDay) => {\n    updateSchedule({ type: 'create', payload: { program: getProgram(id), experienceLevel, weekStart } });\n    setActiveProgram(id);\n  };\n\n  const resetProgram = () => {\n    unsetIsActive();\n    unsetSchedule();\n  };\n\n  return {\n    activeProgramLoaded: scheduleLoaded && activeProgramLoaded,\n    active: !!program,\n    schedule,\n    updateSchedule,\n    program,\n    initialiseProgram,\n    todaysWorkout,\n    resetProgram,\n  };\n};\n","import { useStoredState } from 'react-native-use-stored-state';\n\nimport { ScheduledWorkout } from './schedule';\n\nexport interface LoggedWorkout extends ScheduledWorkout {\n  datePerformed: Date;\n  program: string;\n}\n\nexport const useLog = () => {\n  const [workoutLog = [], setWorkoutLog, workoutLogLoaded, removeWorkoutLog] = useStoredState<LoggedWorkout[]>('LOG_WORKOUTS');\n\n  const logWorkout = (workout: ScheduledWorkout, program: string) => {\n    setWorkoutLog([\n      { ...workout, datePerformed: new Date(), program },\n      // spread at the end to force reverse order\n      ...(workoutLog ?? []),\n    ]);\n  };\n\n  const resetLog = () => {\n    removeWorkoutLog();\n  };\n\n  return {\n    logLoaded: workoutLogLoaded,\n    workoutLog,\n    logWorkout,\n    resetLog,\n  };\n};\n","import { Box, HStack, Heading, Text, useTheme } from 'native-base';\nimport { ReactNode } from 'react';\n\nexport const DashboardHeading = ({ heading }: { heading: string }) => (\n  <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n    {heading}\n  </Heading>\n);\n\nexport const DashboardCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  const { colors } = useTheme();\n  return (\n    <Box marginY={2}>\n      {heading && <DashboardHeading heading={heading} />}\n      <Box padding={3} rounded={'lg'} backgroundColor={colors.white}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport const DashboardLabel = ({ children }: { children: React.ReactNode }) => <Text bold>{children}</Text>;\n\nexport const DashboardDetail = ({ label, value }: { label: string; value: string | number | ReactNode }) => (\n  <HStack paddingY={1} justifyContent={'space-between'} alignItems={'center'}>\n    <DashboardLabel>{label}:</DashboardLabel>\n    <Text>{value}</Text>\n  </HStack>\n);\n","import { Checkbox, HStack, Icon, Text } from 'native-base';\nimport RNPickerSelect from 'react-native-picker-select';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Platform } from 'react-native';\n\ntype StringEnum = { [key: string]: string };\n\nexport const Select = ({\n  onValueChange,\n  selectedValue,\n  items,\n  width = 200,\n  textAlign = 'right',\n  border = false,\n}: {\n  onValueChange: (value: string) => void;\n  selectedValue: string | number | symbol;\n  items: { label: string; value: string | number }[];\n  width?: number | string;\n  textAlign?: 'right' | 'left' | 'center';\n  border?: boolean;\n}) => {\n  const baseStyles = {\n    width,\n    textAlign,\n    fontSize: 11,\n    padding: 6,\n    paddingRight: 20,\n    borderWidth: border ? 1 : 0,\n    borderColor: 'lightgray',\n    borderRadius: 3,\n  };\n  return (\n    <RNPickerSelect\n      style={{\n        inputWeb: { ...baseStyles, paddingRight: 10 },\n        inputIOS: { ...baseStyles },\n        inputAndroid: { ...baseStyles },\n        iconContainer: {\n          paddingTop: 4,\n          paddingRight: 2,\n        },\n      }}\n      fixAndroidTouchableBug={true}\n      onValueChange={(value) => onValueChange(value)}\n      value={selectedValue || ''}\n      items={items}\n      // @ts-expect-error ignore\n      Icon={() => (Platform.OS !== 'web' ? <Icon as={MaterialCommunityIcons} name={'chevron-down'} size={'sm'} /> : <></>)}\n    />\n  );\n};\n\nexport const EnumSelect = <E extends StringEnum>({\n  Enum,\n  selectedValue,\n  onValueChange,\n}: {\n  Enum: E;\n  selectedValue: keyof E | undefined;\n  onValueChange: (newValue: keyof E) => void;\n}) => {\n  const items = Object.keys(Enum).map((key) => ({ label: Enum[key], value: key }));\n  return (\n    <Select\n      onValueChange={(value: string) => onValueChange(value as keyof E)}\n      selectedValue={selectedValue ?? ''}\n      items={items}\n    />\n  );\n};\n\nexport const EnumMultiSelect = <E extends StringEnum>({\n  Enum,\n  selectedValues,\n  onChange,\n  accessibilityLabel,\n}: {\n  Enum: E;\n  selectedValues: Array<keyof E>;\n  onChange: (newValues: Array<keyof E>) => void;\n  accessibilityLabel: string;\n}) => (\n  <Checkbox.Group\n    defaultValue={(selectedValues ?? []) as string[]}\n    accessibilityLabel={accessibilityLabel ?? ''}\n    onChange={(values) => {\n      onChange((values || []) as Array<keyof E>);\n    }}\n  >\n    <HStack space={2} flexWrap={'wrap'}>\n      {Object.keys(Enum).map((key: string) => (\n        <Checkbox key={key} value={key} my=\"1\" size={'sm'}>\n          <Text fontSize={'xs'}>{Enum[key]}</Text>\n        </Checkbox>\n      ))}\n    </HStack>\n  </Checkbox.Group>\n);\n","import { Box, HStack, VStack } from 'native-base';\n\nimport { DashboardCard } from '../Dashboards';\n\nexport * from './Select';\n\nexport const FormCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  return <DashboardCard heading={heading}>{children}</DashboardCard>;\n};\n\nexport const InlineField = ({ children, allowWrap = false }: { children: React.ReactNode; allowWrap?: boolean }) => (\n  <HStack paddingBottom={1} justifyContent={'space-between'} alignItems={'center'} flexWrap={allowWrap ? 'wrap' : 'nowrap'}>\n    {children}\n  </HStack>\n);\n\nexport const StackedField = ({ children }: { children: React.ReactNode }) => <VStack paddingBottom={1}>{children}</VStack>;\n\nexport const BottomButtonsBox = ({ children }: { children: React.ReactNode }) => (\n  <Box marginTop={'auto'} marginBottom={2}>\n    {children}\n  </Box>\n);\n","import { HStack, Image, Radio, VStack } from 'native-base';\nimport { ImageSourcePropType } from 'react-native';\nimport { Gender } from '../../../domain/constants';\n\nconst BodyFatImageMap: {\n  [key in Gender]: { [key: number]: ImageSourcePropType };\n} = {\n  [Gender.Male]: {\n    10: require('./Male10.png'),\n    15: require('./Male15.png'),\n    20: require('./Male20.png'),\n    25: require('./Male25.png'),\n    30: require('./Male30.png'),\n  },\n  [Gender.Female]: {\n    10: require('./Female10.png'),\n    15: require('./Female15.png'),\n    20: require('./Female20.png'),\n    25: require('./Female25.png'),\n    30: require('./Female30.png'),\n  },\n};\n\nexport const BodyFatSelector = ({\n  gender,\n  bodyFat,\n  setBodyFat,\n}: {\n  gender: keyof typeof Gender;\n  bodyFat: number;\n  setBodyFat: (newvalue: number) => void;\n}) => {\n  return (\n    <Radio.Group\n      name=\"bodyFat\"\n      accessibilityLabel=\"select your approximate bodyfat percentage\"\n      value={bodyFat?.toString()}\n      onChange={(value) => {\n        setBodyFat(Number(value));\n      }}\n    >\n      {gender && (\n        <HStack alignItems={'center'} space={1}>\n          {['10', '15', '20', '25', '30'].map((percent) => (\n            <VStack key={`${gender}-${percent}`}>\n              <Image\n                size={'sm'}\n                resizeMode={'contain'}\n                alt={'Welcome'}\n                source={BodyFatImageMap[gender as keyof typeof Gender][Number(percent)]}\n              />\n              <Radio value={percent} my={1} size={'sm'}>\n                {`${percent}%`}\n              </Radio>\n            </VStack>\n          ))}\n        </HStack>\n      )}\n    </Radio.Group>\n  );\n};\n","import { HStack, Input, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\n\nimport { UnitsType, feetAndInchesToInches, inchestToFeetAndInches } from '../../../fitness-tools';\n\nexport const HeightInput = ({\n  height,\n  unitsType,\n  setHeight,\n}: {\n  height: number;\n  unitsType: UnitsType;\n  setHeight: (newvalue: number) => void;\n}) => {\n  return (\n    <>\n      {unitsType === UnitsType.Imperial ? (\n        <ImperialHeightInput height={height} setHeight={setHeight} />\n      ) : (\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={height?.toString() || ''}\n          onChangeText={(value: string) => setHeight(Number(value))}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ImperialHeightInput = ({ height, setHeight }: { height: number; setHeight: (newvalue: number) => void }) => {\n  const [feet, setFeet] = useState<number>();\n  const [inches, setInches] = useState<number>();\n\n  const onSetHeight = () => {\n    if (feet && inches) {\n      const heightInInches = feetAndInchesToInches(feet, inches);\n      setHeight(heightInInches);\n    }\n  };\n\n  useEffect(() => {\n    if (height) {\n      const [feet, inches] = inchestToFeetAndInches(height);\n      setFeet(feet);\n      setInches(inches);\n    }\n  }, []);\n\n  useEffect(() => {\n    onSetHeight();\n  }, [feet, inches]);\n\n  return (\n    <HStack alignItems={'center'}>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={feet?.toString() || ''}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setFeet(Number(value));\n        }}\n      />\n      <Text>{'ft'}</Text>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={inches?.toString() || ''}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setInches(Number(value));\n        }}\n      />\n      <Text>{'in'}</Text>\n    </HStack>\n  );\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const formatDecimalMins = (time: number): string => {\n  const min = Math.floor(time);\n  const sec = Math.floor((time * 60) % 60);\n  return (min < 10 ? '0' : '') + min + ':' + (sec < 10 ? '0' : '') + sec;\n};\n\nexport const getWeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'lbs' : 'kg';\n};\n\nexport const getHeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'feet' : 'cm';\n};\n\nexport const getCircumferenceLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'inches' : 'cm';\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { BodyFatSelector } from '../../components/Forms/BodyFatSelector';\nimport { HeightInput } from '../../components/Forms/HeightInput';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getCircumferenceLabel, getHeightLabel, getWeightLabel } from '../../utils/measurements';\n\nexport const AboutYou = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { age, weight, height, waist, gender, bodyFat, preferredUnitsType } = trainee;\n  const unitsType = UnitsType[preferredUnitsType];\n  return (\n    <FormCard heading={t('About You')}>\n      <InlineField>\n        <Text>{t('Gender')}</Text>\n        <EnumSelect\n          Enum={Gender}\n          selectedValue={gender}\n          onValueChange={(value: keyof typeof Gender) => updateTrainee('gender', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your age')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={age?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('age', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your height ({{unitLabel}})', { unitLabel: getHeightLabel(unitsType) })}</Text>\n        <HeightInput unitsType={unitsType} height={height} setHeight={(value: number) => updateTrainee('height', value)} />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your current weight ({{unitLabel}})', { unitLabel: getWeightLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={weight?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('weight', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your waist circumference ({{unitLabel}})', { unitLabel: getCircumferenceLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={waist?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('waist', Number(value))}\n        />\n      </InlineField>\n      <InlineField allowWrap>\n        <Text>{t('Bodyfat (%)')}</Text>\n        <BodyFatSelector\n          gender={gender}\n          bodyFat={bodyFat}\n          setBodyFat={(value: number) => updateTrainee('bodyFat', Number(value))}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Box, ScrollView, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { ExperienceLevel, Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { getLiftStandards, getSpeedStandards, LiftMetrics, SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { formatDecimalMins, getWeightLabel } from '../../utils/measurements';\nimport { Table, TableHeader, TableRow } from '../Content';\n\nexport const StrengthStandardsComparison = ({\n  gender,\n  standards,\n  unitsType,\n}: {\n  gender: Gender;\n  standards: StrengthMetrics;\n  unitsType: UnitsType;\n}) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={700}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Exercice', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            {Object.keys(standards).map((exercise) => {\n              const lift: LiftMetrics = standards[exercise as keyof typeof standards]!;\n              const liftStandards = getLiftStandards(gender, exercise as Exercise);\n\n              if (!liftStandards) {\n                return;\n              }\n\n              const getCellContent = ({ oneRepMax, ratio, reps }: LiftMetrics, isStandard = false) => {\n                if (isStandard) {\n                  if (reps) {\n                    return `${reps} reps`;\n                  }\n                  return `${oneRepMax}${weightLabel} or ${ratio}x`;\n                }\n\n                if (reps) {\n                  return `${reps} reps`;\n                }\n                return oneRepMax ? `${oneRepMax}${weightLabel}/${ratio}x` : '-';\n              };\n\n              return (\n                <TableRow\n                  key={exercise}\n                  values={[\n                    { content: exercise, sideBorder: true },\n                    { content: getCellContent(lift), textAlign: 'center', sideBorder: true },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Beginner]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Novice]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Intermediate]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Advanced]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Vigilante]!, true),\n                      textAlign: 'center',\n                    },\n                  ]}\n                />\n              );\n            })}\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          'Note: Weights are calculated 1 Rep Maxes (using the average of multiple formulas - Epley, O&apos;Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight. Standards are sourced from strengthlevel.com'\n        )}\n      </Text>\n    </>\n  );\n};\n\nexport const SpeedtandardsComparison = ({ gender, standards }: { gender: Gender; standards: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  const genderStandards = getSpeedStandards(gender);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={575}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Distance', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: 'Mile Run', sideBorder: true },\n                {\n                  content: standards.mileRun ? formatDecimalMins(standards.mileRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.mileRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: '5k Run', sideBorder: true },\n                {\n                  content: standards.fiveKmRun ? formatDecimalMins(standards.fiveKmRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.fiveKmRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t('Note: Standards are sourced from runninglevel.com')}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { calculateStrengthStandards, LiftMetrics, standardExercises } from '../../domain/standards';\nimport { LiftAttempt, Lifts } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { Table, TableCell, TableHeader, TableRow } from '../Content';\n\nexport const LiftingStandardsCalculator = ({\n  unitsType,\n  weight,\n  lifts = {},\n  setLifts,\n}: {\n  unitsType: UnitsType;\n  weight: number;\n  lifts: Lifts;\n  setLifts: (newLifts: Lifts) => void;\n}) => {\n  const { t } = useTranslation();\n\n  const standards = useMemo(() => weight && lifts && calculateStrengthStandards(weight, lifts), [lifts, weight]);\n\n  const onChange = (lift: Exercise, attr: keyof LiftAttempt, value: number) => {\n    setLifts({\n      ...lifts,\n      [lift]: { ...lifts[lift as Exercise], [attr]: value },\n    });\n  };\n\n  const weightLabel = getWeightLabel(unitsType);\n  const headings = [\n    { content: 'Exercise', textAlign: 'left' },\n    { content: `Weight (${weightLabel})` },\n    { content: 'Reps' },\n    { content: '1RM', textAlign: 'right' },\n    { content: 'Ratio', textAlign: 'right' },\n  ];\n  const cellWidth = `${100 / headings.length}%`;\n\n  return (\n    <>\n      <Table>\n        <TableHeader headings={headings} />\n        {standardExercises.map((lift) => {\n          const calculated: LiftMetrics = standards?.[lift as keyof typeof standards];\n          return (\n            <TableRow key={lift}>\n              <TableCell width={cellWidth} content={lift} />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'decimal-pad'}\n                    value={lifts?.[lift as Exercise]?.weight?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'weight', Number(value))}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'number-pad'}\n                    value={lifts?.[lift as Exercise]?.reps?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'reps', Number(value))}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.oneRepMax ? `${calculated.oneRepMax}${weightLabel}` : ''}\n              />\n              <TableCell width={cellWidth} textAlign={'right'} content={calculated?.ratio ? `${calculated.ratio}x` : ''} />\n            </TableRow>\n          );\n        })}\n      </Table>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          \"Rep Maxes are calculated using the average of multiple formulas (Epley, O'Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight\"\n        )}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingStandardsCalculator } from '../../components/Standards';\nimport { ActivityLevel, UnitsType } from '../../domain/constants';\nimport { Lifts, Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Activity = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const {\n    activityLevel,\n    bestMileRunTime,\n    bestfiveKmRunTime,\n    maxPushUps,\n    maxPullUps,\n    hasLifted,\n    preferredUnitsType,\n    currentLifts,\n    weight,\n    returningFromBreak,\n  } = trainee;\n  return (\n    <FormCard heading={t('Your current activity and fitnesss')}>\n      <InlineField>\n        <Text>{t('General daily activity')}</Text>\n        <EnumSelect\n          Enum={ActivityLevel}\n          selectedValue={activityLevel}\n          onValueChange={(value: keyof typeof ActivityLevel) => updateTrainee('activityLevel', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Mile run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestMileRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestMileRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('5k run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestfiveKmRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestfiveKmRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many push ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPushUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPushUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many pull ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPullUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPullUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Ever done barbell lifting?')}</Text>\n        <Select\n          selectedValue={hasLifted ? 'yes' : 'no'}\n          onValueChange={(value: string) => updateTrainee('hasLifted', value === 'yes')}\n          items={[\n            { value: 'yes', label: 'yes' },\n            { value: 'no', label: 'no' },\n          ]}\n        />\n      </InlineField>\n      {hasLifted && (\n        <>\n          <InlineField>\n            <Text>{t('Are you returning from an injury or long break from training?')}</Text>\n            <Select\n              selectedValue={returningFromBreak ? 'yes' : 'no'}\n              onValueChange={(value: string) => updateTrainee('returningFromBreak', value === 'yes')}\n              items={[\n                { value: 'yes', label: 'yes' },\n                { value: 'no', label: 'no' },\n              ]}\n            />\n          </InlineField>\n          <Text paddingY={2} bold>\n            {t('What are your most recent lifts?')}\n          </Text>\n          <LiftingStandardsCalculator\n            unitsType={UnitsType[preferredUnitsType]}\n            lifts={currentLifts}\n            weight={weight}\n            setLifts={(newLifts: Lifts) => {\n              updateTrainee('currentLifts', newLifts);\n            }}\n          />\n        </>\n      )}\n    </FormCard>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Configuration = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredUnitsType } = trainee;\n  return (\n    <FormCard heading={t('Configuration')}>\n      <InlineField>\n        <Text>{t('Units')}</Text>\n        <EnumSelect\n          Enum={UnitsType}\n          selectedValue={preferredUnitsType}\n          onValueChange={(value: keyof typeof UnitsType) => updateTrainee('preferredUnitsType', value)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { DietType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Nutrition = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredDietType, prefersHigherCaloriesOnWeekends, prefersCycledNutrition, needsMetabolicReset } = trainee;\n  return (\n    <FormCard heading={t('Your current nutrition and preferences')}>\n      <InlineField>\n        <Text>{'Eating style'}</Text>\n        <EnumSelect\n          Enum={DietType}\n          selectedValue={preferredDietType}\n          onValueChange={(value: keyof typeof DietType) => updateTrainee('preferredDietType', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>{t('Have you been \"dieting\" on low calories for a long time without results?')}</Text>\n        <Switch\n          size=\"sm\"\n          isChecked={needsMetabolicReset}\n          onValueChange={(checked: boolean) => updateTrainee('needsMetabolicReset', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { Goal } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Preferences = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { primaryGoal, secondaryGoal, prefersMinimalLegs, prefersProgramHoping } = trainee;\n  return (\n    <FormCard heading={t('Your goals and preferences')}>\n      <InlineField>\n        <Text>{t('Primary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={primaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('primaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Secondary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={secondaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('secondaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Mix it up often:')}</Text>{' '}\n          {t('If you get bored easily, this will cycle you through appropriate programs more often')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersProgramHoping}\n          onValueChange={(checked: boolean) => updateTrainee('prefersProgramHoping', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Minimal legs:')}</Text>{' '}\n          {t(\n            'For those not keen on squatting heavy and often, or those who just do not want big legs and rather keep them strong and athletic'\n          )}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersMinimalLegs}\n          onValueChange={(checked: boolean) => updateTrainee('prefersMinimalLegs', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Alert, ArrowDownIcon, ArrowUpIcon, Box, HStack, Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumMultiSelect, EnumSelect, FormCard, InlineField, Select, StackedField } from '../../components/Forms';\nimport { UnitsType, WeekDay } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\n\nexport const Scheduling = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredWeekStart, preferredNumberOfWorkoutsPerWeek, preferredWorkoutDuration, preferredWorkoutDays } = trainee;\n\n  const weightUnitLabel = getWeightLabel(UnitsType[trainee.preferredUnitsType]);\n  const percentLabel = '%';\n\n  return (\n    <FormCard heading={t('Scheduling & Progression')}>\n      <Alert status={'info'} colorScheme={'info'} marginBottom={2}>\n        <HStack flexShrink={1} space={2}>\n          <Text>\n            {t(\n              'It is important you commit to something sustainable, more is not always better. Success comes from long term consistency.'\n            )}\n          </Text>\n        </HStack>\n      </Alert>\n      <InlineField>\n        <Text>{t('Workouts per week')}</Text>\n        <Select\n          selectedValue={preferredNumberOfWorkoutsPerWeek}\n          onValueChange={(value: string) => updateTrainee('preferredNumberOfWorkoutsPerWeek', Number(value))}\n          items={[\n            { label: '2 at most', value: 2 },\n            { label: '3 at most', value: 3 },\n            { label: '4 at most', value: 4 },\n            { label: '5 at most', value: 5 },\n            { label: '6 at most', value: 6 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Workout duration')}</Text>\n        <Select\n          selectedValue={preferredWorkoutDuration}\n          onValueChange={(value: string) => updateTrainee('preferredWorkoutDuration', Number(value))}\n          items={[\n            { label: '30 min at most', value: 30 },\n            { label: '45 min at most', value: 45 },\n            { label: '60 min at most', value: 60 },\n            { label: '75 min at most', value: 75 },\n            { label: '90 min at most', value: 90 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Start week on')}</Text>\n        <EnumSelect\n          Enum={WeekDay}\n          selectedValue={preferredWeekStart}\n          onValueChange={(value: keyof typeof WeekDay) => updateTrainee('preferredWeekStart', value)}\n        />\n      </InlineField>\n      <StackedField>\n        <Text>{t('Days you can train')}</Text>\n        <EnumMultiSelect\n          Enum={WeekDay}\n          accessibilityLabel={t('Select days you can train')}\n          selectedValues={preferredWorkoutDays}\n          onChange={(newValues: Array<keyof typeof WeekDay>) => updateTrainee('preferredWorkoutDays', newValues)}\n        />\n      </StackedField>\n      <Box paddingTop={5}>\n        <Text>\n          {t('On Success')} <ArrowUpIcon />\n        </Text>\n        <InlineField>\n          <Text>{t('Barbell Increment')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={trainee.preferredBarbellIncrement?.toString() || ''}\n              onChangeText={(value: string) => updateTrainee('preferredBarbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>{t('Dumbbell Increment')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={trainee.preferredDumbbellIncrement?.toString() || ''}\n              onChangeText={(value: string) => updateTrainee('preferredDumbbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n      <Box paddingY={1}>\n        <Text>\n          {t('On Failure')} <ArrowDownIcon />\n        </Text>\n        <InlineField>\n          <Text>{t('Barbell Decrement')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={trainee.preferredBarbellDecrement?.toString()}\n              onChangeText={(value: string) => updateTrainee('preferredBarbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>{t('Dumbbell Decrement')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={trainee.preferredDumbbellDecrement?.toString()}\n              onChangeText={(value: string) => updateTrainee('preferredDumbbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n    </FormCard>\n  );\n};\n","import { Button } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nimport { AboutYou } from './AboutYou';\nimport { Activity } from './Activity';\nimport { Configuration } from './Configuration';\nimport { Nutrition } from './Nutrition';\nimport { Preferences } from './Preferences';\nimport { Scheduling } from './Scheduling';\n\nexport default function GetStarted() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { age, weight, height, bodyFat, primaryGoal, secondaryGoal } = trainee!;\n  const enableContinueButton = !!age && !!bodyFat && !!weight && !!height && !!primaryGoal && !!secondaryGoal;\n\n  return (\n    <DefaultLayout>\n      <Configuration trainee={trainee!} updateTrainee={updateTrainee} />\n      <AboutYou trainee={trainee!} updateTrainee={updateTrainee} />\n      <Nutrition trainee={trainee!} updateTrainee={updateTrainee} />\n      <Activity trainee={trainee!} updateTrainee={updateTrainee} />\n      <Preferences trainee={trainee!} updateTrainee={updateTrainee} />\n      <Scheduling trainee={trainee!} updateTrainee={updateTrainee} />\n      {enableContinueButton ? (\n        <RoutingButton to={Destination.ProgramSelection}>{t('Continue')}</RoutingButton>\n      ) : (\n        <Button colorScheme=\"secondary\" disabled>\n          {t('Continue')}\n        </Button>\n      )}\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard } from '../../components/Forms';\nimport { SpeedtandardsComparison, StrengthStandardsComparison } from '../../components/Standards';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const Comparison = ({ trainee, traineeMetrics }: { trainee: Trainee; traineeMetrics: TraineeMetrics }) => {\n  const { t } = useTranslation();\n  const { gender, maxPullUps, maxPushUps, preferredUnitsType } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n  return (\n    <>\n      <FormCard heading={t('Strength')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{strengthLevel}</Text>\n        </Text>\n        <StrengthStandardsComparison\n          gender={Gender[gender]}\n          standards={{\n            ...strengthMetrics,\n            [Exercise.Pullup]: { reps: maxPullUps },\n            [Exercise.Pushup]: { reps: maxPushUps },\n          }}\n          unitsType={UnitsType[preferredUnitsType]}\n        />\n      </FormCard>\n      <FormCard heading={t('Speed')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{speedLevel}</Text>\n        </Text>\n        <SpeedtandardsComparison gender={Gender[gender]} standards={speedMetrics} />\n      </FormCard>\n    </>\n  );\n};\n","import { Box, Divider, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\n\nimport { DashboardDetail } from '../Dashboards';\n\nexport const NutritionInfo = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { note, bmr, tdee } = protocol;\n  return (\n    <>\n      {note && <Text fontSize={'xs'}>{note}</Text>}\n      <Box marginY={2}>\n        <DashboardDetail label={t('BMR (Base Metabolic Rate)')} value={`${bmr}`} />\n        <Divider />\n        <DashboardDetail label={t('TDEE (Total Daily Energy Expenditure)')} value={`${tdee}`} />\n        <Divider />\n        <NutritionRecommendations protocol={protocol} />\n        <Box marginY={2}>\n          <Text fontSize={'2xs'} italic>\n            {t(\n              'NOTE: BMR was calculated using the average of Miffin St Jeor, Harris Benedict and Katch McArdle formulas. TDEE was calculated using your BMR and given activity level (lightly active=x1.375, active=x1.55 and very active=x1.725). Minimum protein to consume was calculated using your body fat % (1 gram per pound of lean bodyweight)'\n            )}\n          </Text>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport const NutritionRecommendations = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { targetCalories, type, higherCaloriesOnWeekends, cycleNutrition, targetProtein } = protocol;\n  return (\n    <Box>\n      <DashboardDetail\n        label={`Recommended Target Average ${type === NutritionType.Bulk ? 'Surplus' : 'Deficit'}`}\n        value={`${targetCalories.energyExpenditureModifier}`}\n      />\n      <Divider />\n      <DashboardDetail label={t('Target Average Daily Calories')} value={`${targetCalories.average}`} />\n      <Divider />\n      {higherCaloriesOnWeekends && !cycleNutrition && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && !higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekday Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      <DashboardDetail label={t('Minimum Grams of Protein')} value={`${targetProtein}`} />\n      <Divider />\n    </Box>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard, InlineField } from '../Forms';\nimport { NutritionInfo } from '.';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const NutritionRecommendation = ({\n  trainee,\n  updateTrainee,\n  recommendedNutrition,\n}: {\n  trainee: Trainee;\n  updateTrainee: UpdateTraineeFn;\n  recommendedNutrition: NutritionProtocol;\n}) => {\n  const { t } = useTranslation();\n  const { prefersAggressiveCut, prefersHigherCaloriesOnWeekends, prefersCycledNutrition } = trainee;\n  return (\n    <FormCard heading={'Nutritional Recommendation'}>\n      <NutritionInfo protocol={recommendedNutrition} />\n      {[NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type) && (\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('More aggresive cut:')}</Text>{' '}\n            {t('for those who want to drop weight quicker and can handle lower calories.')}\n          </Text>\n          <Switch\n            size=\"sm\"\n            isChecked={prefersAggressiveCut}\n            onValueChange={(checked: boolean) => updateTrainee('prefersAggressiveCut', checked)}\n          />\n        </InlineField>\n      )}\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { toNearestIncrement } from '../../fitness-tools';\nimport { UnitsType } from '../../domain/constants';\nimport { LiftMetrics, StrengthMetrics } from '../../domain/standards';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const LiftingTargets = ({ liftTargets, unitsType }: { liftTargets: StrengthMetrics; unitsType: UnitsType }) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      {Object.keys(liftTargets).map((lift) => {\n        const { oneRepMax, fiveRepMax, reps } = liftTargets[lift as keyof typeof liftTargets] as LiftMetrics;\n        const roundedFiveReps = fiveRepMax && toNearestIncrement({ weight: fiveRepMax, unitsType });\n\n        return (\n          <BulletPoint key={lift}>\n            <Text fontSize={'xs'}>\n              {oneRepMax ? (\n                <>\n                  {t('Get your {{lift}} 1RM to {{oneRepMax}}{{weightLabel}}', { lift, oneRepMax, weightLabel })}\n                  {roundedFiveReps && (\n                    <Text>{t(` (that's {{weight}}{{weightLabel}} for 5 reps)`, { weight: roundedFiveReps, weightLabel })}</Text>\n                  )}\n                </>\n              ) : (\n                <>{t('Get your number of {{lift}} to {{reps}}', { lift, reps })}</>\n              )}\n            </Text>\n          </BulletPoint>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { SpeedMetrics } from '../../domain/standards';\nimport { formatDecimalMins } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const SpeedTargets = ({ speedTargets }: { speedTargets: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <BulletPoint>\n        <Text fontSize={'xs'}>\n          {t('Get your Mile Run run down to {{time}}', { time: formatDecimalMins(speedTargets.mileRun) })}\n        </Text>\n      </BulletPoint>\n      <BulletPoint>\n        <Text fontSize={'xs'}>\n          {t('Get your 5k Run run down to {{time}}', { time: formatDecimalMins(speedTargets.fiveKmRun) })}\n        </Text>\n      </BulletPoint>\n    </>\n  );\n};\n","import { Box, Center, Divider, Heading, HStack, ScrollView, Text } from 'native-base';\nimport { RoutineEntry, RoutineSet, Workout } from '../../domain/programs';\nimport { Video } from '../Content';\n\nexport const getExerciseRepLabel = (item: RoutineEntry): string => {\n  const sets = item.sets.length > 0 ? item.sets : item.warmup;\n\n  const reps = sets!\n    .reduce<string[]>((acc, set: RoutineSet) => {\n      let targetReps = `${set.reps || set.targetReps || ''}`;\n      if (set.minReps) {\n        targetReps = `${set.minReps}-${set.maxReps}`;\n      }\n      if (set.AMRAP) {\n        targetReps = targetReps ? `${targetReps}+` : 'f';\n      }\n      if (set.percentage) {\n        targetReps = `${targetReps}@${set.percentage}%`;\n      }\n\n      return [...acc, targetReps];\n    }, [])\n    .reduce<string[]>((acc, current, currentIndex, array) => {\n      let str = `1x${current}`;\n      if (array[currentIndex] === array[currentIndex + 1] || array[currentIndex] === array[currentIndex - 1]) {\n        str = `${array.filter((item) => item === current).length}x${current}`;\n      }\n      if (acc.includes(str)) return acc;\n\n      return [...acc, str];\n    }, []);\n\n  return reps.join(', ');\n};\n\nexport const WorkoutRoutinesHScroll = ({ workouts, showVideos }: { workouts: Workout[]; showVideos?: boolean }) => {\n  return (\n    <ScrollView horizontal={true}>\n      <HStack>\n        {workouts.map((workout: Workout, idx) => {\n          const wid = `workout-${workout.name}`;\n          const hasDivider = idx < workouts.length - 1;\n          return (\n            <HStack key={wid}>\n              <Box width={240}>\n                <Heading fontSize={'md'} fontWeight={300} paddingBottom={2}>\n                  {workout.name}\n                </Heading>\n                {workout.routine.map((item: RoutineEntry) => (\n                  <Box key={`${wid}-${item.exercise}`} paddingBottom={1}>\n                    <Text bold>{item.exercise}</Text>\n                    <Text>{getExerciseRepLabel(item)}</Text>\n                  </Box>\n                ))}\n                {workout.video && showVideos && (\n                  <Center paddingTop={2}>\n                    <Video video={workout.video} width={260} />\n                  </Center>\n                )}\n              </Box>\n              {hasDivider && <Divider marginX={4} orientation={'vertical'} />}\n            </HStack>\n          );\n        })}\n      </HStack>\n    </ScrollView>\n  );\n};\n","import { Box, Button, Container, Switch, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint } from '../../components/Content';\nimport { FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingTargets, SpeedTargets } from '../../components/Targets';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { UnitsType } from '../../domain/constants';\nimport { getProgram, Program, programs } from '../../domain/programs';\nimport { SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const ProgramRecommendation = ({\n  trainee,\n  recommendedPrograms,\n  speedTargets,\n  liftTargets,\n  bodyFatTarget,\n  program,\n  setProgram,\n  traineeMetrics,\n}: {\n  trainee: Trainee;\n  recommendedPrograms: { suitablePrograms: Program[]; bestMatch: string };\n  speedTargets: SpeedMetrics;\n  liftTargets: StrengthMetrics;\n  bodyFatTarget?: number;\n  program: string;\n  setProgram: (value: string) => void;\n  traineeMetrics: TraineeMetrics;\n}) => {\n  const { t } = useTranslation();\n  const [showAllPrograms, setShowAllPrograms] = useState(false);\n\n  const { preferredUnitsType } = trainee;\n  const selectedProgram = getProgram(program);\n  const selectedProgramWorkouts = selectedProgram?.workouts(traineeMetrics.strengthLevel);\n  const selectedValue = program || recommendedPrograms.bestMatch;\n\n  const programList = showAllPrograms ? programs : recommendedPrograms.suitablePrograms;\n\n  useEffect(() => {\n    setProgram(selectedValue);\n  }, [program, recommendedPrograms]);\n\n  return (\n    <FormCard heading={'Training Recommendation'}>\n      <Box marginBottom={3}>\n        <Text>{t('You should focus on getting stronger and faster aiming for the following short term goals:')}</Text>\n        {liftTargets && <LiftingTargets liftTargets={liftTargets} unitsType={UnitsType[preferredUnitsType]} />}\n        {speedTargets && <SpeedTargets speedTargets={speedTargets} />}\n        {bodyFatTarget && (\n          <BulletPoint>\n            <Text fontSize={'xs'}>{t('Get your body fat down to {{bodyFatTarget}}%', { bodyFatTarget })}</Text>\n          </BulletPoint>\n        )}\n      </Box>\n\n      <Text fontSize={'xs'} italic>\n        {t(\n          'The most recommended program to achieve the above is selected, but you can also chose one of the other programs that match your level of strength and preferences and you will still see good results.'\n        )}\n      </Text>\n      <Box marginTop={3} marginBottom={6}>\n        <Select\n          border\n          selectedValue={selectedValue}\n          onValueChange={(value: string) => setProgram(value)}\n          width={'100%'}\n          textAlign={'left'}\n          items={programList.map((program) => ({\n            label: `${program.name}${program.id === recommendedPrograms.bestMatch ? ` (recommended)` : ''}`,\n            value: program.id,\n          }))}\n        />\n        <Container marginTop={2}>\n          {!showAllPrograms ? (\n            <Button size=\"xs\" onPress={() => setShowAllPrograms(true)}>\n              {t('Show all programs')}\n            </Button>\n          ) : (\n            <Button size=\"xs\" colorScheme={'secondary'} onPress={() => setShowAllPrograms(false)}>\n              {t('Hide non recommended programs')}\n            </Button>\n          )}\n        </Container>\n      </Box>\n\n      {selectedProgramWorkouts && <WorkoutRoutinesHScroll workouts={selectedProgramWorkouts} />}\n      <Box marginTop={5}>\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('End workouts with a speed or endurance finisher.')}</Text>{' '}\n            {t(\n              'In true vigilante fashion, workouts will randomly end with a bodyweight exercise for reps and/or time, some sort of carry for distance and/or time or a 1 mile or 5k run for time.'\n            )}\n          </Text>\n          <Switch size=\"sm\" isChecked />\n        </InlineField>\n      </Box>\n    </FormCard>\n  );\n};\n","import { useState } from 'react';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WeekDay } from '../../domain/constants';\nimport { getTraineeMetrics, getTraineeRecommendations, useActiveProgram, useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { Comparison } from './Comparison';\nimport { NutritionRecommendation } from '../../components/Nutrition/NutritionRecommendation';\nimport { ProgramRecommendation } from './ProgramRecommendation';\n\nexport default function ProgramSelection() {\n  const [program, setProgram] = useState<string>();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { initialiseProgram } = useActiveProgram();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition, recommendedPrograms, speedTargets, liftTargets, bodyFatTarget } = getTraineeRecommendations(\n    trainee!,\n    traineeMetrics\n  );\n\n  return (\n    <DefaultLayout>\n      <Comparison trainee={trainee!} traineeMetrics={traineeMetrics} />\n      <NutritionRecommendation trainee={trainee!} updateTrainee={updateTrainee} recommendedNutrition={recommendedNutrition} />\n      <ProgramRecommendation\n        trainee={trainee!}\n        traineeMetrics={traineeMetrics}\n        recommendedPrograms={recommendedPrograms}\n        speedTargets={speedTargets}\n        liftTargets={liftTargets}\n        bodyFatTarget={bodyFatTarget}\n        program={program!}\n        setProgram={setProgram}\n      />\n      <RoutingButton\n        to={Destination.Dashboard}\n        onPress={() => initialiseProgram(program!, traineeMetrics.strengthLevel, WeekDay[trainee!.preferredWeekStart])}\n      >\n        {'Lets Go!'}\n      </RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { Paragraph } from '../../components/Content';\nimport { DashboardCard } from '../../components/Dashboards';\nimport { getTodaysCalories, NutritionProtocol } from '../../domain/nutrition';\nimport { ScheduledWorkout } from '../../domain/trainee';\nimport { getWorkoutUrl, RoutingButton } from '../../utils/routing';\n\nexport default function Today({\n  recommendedNutrition,\n  workout,\n  startWorkout,\n}: {\n  recommendedNutrition: NutritionProtocol;\n  workout: ScheduledWorkout | undefined;\n  startWorkout: () => void;\n}) {\n  const { t } = useTranslation();\n\n  const calories = getTodaysCalories(recommendedNutrition, !!workout);\n  const protein = recommendedNutrition.targetProtein;\n  const link = workout ? getWorkoutUrl(workout.id) : '/';\n\n  return (\n    <DashboardCard heading={t('Today')}>\n      {workout ? (\n        <Paragraph>\n          <Text paddingRight={3}>\n            {t('Today you are scheduled to perform:')} <Text bold>{workout.name}</Text>\n          </Text>\n          {workout.status === 'in progress' && <RoutingButton to={link}>{t('Continue Workout')}</RoutingButton>}\n          {workout.status === 'pending' && (\n            <RoutingButton to={link} onPress={startWorkout}>\n              {t('Start Workout')}\n            </RoutingButton>\n          )}\n        </Paragraph>\n      ) : (\n        <Paragraph>{t('Today is an active recovery day. Go for a run, do some stretching and/or some mobility work.')}</Paragraph>\n      )}\n\n      <Paragraph>\n        <Trans t={t} calories={calories} protein={protein}>\n          You should consume <Text bold>{{ calories }} calories</Text> and at least{' '}\n          <Text bold>{{ protein }} grams of protein</Text>. Calories can be split between fat and carbs to preference,\n          recommendation is that 20-30% come from healthy fats to maintain hormonal balance.\n        </Trans>\n      </Paragraph>\n    </DashboardCard>\n  );\n}\n","import { Box, Divider, HStack, Icon, Text } from 'native-base';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { goToWorkout, useNavigate } from '../../utils/routing';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport const WorkoutList = ({ workouts, dateFormat = 'date' }: { workouts: ScheduledWorkout[]; dateFormat?: 'day' | 'date' }) => {\n  const navigate = useNavigate();\n  return (\n    <>\n      {workouts.map((item, idx) => {\n        const isDone = item.status === 'done';\n        return (\n          <Box key={`workout-${idx}`}>\n            <HStack>\n              <Icon\n                color={isDone ? 'green.500' : 'amber.500'}\n                mb={1}\n                as={MaterialIcons}\n                name={isDone ? 'done' : 'schedule'}\n                size={'md'}\n                marginRight={1}\n              />\n              <Text>\n                {dateFormat === 'date'\n                  ? new Date(item.date).toLocaleDateString('en-GB', {\n                      weekday: 'short',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : new Date(item.date).toLocaleDateString('en-GB', { weekday: 'long' })}\n              </Text>\n              <Text bold>{` ${item.name}`}</Text>\n              <Icon\n                as={MaterialCommunityIcons}\n                name={'eye'}\n                size={'md'}\n                marginLeft={'auto'}\n                onPress={() => goToWorkout(navigate)(idx)}\n              />\n            </HStack>\n            <Divider marginY={2} />\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutList } from '../../components/Workouts';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport default function ThisWeek({ workouts }: { workouts: ScheduledWorkout[] }) {\n  const { t } = useTranslation();\n\n  return (\n    <DashboardCard heading={'This Week'}>\n      {workouts.length ? <WorkoutList workouts={workouts} dateFormat={'day'} /> : <Text>{t('No workouts scheduled.')}</Text>}\n    </DashboardCard>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard } from '../../components/Forms';\nimport { SpeedtandardsComparison, StrengthStandardsComparison } from '../../components/Standards';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const Comparison = ({ trainee, traineeMetrics }: { trainee: Trainee; traineeMetrics: TraineeMetrics }) => {\n  const { t } = useTranslation();\n  const { gender, maxPullUps, maxPushUps, preferredUnitsType } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n  return (\n    <>\n      <FormCard heading={t('How You Compare')}>\n        <Text marginBottom={2}>\n          {t('Your strength is ranked as:')} <Text bold>{strengthLevel}</Text>\n        </Text>\n        <StrengthStandardsComparison\n          gender={Gender[gender]}\n          standards={{\n            ...strengthMetrics,\n            [Exercise.Pullup]: { reps: maxPullUps },\n            [Exercise.Pushup]: { reps: maxPushUps },\n          }}\n          unitsType={UnitsType[preferredUnitsType]}\n        />\n        <Text marginBottom={2} marginTop={5}>\n          {t('Your speed is ranked as:')} <Text bold>{speedLevel}</Text>\n        </Text>\n        <SpeedtandardsComparison gender={Gender[gender]} standards={speedMetrics} />\n      </FormCard>\n    </>\n  );\n};\n","import { Box, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint } from '../../components/Content';\nimport { FormCard } from '../../components/Forms';\nimport { LiftingTargets, SpeedTargets } from '../../components/Targets';\nimport { SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { Trainee } from '../../domain/trainee';\nimport { UnitsType } from '../../fitness-tools';\n\nexport const CurrentTargets = ({\n  trainee,\n  speedTargets,\n  liftTargets,\n  bodyFatTarget,\n}: {\n  trainee: Trainee;\n  speedTargets: SpeedMetrics;\n  liftTargets: StrengthMetrics;\n  bodyFatTarget?: number;\n}) => {\n  const { t } = useTranslation();\n  const { preferredUnitsType } = trainee;\n  return (\n    <FormCard heading={'Current Training Aims'}>\n      <Box marginBottom={3}>\n        <Text>{t('You should focus on getting stronger and faster aiming for the following short term goals:')}</Text>\n        {liftTargets && <LiftingTargets liftTargets={liftTargets} unitsType={UnitsType[preferredUnitsType]} />}\n        {speedTargets && <SpeedTargets speedTargets={speedTargets} />}\n        {bodyFatTarget && (\n          <BulletPoint>\n            <Text fontSize={'xs'}>{t('Get your body fat down to {{bodyFatTarget}}%', { bodyFatTarget })}</Text>\n          </BulletPoint>\n        )}\n      </Box>\n    </FormCard>\n  );\n};\n","import { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport Today from './Today';\nimport {\n  getScheduledForThisWeek,\n  getTraineeMetrics,\n  getTraineeRecommendations,\n  useActiveProgram,\n  useTrainee,\n} from '../../domain/trainee';\nimport ThisWeek from './ThisWeek';\nimport { Comparison } from './Comparison';\nimport { NutritionRecommendation } from '../../components/Nutrition/NutritionRecommendation';\nimport { CurrentTargets } from './CurrentTargets';\n\nexport default function Dashboard() {\n  const { t } = useTranslation();\n  const { traineeLoaded, trainee, updateTrainee } = useTrainee();\n  const { schedule, activeProgramLoaded, todaysWorkout, updateSchedule } = useActiveProgram();\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition, speedTargets, liftTargets, bodyFatTarget } = getTraineeRecommendations(trainee!, traineeMetrics);\n  const thisWeeksWorkouts = getScheduledForThisWeek(schedule!);\n\n  const startWorkout = () => {\n    todaysWorkout && updateSchedule({ type: 'start_workout', payload: { id: todaysWorkout.id } });\n  };\n\n  return (\n    <HeadedLayout showNav heading={t('Dashboard')}>\n      <Today recommendedNutrition={recommendedNutrition!} workout={todaysWorkout} startWorkout={startWorkout} />\n      <ThisWeek workouts={thisWeeksWorkouts} />\n      <CurrentTargets trainee={trainee} speedTargets={speedTargets} liftTargets={liftTargets} bodyFatTarget={bodyFatTarget} />\n      <Comparison trainee={trainee!} traineeMetrics={traineeMetrics} />\n      <NutritionRecommendation trainee={trainee!} updateTrainee={updateTrainee} recommendedNutrition={recommendedNutrition} />\n    </HeadedLayout>\n  );\n}\n","import { Center, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { Video } from '../../components/Content';\nimport { DashboardCard, DashboardDetail } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WorkoutList } from '../../components/Workouts';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { getTraineeMetrics, useActiveProgram, useTrainee } from '../../domain/trainee';\nimport { ExternalLink } from '../../utils/routing';\n\nexport default function Program() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded } = useTrainee();\n  const { activeProgramLoaded, program, schedule } = useActiveProgram();\n\n  if (!activeProgramLoaded || !traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { strengthLevel } = getTraineeMetrics(trainee!);\n  const completedCount = schedule!.filter((item) => item.status === 'done').length;\n  const source = program?.link ? new URL(program.link)?.hostname : undefined;\n\n  return (\n    <HeadedLayout showNav heading={t('Program')}>\n      <DashboardCard heading={t('Active Program')}>\n        <DashboardDetail label={t('Name')} value={program!.name} />\n        {program!.author && <DashboardDetail label={t('Author')} value={program!.author} />}\n        {source && <DashboardDetail label={t('Sourced from')} value={<ExternalLink to={program!.link} text={source} />} />}\n        <DashboardDetail label={t('Duration')} value={`${program!.duration} weeks`} />\n        <DashboardDetail label={t('Workouts per week')} value={program!.daysPerWeek} />\n        <DashboardDetail label={t('Workout duration')} value={`${program!.workoutDuration} min`} />\n        {program?.video && (\n          <Center paddingTop={2}>\n            <Video video={program.video} />\n          </Center>\n        )}\n      </DashboardCard>\n      <DashboardCard heading={t('Workouts')}>\n        <WorkoutRoutinesHScroll workouts={program!.workouts(strengthLevel)} showVideos />\n      </DashboardCard>\n      <DashboardCard heading={t('Schedule')}>\n        <WorkoutList workouts={schedule!} />\n        <Text italic textAlign={'right'}>\n          {t('{{completedCount}}/{{total}} workouts complete', { completedCount, total: schedule!.length })}\n        </Text>\n      </DashboardCard>\n    </HeadedLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport { BottomButtonsBox } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram, useLog } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nexport default function Settings() {\n  const { t } = useTranslation();\n  const { activeProgramLoaded, resetProgram } = useActiveProgram();\n  const { resetLog } = useLog();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Settings')}>\n      <BottomButtonsBox>\n        <RoutingButton to={Destination.Log} onPress={resetLog} colorScheme=\"secondary\" marginY={1}>\n          {t('Reset Log')}\n        </RoutingButton>\n        <RoutingButton to={Destination.GetStarted} onPress={resetProgram}>\n          {t('Reset/Change Program')}\n        </RoutingButton>\n      </BottomButtonsBox>\n    </HeadedLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\n\nexport default function Vault() {\n  const { t } = useTranslation();\n\n  return (\n    <HeadedLayout showNav heading={t('Vault')}>\n      <Text>{t('Coming Soon')}</Text>\n    </HeadedLayout>\n  );\n}\n","import { Box, Divider, HStack, Text, VStack } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { RoutineEntry } from '../../domain/programs';\nimport { useLog } from '../../domain/trainee';\n\nexport default function Log() {\n  const { t } = useTranslation();\n  const { workoutLog, logLoaded } = useLog();\n\n  if (!logLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Log')}>\n      {(!workoutLog || !workoutLog.length) && <Text>{t('No workouts logged.')}</Text>}\n      {workoutLog?.map((workout) => {\n        const key = `${workout.datePerformed}-${workout.name}`;\n        return (\n          <DashboardCard key={key}>\n            <VStack space={1}>\n              <Text bold fontSize={'xs'}>\n                {new Date(workout.datePerformed).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              </Text>\n              <Text fontSize={'xs'}>\n                {t('{{workoutName}}, {{program}}', { workoutName: workout.name, program: workout.program })}\n              </Text>\n              <Divider />\n              {workout.routine.map((item: RoutineEntry) => (\n                <Box key={`${key}-${item.exercise}`}>\n                  {item.sets.length > 0 && (\n                    <Box>\n                      <Text bold fontSize={'xs'}>\n                        {item.exercise}\n                      </Text>\n                      <HStack>\n                        {item.sets.map((set, setId) => (\n                          <Text fontSize={'xs'} key={`${key}-${item.exercise}set-${setId}`} marginRight={2}>\n                            {!!set.weight && !!set.reps && `${set.weight}x${set.reps}`}\n                            {!set.weight && !!set.reps && `${set.reps}reps`}\n                          </Text>\n                        ))}\n                      </HStack>\n                    </Box>\n                  )}\n                </Box>\n              ))}\n            </VStack>\n          </DashboardCard>\n        );\n      })}\n    </HeadedLayout>\n  );\n}\n","import { toNearestIncrement } from '../../fitness-tools';\nimport { RoutineEntry, RoutineSet } from '../programs';\nimport { StrengthMetrics } from '../standards';\nimport { LiftAttempt, Lifts, ScheduledWorkout } from '../trainee';\n\nexport const getWorkoutById = (schedule: ScheduledWorkout[]) => (id: number) => schedule.find((entry) => entry.id === id);\n\nexport const getWorkoutTotalSetCount = (workout: ScheduledWorkout): number =>\n  workout.routine.reduce((acc, current) => {\n    if (current.warmup) acc = acc + current.warmup.length;\n    if (current.sets) acc = acc + current.sets.length;\n    return acc;\n  }, 0);\n\nexport const getCompleteSetCount = (workout: ScheduledWorkout): number => {\n  return workout.routine.reduce((acc: number, curr: RoutineEntry) => {\n    let count = acc;\n    [...(curr.warmup ? curr.warmup : []), ...(curr.sets ? curr.sets : [])].forEach((curr) => {\n      if (curr.status === 'done') count = count + 1;\n    });\n\n    return count;\n  }, 0);\n};\n\nexport const getPreviousWorkoutOfType = (schedule: ScheduledWorkout[]) => (workoutId: number) => {\n  const workout = schedule[workoutId];\n  let previous;\n  for (let i = workoutId - 1; i >= 0; i--) {\n    if (schedule[i].name === workout.name) {\n      previous = schedule[i];\n      break;\n    }\n  }\n  return previous;\n};\n\nexport const getPreviousLift =\n  (schedule: ScheduledWorkout[], workoutId: number, currentLifts?: Lifts) =>\n  (exerciseId: number, setId: number, warmup = false): { weight: number | undefined; reps: number } | undefined => {\n    // @TODO track and handle warmup history\n    if (warmup) return;\n\n    const previousWorkout = getPreviousWorkoutOfType(schedule!)(workoutId);\n    const previousSet = previousWorkout?.routine[exerciseId].sets[setId];\n\n    let previous = previousSet ? { weight: previousSet.weight, reps: previousSet.reps! } : undefined;\n\n    // if no previous and it is not a warmup\n    if (!previous && setId === 0 && currentLifts) {\n      previous = currentLifts[schedule[workoutId].routine[exerciseId].exercise as keyof typeof currentLifts];\n    }\n\n    return previous;\n  };\n\nexport const getRecommendedWeight =\n  ({\n    schedule,\n    workoutId,\n    barbellIncrement,\n    barbellDecrement,\n    dumbbellIncrement,\n    dumbbellDecrement,\n    strengthStandards,\n    bodyweight,\n    currentLifts,\n  }: {\n    schedule: ScheduledWorkout[];\n    workoutId: number;\n    barbellIncrement: number;\n    barbellDecrement: number;\n    dumbbellIncrement: number;\n    dumbbellDecrement: number;\n    strengthStandards: StrengthMetrics;\n    bodyweight: number;\n    currentLifts: Lifts;\n  }) =>\n  (exerciseId: number, setId: number, warmup = false): number | undefined => {\n    const entry = schedule[workoutId].routine[exerciseId];\n\n    const currentLift = currentLifts[entry.exercise as keyof typeof currentLifts];\n    const previous = getPreviousLift(schedule, workoutId)(exerciseId, setId, warmup);\n    const liftStandards = strengthStandards[entry.exercise as keyof typeof strengthStandards];\n    const set = warmup ? entry.warmup?.[setId] : entry.sets[setId];\n\n    // @TODO by exercise type\n    const smallestIncrement = barbellIncrement;\n    const deloadDecrement = barbellDecrement;\n\n    let weight;\n    if (set?.weight) {\n      weight = set.weight;\n    } else if (set?.percentage && set?.basis === 'firstSet') {\n      const firstSetWeight =\n        schedule[workoutId].routine[exerciseId].sets[0].weight ||\n        getRecommendedWeight({\n          schedule,\n          workoutId,\n          barbellIncrement,\n          barbellDecrement,\n          dumbbellIncrement,\n          dumbbellDecrement,\n          strengthStandards,\n          bodyweight,\n          currentLifts,\n        })(exerciseId, 0);\n      weight = firstSetWeight * set.percentage;\n    } else if (set?.percentage && liftStandards) {\n      weight = liftStandards[set.basis ?? 'oneRepMax']! * (set.percentage / 100);\n    } else if (set?.ratio) {\n      weight = bodyweight * set.ratio;\n    } else if (!previous && liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      const needsDeload = currentLift.fails && currentLift.fails >= 3;\n      const passedLastAttempt =\n        (currentLift.targetReps && currentLift.reps >= currentLift.targetReps) ||\n        currentLift.reps >= set.targetReps ||\n        currentLift.reps >= set.maxReps;\n      const needsToRepeatPrevious =\n        (currentLift.targetReps && currentLift.reps < currentLift.targetReps) ||\n        currentLift.reps < set.targetReps ||\n        currentLift.reps < set.maxReps;\n      if (needsDeload) {\n        weight = Number(currentLift.weight) - Number(currentLift.weight) * (deloadDecrement / 100);\n      } else if (passedLastAttempt) {\n        weight = Number(currentLift.weight) + Number(smallestIncrement);\n      } else if (needsToRepeatPrevious) {\n        weight = Number(currentLift.weight);\n      } else if (liftStandards) {\n        // @TODO should be configurable?\n        weight = liftStandards['fiveRepMax'];\n      }\n    } else if (liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      weight = Number(currentLift.weight);\n    }\n\n    return weight && toNearestIncrement({ weight, increment: smallestIncrement });\n  };\n\nconst getTrackingAttemptFromSets = (sets: RoutineSet[]): LiftAttempt | undefined =>\n  sets.reduce((prev, set) => {\n    if (set.ignoreForTracking || (!set.weight && !set.reps)) return prev;\n\n    const acc = prev || {};\n    const currentWeight = acc?.weight || 0;\n    const currentReps = acc?.reps || 0;\n\n    if (set.weight && set.weight >= currentWeight) {\n      acc.weight = Number(set.weight);\n      acc.reps = Number(set.reps!);\n      acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n    } else if (!set.weight && set.reps! > currentReps) {\n      acc.reps = Number(set.reps!);\n      acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n    }\n\n    return acc;\n  }, undefined) as LiftAttempt | undefined;\n\nexport const updateCurrentLifts = (\n  currentLifts: Lifts,\n  workout: ScheduledWorkout,\n  setCurrentLifts: (newLifts: Lifts) => void\n) => {\n  setCurrentLifts({\n    ...currentLifts,\n    ...workout?.routine.reduce((acc, curr: RoutineEntry) => {\n      if (curr.ignoreForTracking) return acc;\n\n      const trackingAttempt = getTrackingAttemptFromSets(curr.sets);\n      if (!trackingAttempt) return acc;\n\n      const { weight, reps, targetReps } = trackingAttempt;\n      const currentFails = currentLifts[curr.exercise as keyof typeof currentLifts]?.fails ?? 0;\n      const isFail = targetReps && reps < targetReps;\n\n      return { ...acc, [curr.exercise as string]: { weight, reps, targetReps, fails: isFail ? currentFails + 1 : 0 } };\n    }, {}),\n  });\n};\n","import { Icon, Modal, Pressable } from 'native-base';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useState } from 'react';\n\nimport { RoutineEntry } from '../../../../domain/programs';\nimport { Video } from '../../../../components/Content';\n\nexport const ExerciseInfo = ({ item }: { item: RoutineEntry }) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n  const { video } = item;\n  return (\n    <>\n      <Modal\n        isOpen={modalVisible}\n        onClose={() => {\n          setModalVisible(false);\n        }}\n      >\n        <Modal.CloseButton />\n        {video && <Video video={video} />}\n      </Modal>\n      {video && (\n        <Pressable\n          onPress={() => {\n            setModalVisible(true);\n          }}\n        >\n          <Icon as={MaterialCommunityIcons} name={'information-outline'} size={'sm'} />\n        </Pressable>\n      )}\n    </>\n  );\n};\n","import { Box, Text } from 'native-base';\n\nexport const SetIdentifier = ({ warmup, setId }: { warmup?: boolean; setId: number }) => (\n  <Box width={25} borderRadius={10} background={warmup ? 'primary.50' : 'primary.200'} padding={0.5}>\n    <Text textAlign={'center'} fontSize={'xs'}>\n      {setId + 1}\n    </Text>\n  </Box>\n);\n","import { RoutineSet } from '../../../domain/programs';\n\nexport const getTargetRepsPlaceholder = (entry: RoutineSet): string => {\n  let placeholder = '';\n  if (entry.minReps) {\n    placeholder = `${entry.minReps}-${entry.maxReps}`;\n  } else if (entry.targetReps) {\n    placeholder = `${entry.targetReps}`;\n  } else if (entry.reps) {\n    placeholder = `${entry.reps}`;\n  }\n\n  if (entry.AMRAP) placeholder = `${placeholder}+`;\n\n  return placeholder;\n};\n\nexport const getPreviousLabel =\n  (\n    getPreviousLift: (\n      exerciseId: number,\n      setId: number,\n      isWarmup: boolean\n    ) => { weight: number | undefined; reps: number } | undefined\n  ) =>\n  (exerciseId: number, setId: number, isWarmup = false) => {\n    const prev = getPreviousLift(exerciseId, setId, isWarmup);\n    if (prev && prev.weight) {\n      return `${prev?.weight}x${prev?.reps}`;\n    } else if (prev && prev.reps) {\n      return `${prev?.reps}`;\n    }\n    return '-';\n  };\n","import { Checkbox, Input, Text } from 'native-base';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport debounce from 'lodash.debounce';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel, getTargetRepsPlaceholder } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Sets = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n  onChangeSetReps,\n  onChangeSetWeight,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const { t } = useTranslation();\n  const [sets, setSets] = useState<RoutineSet[]>(routine.sets);\n\n  const onUpdate = (setId: number, attr: 'weight' | 'reps', value: any) => {\n    const newSets = [...sets];\n    newSets[setId][attr] = value;\n    setSets(newSets);\n\n    // we debounce store updates to avoid too many global re-renders\n    const debouncedSave = debounce(() => {\n      attr === 'weight' ? onChangeSetWeight(exerciseId, setId, Number(value)) : onChangeSetReps(exerciseId, setId, Number(value));\n    }, 2000);\n    debouncedSave();\n  };\n\n  return (\n    <>\n      {sets.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-set-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId), textAlign: 'center' },\n            ...(!routine.bodyweight\n              ? [\n                  {\n                    content: (\n                      <Input\n                        keyboardType={'decimal-pad'}\n                        value={entry.weight?.toString() || ''}\n                        textAlign={'center'}\n                        onChangeText={(value: string) => onUpdate(setId, 'weight', value !== '' ? Number(value) : '')}\n                        placeholder={getRecommendedWeight(exerciseId, setId)?.toString()}\n                        marginX={1}\n                      />\n                    ),\n                    textAlign: 'center',\n                  },\n                ]\n              : []),\n            {\n              content: (\n                <Input\n                  keyboardType={'number-pad'}\n                  value={entry.reps?.toString() || ''}\n                  textAlign={'center'}\n                  onChangeText={(value: string) => onUpdate(setId, 'reps', value !== '' ? Number(value) : '')}\n                  placeholder={getTargetRepsPlaceholder(entry)}\n                  marginX={1}\n                />\n              ),\n              textAlign: 'center',\n            },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, false)}\n                >\n                  <Text display={'none'}>{t('Done')}</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Checkbox, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Warmups = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {routine.warmup?.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-warmup-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier warmup setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId, true), textAlign: 'center' },\n            ...(!routine.bodyweight ? [{ content: getRecommendedWeight(exerciseId, setId, true), textAlign: 'center' }] : []),\n            { content: entry.reps, textAlign: 'center' },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, true)}\n                >\n                  <Text display={'none'}>{t('Done')}</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Box, Heading, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { Table, TableHeader } from '../../../components/Content';\nimport { RoutineEntry } from '../../../domain/programs';\nimport { ScheduledWorkout } from '../../../domain/trainee';\nimport { ExerciseInfo } from './components/ExerciseInfo';\nimport { SetProps } from './interfaces';\nimport { Sets } from './Sets';\nimport { Warmups } from './Warmups';\n\nexport const WorkoutSheet = ({\n  workout,\n  ...rest\n}: {\n  workout: ScheduledWorkout;\n} & SetProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {workout.routine.map((item: RoutineEntry, exerciseId: number) => {\n        return (\n          <Box key={`workout-${item.exercise}`} marginBottom={10}>\n            <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n              {item.optional && <Text italic>{t('(Optional)')} </Text>}\n              {item.exercise} <ExerciseInfo item={item} />\n            </Heading>\n            {item.note && (\n              <Text>\n                {t('Note:')} {item.note}\n              </Text>\n            )}\n            <Table>\n              <TableHeader\n                headings={[\n                  { content: t('Set'), textAlign: 'left', width: 10 },\n                  { content: t('Previous') },\n                  ...(!item.bodyweight ? [{ content: t('Weight') }] : []),\n                  { content: t('Reps') },\n                  { content: '' },\n                ]}\n              />\n              <Warmups exerciseId={exerciseId} routine={item} {...rest} />\n              <Sets exerciseId={exerciseId} routine={item} {...rest} />\n            </Table>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\nimport { Center, Pressable } from 'native-base';\nimport { CountdownCircleTimer, TimeProps } from 'react-native-countdown-circle-timer';\n\nimport { FormCard } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { getTraineeMetrics, Lifts, useActiveProgram, useLog, useTrainee } from '../../domain/trainee';\nimport {\n  getCompleteSetCount,\n  getPreviousLift,\n  getRecommendedWeight,\n  getWorkoutById,\n  getWorkoutTotalSetCount,\n  updateCurrentLifts,\n} from '../../domain/workout';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { WorkoutSheet } from './WorkoutSheet';\nimport { Progress, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\n\nexport default function Workout() {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { program, schedule, activeProgramLoaded, updateSchedule } = useActiveProgram();\n  const { logWorkout } = useLog();\n\n  const [setsDone, setSetsDone] = useState<number>(0);\n  const [nextRestDuration, setNextRestDuration] = useState<number>(0);\n  const [remainingTime, setRemainingTime] = useState<number>(0);\n\n  const workout = schedule && getWorkoutById(schedule)(Number(id));\n\n  useEffect(() => {\n    schedule && workout && setSetsDone(getCompleteSetCount(workout));\n  }, [id, schedule, setSetsDone, workout]);\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const { strengthMetrics } = getTraineeMetrics(trainee!);\n  const totalSets = workout ? getWorkoutTotalSetCount(workout) : 0;\n\n  const getSetRecommendedWeight = getRecommendedWeight({\n    schedule: schedule!,\n    workoutId: Number(id),\n    barbellIncrement: trainee.preferredBarbellIncrement,\n    barbellDecrement: trainee.preferredBarbellDecrement,\n    dumbbellIncrement: trainee.preferredDumbbellIncrement,\n    dumbbellDecrement: trainee.preferredDumbbellDecrement,\n    strengthStandards: strengthMetrics,\n    bodyweight: trainee!.weight,\n    currentLifts: trainee!.currentLifts,\n  });\n\n  const onChangeSetWeight = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_weight', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onChangeSetReps = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_reps', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onSetComplete = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    updateSchedule({\n      type: 'complete_set',\n      payload: { id, exerciseId, setId, isWarmup, recommendedWeight: getSetRecommendedWeight(exerciseId, setId, isWarmup) },\n    });\n    // trigger rest timer\n    const restTime = isWarmup ? 60 : (schedule![Number(id!)].routine[exerciseId].rest ?? 1) * 60;\n    setNextRestDuration(restTime);\n    setRemainingTime(restTime);\n    // update progress bar\n    setSetsDone((previous: number) => previous + 1);\n  };\n\n  const finishWorkout = () => {\n    updateSchedule({ type: 'end_workout', payload: { id } });\n    updateCurrentLifts(trainee!.currentLifts, workout!, (newLifts: Lifts) => updateTrainee('currentLifts', newLifts));\n    logWorkout(workout!, program!.name);\n  };\n\n  return (\n    <HeadedLayout\n      showNav\n      heading={workout!.name}\n      showLogo={false}\n      headerElements={\n        <>\n          <Progress w=\"70%\" colorScheme=\"primary\" value={(setsDone / totalSets) * 100} marginY={1} />\n          {nextRestDuration > 0 && remainingTime > 0 && (\n            <Center paddingY={2}>\n              <CountdownCircleTimer\n                size={90}\n                strokeWidth={8}\n                key={setsDone}\n                isPlaying\n                duration={nextRestDuration}\n                colors={'#FF8533'}\n              >\n                {({ remainingTime }: TimeProps) => {\n                  setRemainingTime(remainingTime);\n                  return <Text color={'white'} fontSize={'xs'}>{`${~~(remainingTime / 60)}min ${remainingTime % 60}sec`}</Text>;\n                }}\n              </CountdownCircleTimer>\n              <Pressable onPress={() => setRemainingTime(0)}>\n                <Text color={'white'} textDecoration={'underline'} paddingTop={2}>\n                  {t('Skip')}\n                </Text>\n              </Pressable>\n            </Center>\n          )}\n        </>\n      }\n    >\n      <FormCard>\n        <WorkoutSheet\n          workout={workout!}\n          getRecommendedWeight={getSetRecommendedWeight}\n          onChangeSetReps={onChangeSetReps}\n          onChangeSetWeight={onChangeSetWeight}\n          onSetComplete={onSetComplete}\n          getPreviousLift={getPreviousLift(schedule!, Number(id), trainee!.currentLifts)}\n        />\n        {/* {workout?.status !== 'done' && ( */}\n        <RoutingButton to={Destination.Dashboard} onPress={finishWorkout}>\n          {t('Finish Workout')}\n        </RoutingButton>\n        {/* )} */}\n      </FormCard>\n    </HeadedLayout>\n  );\n}\n","import { Route, Routes } from 'react-router';\nimport { NativeBaseProvider } from 'native-base';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { nativeBaseTheme } from './theme';\nimport { Destination, Router } from './utils/routing';\nimport { Loader } from './components/Loader';\n\nimport About from './screens/About';\nimport Welcome from './screens/Welcome';\nimport GetStarted from './screens/GetStarted';\nimport ProgramSelection from './screens/ProgramSelection';\nimport Dashboard from './screens/Dashboard';\nimport Program from './screens/Program';\nimport Settings from './screens/Settings';\nimport Vault from './screens/Vault';\nimport Log from './screens/Log';\nimport Workout from './screens/Workout';\nimport { useActiveProgram } from './domain/trainee';\n\ni18n.use(initReactI18next).init({\n  resources: {},\n  lng: 'en',\n  fallbackLng: 'en',\n});\n\nexport default function App() {\n  const { active, activeProgramLoaded } = useActiveProgram();\n\n  return (\n    <NativeBaseProvider theme={nativeBaseTheme}>\n      {!activeProgramLoaded ? (\n        <Loader />\n      ) : (\n        <Router>\n          <Routes>\n            <Route path={Destination.Home} element={active ? <Dashboard /> : <Welcome />} />\n            <Route path={Destination.About} element={<About />} />\n            <Route path={Destination.Dashboard} element={<Dashboard />} />\n            <Route path={Destination.GetStarted} element={<GetStarted />} />\n            <Route path={Destination.ProgramSelection} element={<ProgramSelection />} />\n            <Route path={Destination.Program} element={<Program />} />\n            <Route path={Destination.Settings} element={<Settings />} />\n            <Route path={Destination.Vault} element={<Vault />} />\n            <Route path={Destination.Log} element={<Log />} />\n            <Route path={Destination.Workout} element={<Workout />} />\n          </Routes>\n        </Router>\n      )}\n    </NativeBaseProvider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/strength-icon.23b12a84.png\";","module.exports = __webpack_public_path__ + \"static/media/cardio-icon.96b53289.png\";","module.exports = __webpack_public_path__ + \"static/media/speed-icon.6097ad38.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.19683717.png\";","module.exports = __webpack_public_path__ + \"static/media/go.077d9926.png\";","module.exports = __webpack_public_path__ + \"static/media/comic1.96e63579.png\";","module.exports = __webpack_public_path__ + \"static/media/comic2.70b29362.png\";","module.exports = __webpack_public_path__ + \"static/media/comic3.6d65de32.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/welcome2.bd841836.png\";","module.exports = __webpack_public_path__ + \"static/media/Male10.f23d08d5.png\";","module.exports = __webpack_public_path__ + \"static/media/Male15.293ba6ba.png\";","module.exports = __webpack_public_path__ + \"static/media/Male20.4ad2a421.png\";","module.exports = __webpack_public_path__ + \"static/media/Male25.a2cbf1de.png\";","module.exports = __webpack_public_path__ + \"static/media/Male30.c81ae86e.png\";","module.exports = __webpack_public_path__ + \"static/media/Female10.0c2955e8.png\";","module.exports = __webpack_public_path__ + \"static/media/Female15.6d965ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/Female20.14ba5dd7.png\";","module.exports = __webpack_public_path__ + \"static/media/Female25.91e6a499.png\";","module.exports = __webpack_public_path__ + \"static/media/Female30.fd170a69.png\";"],"sourceRoot":""}