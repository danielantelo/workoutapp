{"version":3,"sources":["utils/routing.tsx","theme/index.ts","theme/components/Select.ts","components/Loader/index.tsx","components/Content/Tables.tsx","domain/constants/index.ts","domain/exercises/exercises.ts","components/Content/Typography.tsx","components/Content/Video.tsx","screens/About/FitnessComponents/index.tsx","components/Logo/index.tsx","components/Navigation/index.tsx","components/Layouts/index.tsx","domain/programs/routines/athleanx.ts","domain/programs/routines/startingstrength.ts","domain/programs/routines/stronglifts.ts","domain/programs/routines/vigilante.ts","domain/programs/routines/wendler.ts","domain/programs/programs.ts","screens/About/index.tsx","screens/Welcome/index.tsx","utils/calendar.ts","domain/nutrition/nutrition.ts","domain/standards/speed.ts","domain/standards/strength.ts","domain/trainee/trainee.ts","domain/trainee/targets.ts","domain/trainee/schedule.ts","domain/trainee/store.ts","domain/trainee/log.ts","components/Dashboards/index.tsx","components/Forms/Select/index.tsx","components/Forms/index.tsx","components/Forms/BodyFatSelector/index.tsx","components/Forms/HeightInput/index.tsx","utils/measurements.ts","screens/GetStarted/AboutYou.tsx","components/Standards/StandardsComparison.tsx","components/Standards/LiftingStandardsCalculator.tsx","screens/GetStarted/Activity.tsx","screens/GetStarted/Configuration.tsx","screens/GetStarted/Nutrition.tsx","screens/GetStarted/Preferences.tsx","screens/GetStarted/Scheduling.tsx","screens/GetStarted/index.tsx","screens/ProgramSelection/Comparison.tsx","components/Nutrition/index.tsx","screens/ProgramSelection/NutritionRecommendation.tsx","components/Targets/LiftingTargets.tsx","components/Targets/SpeedTargets.tsx","components/Workouts/WorkoutRoutinesHScroll.tsx","screens/ProgramSelection/ProgramRecommendation.tsx","screens/ProgramSelection/index.tsx","screens/Dashboard/Today.tsx","components/Workouts/WorkoutsList.tsx","screens/Dashboard/ThisWeek.tsx","screens/Dashboard/index.tsx","screens/Program/index.tsx","screens/Settings/index.tsx","screens/Vault/index.tsx","screens/Log/index.tsx","domain/workout/helpers.ts","screens/Workout/WorkoutSheet/components/ExerciseInfo.tsx","screens/Workout/WorkoutSheet/components/SetIdentifier.tsx","screens/Workout/WorkoutSheet/helpers.ts","screens/Workout/WorkoutSheet/Sets.tsx","screens/Workout/WorkoutSheet/Warmups.tsx","screens/Workout/WorkoutSheet/index.tsx","screens/Workout/index.tsx","App.tsx","screens/About/FitnessComponents/strength-icon.png","screens/About/FitnessComponents/cardio-icon.png","screens/About/FitnessComponents/speed-icon.png","components/Logo/logo.png","components/Navigation/go.png","assets/comics/comic1.png","assets/comics/comic2.png","assets/comics/comic3.jpeg","screens/Welcome/welcome2.png","components/Forms/BodyFatSelector/Male10.png","components/Forms/BodyFatSelector/Male15.png","components/Forms/BodyFatSelector/Male20.png","components/Forms/BodyFatSelector/Male25.png","components/Forms/BodyFatSelector/Male30.png","components/Forms/BodyFatSelector/Female10.png","components/Forms/BodyFatSelector/Female15.png","components/Forms/BodyFatSelector/Female20.png","components/Forms/BodyFatSelector/Female25.png","components/Forms/BodyFatSelector/Female30.png"],"names":["Destination","nativeBaseTheme","extendTheme","fontSizes","xs","sm","md","lg","xl","colors","primary","secondary","components","Select","baseStyle","borderWidth","textAlign","paddingTop","Router","children","Platform","OS","useNavigate","useNavigateDom","linkStyle","color","Link","to","label","style","textDecoration","Text","ExternalLink","text","onPress","Linking","openURL","RoutingButton","rest","navigate","Button","Loader","Center","height","Spinner","accessibilityLabel","Goal","ExperienceLevel","DietType","WeekDay","ExerciseType","Exercise","Table","VStack","TableHeader","headings","HStack","alignItems","justifyContent","borderBottomWidth","borderBottomColor","marginBottom","map","heading","id","width","length","fontWeight","sideBorder","content","TableCell","bottomBorder","Box","fontSize","borderRightWidth","borderRightColor","TableRow","values","item","Paragraph","BulletPoint","marginY","marginLeft","marginRight","Video","video","includes","alignSelf","source","uri","useNativeControls","videoId","FitnessComponents","t","useTranslation","Image","resizeMode","alt","require","bold","Logo","size","tabs","icon","action","Program","Log","image","Dashboard","Vault","Settings","Navigation","location","useLocation","useStoredState","selectedTab","setSelectedTab","useEffect","pathname","forEach","tab","idx","bg","safeAreaBottom","shadow","position","bottom","left","Pressable","opacity","py","flex","mb","as","MaterialCommunityIcons","name","DefaultLayout","showNav","showLogo","backgroundColor","safeArea","maxWidth","marginX","paddingY","ScrollView","HeadedLayout","headerElements","safeAreaTop","top","zIndex","paddingBottom","marginTop","ahtleanXRoutines","author","link","level","Beginner","Novice","Intermediate","gender","Gender","Male","Female","goal","Strength","Size","Lean","Speed","daysPerWeek","weeklySchedule","workoutDuration","duration","workouts","warmup","percentage","reps","mainSets","targetReps","secondarySets","Array","routine","exercise","MultiLunge","sets","Squat","startingWeight","HipThrust","fill","minReps","maxReps","Bench","Chinup","DbCarry","ratio","Facepull","Deadlift","ReverseLunge","Press","Row","DbOverheadCarry","HipBand","PullApart","ssRoutines","PowerClean","optional","Advanced","basis","volumeSets","progressionSets","ignoreForTracking","bodyweight","AMRAP","Hyperextensions","PowerSnatch","slRoutines","Dips","weight","Shrugs","TricepExtensions","Curl","CableCrunches","note","CloseGripBench","InclineCurls","Situp","vigilanteRoutines","RDL","WalkingLunges","Pullup","LateralRaises","Vigilante","Dip","HammerCurl","FrontSquat","InclineBench","DumbbellRow","DiamondPushUp","HighPulls","LegRaises","wendlerRoutines","weekIndex","weekNumber","flat","console","log","programs","sort","a","b","getProgram","find","program","About","Heading","GetStarted","Headline","Welcome","Container","paddingLeft","NutritionType","DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getDateOfWeekday","dayName","date","Date","allowPast","now","getDay","day","findIndex","toLowerCase","diff","nextDayTimestamp","getTime","isDateInPast","today","setHours","getNextWorkoutDay","weekStart","previousWorkoutDate","proposedDate","scheduleDay","previousWorkoutDay","previousWorkoutDayIndex","getNextScheduledWeekday","schedule","found","parts","reduce","acc","current","push","week","convertScheduleToWeekdays","getTargetCalories","tdee","cycleNutrition","numberOfWorkoutDays","higherCaloriesOnWeekends","preferAggressiveCut","isCut","Cut","AggressiveCut","modifier","Bulk","Maintain","getEnergyExpenditureModifier","average","workoutdaysTarget","restdaysTarget","weekendTarget","Math","abs","trainingDay","restDay","weekend","energyExpenditureModifier","getNutritionRecommendation","age","unitsType","bodyFat","activityLevel","primaryGoal","secondaryGoal","needsMetabolicReset","calcWeight","UnitsType","Metric","kgToLbs","calcHeight","cmToInches","bmi","calculateBMI","bmr","calculateBMR","heightInInches","weightInLbs","calculateTDEE","targetProtein","calculateMinimumProteinRequirement","largeDeficitDueToBodyfatMessage","type","reason","getNutritionTypeRecommendation","targetCalories","getTodaysCalories","recommendedNutrition","isWorkoutDay","dayOfWeek","isDateWeekend","speedStandards","mileRun","fiveKmRun","getSpeedStandards","standardExercises","strengthStandards","oneRepMax","Pushup","getLiftStandards","getStrengthLevel","everLifted","accLevel","lift","liftStandards","liftLevel","Object","keys","levelStandards","oneRepMaxForComparison","lbsToKg","meetsOneRepMaxBasedStandard","meetsWeightBasedStandard","meetsRepBasedStandard","getLiftLevel","isLowerStandard","indexOf","undefined","calculateStrengthStandards","lifts","key","repMaxes","calculateRepMaxes","round","getTraineeMetrics","trainee","currentLifts","hasLifted","bestMileRunTime","bestfiveKmRunTime","strengthMetrics","speedMetrics","strengthLevel","speedLevel","mileRunTime","runStandards","meetsMileRunStandard","meetsFiveKmStandard","getSpeedLevel","getTraineeRecommendations","traineeMetrics","preferredNumberOfWorkoutsPerWeek","preferredWorkoutDuration","preferredUnitsType","prefersHigherCaloriesOnWeekends","prefersCycledNutrition","prefersAggressiveCut","recommendedPrograms","maxDaysPerWeek","maxWorkoutDuration","suitablePrograms","filter","isLevelAppropriate","isGenderAppropriate","meetsPrimaryGoal","meetsSecondaryGoal","isSuitableSchedule","bestMatch","getProgramRecommendations","ActivityLevel","speedTargets","standards","getNextSpeedTargets","liftTargets","lifterStandards","getLiftTarget","currentLift","levelStandard","levelOneRepMax","levelRatio","fiveRepMax","calculateFiveRepMax","target","getNextLiftTargets","bodyFatTarget","scheduleReducer","payload","experienceLevel","createSchedule","newSchedule","exerciseId","setId","value","status","markAllSetsAsComplete","isWarmup","recommendedWeight","updateWorkoutWithCompletedSet","Error","firstWorkoutMustBeOnWeekStart","totalWorkouts","workoutWeeklyIndex","workoutId","set","traineeReducer","formData","field","defaultTrainee","preferredDietType","preferredWeekStart","preferredWorkoutDays","prefersProgramHoping","prefersMinimalLegs","preferredBarbellIncrement","preferredBarbellDecrement","preferredDumbbellIncrement","preferredDumbbellDecrement","useTrainee","useStoredReducer","dispatch","updateTrainee","traineeLoaded","resetTrainee","useActiveProgram","activeProgram","setActiveProgram","activeProgramLoaded","unsetIsActive","updateSchedule","scheduleLoaded","unsetSchedule","todaysWorkout","getTodaysWorkout","active","initialiseProgram","resetProgram","useLog","workoutLog","setWorkoutLog","workoutLogLoaded","removeWorkoutLog","logLoaded","logWorkout","workout","datePerformed","resetLog","DashboardHeading","DashboardCard","useTheme","padding","rounded","white","DashboardLabel","DashboardDetail","onValueChange","selectedValue","items","border","inputWeb","paddingRight","inputIOS","borderColor","borderRadius","inputAndroid","iconContainer","fixAndroidTouchableBug","Icon","EnumSelect","Enum","EnumMultiSelect","selectedValues","onChange","Checkbox","Group","defaultValue","space","flexWrap","my","FormCard","InlineField","allowWrap","StackedField","BottomButtonsBox","BodyFatImageMap","10","15","20","25","30","BodyFatSelector","setBodyFat","Radio","toString","Number","percent","HeightInput","setHeight","Imperial","Input","keyboardType","onChangeText","ImperialHeightInput","useState","feet","setFeet","inches","setInches","inchestToFeetAndInches","feetAndInchesToInches","onSetHeight","formatDecimalMins","time","min","floor","sec","getWeightLabel","getHeightLabel","getCircumferenceLabel","AboutYou","waist","unitLabel","StrengthStandardsComparison","weightLabel","horizontal","showsHorizontalScrollIndicator","minWidth","getCellContent","isStandard","italic","SpeedtandardsComparison","genderStandards","LiftingStandardsCalculator","setLifts","useMemo","attr","cellWidth","calculated","Activity","maxPushUps","maxPullUps","newLifts","Configuration","Nutrition","Switch","isChecked","checked","Preferences","Scheduling","weightUnitLabel","Alert","colorScheme","flexShrink","newValues","Arrow","enableContinueButton","ProgramSelection","disabled","Comparison","NutritionInfo","protocol","Divider","NutritionRecommendations","NutritionRecommendation","LiftingTargets","roundedFiveReps","toNearestIncrement","SpeedTargets","getExerciseRepLabel","currentIndex","array","str","join","WorkoutRoutinesHScroll","showVideos","wid","hasDivider","orientation","ProgramRecommendation","setProgram","showAllPrograms","setShowAllPrograms","selectedProgram","selectedProgramWorkouts","programList","Today","startWorkout","calories","protein","Trans","WorkoutList","dateFormat","isDone","MaterialIcons","toLocaleDateString","weekday","month","goToWorkout","ThisWeek","thisWeeksWorkouts","entry","dayjs","isSame","getScheduledForThisWeek","completedCount","total","year","workoutName","getPreviousWorkoutOfType","previous","i","getPreviousLift","previousWorkout","previousSet","updateCurrentLifts","setCurrentLifts","curr","currentFails","fails","isFail","ExerciseInfo","modalVisible","setModalVisible","Modal","isOpen","onClose","CloseButton","SetIdentifier","background","getTargetRepsPlaceholder","placeholder","getPreviousLabel","prev","Sets","getRecommendedWeight","onSetComplete","setSets","onUpdate","newSets","display","Warmups","WorkoutSheet","Workout","useParams","setsDone","setSetsDone","nextRestDuration","setNextRestDuration","remainingTime","setRemainingTime","getWorkoutById","count","getCompleteSetCount","totalSets","getWorkoutTotalSetCount","getSetRecommendedWeight","barbellIncrement","barbellDecrement","dumbbellIncrement","dumbbellDecrement","smallestIncrement","deloadDecrement","needsDeload","passedLastAttempt","needsToRepeatPrevious","increment","Progress","w","strokeWidth","isPlaying","onChangeSetReps","onChangeSetWeight","restTime","App","NativeBaseProvider","theme","path","Home","element","i18n","use","initReactI18next","init","resources","lng","fallbackLng","module","exports"],"mappings":"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","file":"static/js/app.596fa2df.chunk.js","sourcesContent":["import { Button, IButtonProps, Text } from 'native-base';\nimport { Linking, Platform } from 'react-native';\nimport { NavigateFunction } from 'react-router';\nimport { HashRouter, Link as DomLink, useNavigate as useNavigateDom } from 'react-router-dom';\nimport { NativeRouter, Link as NativeLink, useNavigate as useNavigateNative } from 'react-router-native';\n\nexport enum Destination {\n  About = '/About',\n  Dashboard = '/Dashboard',\n  GetStarted = '/GetStarted',\n  Home = '/',\n  Log = '/Log',\n  ProgramSelection = '/ProgramSelection',\n  Program = '/Program',\n  Settings = '/Settings',\n  Vault = '/Vault',\n  Workout = '/Workout/:id',\n}\n\nexport const Router = ({ children }: { children: React.ReactNode }) =>\n  Platform.OS === 'web' ? <HashRouter>{children}</HashRouter> : <NativeRouter>{children}</NativeRouter>;\n\nexport const useNavigate = () => (Platform.OS === 'web' ? useNavigateDom() : useNavigateNative());\n\nconst linkStyle = { color: '#FF8533' };\n\nexport const Link = ({ to, label }: { to: Destination; label: string }) => {\n  return Platform.OS === 'web' ? (\n    <DomLink to={to} style={{ textDecoration: 'none' }}>\n      <Text style={linkStyle}>{label}</Text>\n    </DomLink>\n  ) : (\n    <NativeLink to={to}>\n      <Text style={linkStyle}>{label}</Text>\n    </NativeLink>\n  );\n};\n\nexport const ExternalLink = ({ to, text }: { to: string; text: string }) => {\n  return (\n    <Text\n      style={linkStyle}\n      onPress={() => {\n        Linking.openURL(to);\n      }}\n    >\n      {text}\n    </Text>\n  );\n};\n\nexport const RoutingButton = ({\n  children,\n  to,\n  onPress,\n  ...rest\n}: {\n  children: React.ReactNode;\n  to: Destination | string;\n  secondary?: boolean;\n  onPress?: () => void;\n} & IButtonProps) => {\n  const navigate = useNavigate();\n  return (\n    <Button\n      {...rest}\n      onPress={() => {\n        onPress && onPress();\n        navigate(to);\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const goToAbout = (navigate: NavigateFunction) => navigate(Destination.About);\n\nexport const goToGetStarted = (navigate: NavigateFunction) => navigate(Destination.GetStarted);\n\nexport const goToHome = (navigate: NavigateFunction) => navigate(Destination.Home);\n\nexport const goToDashboard = (navigate: NavigateFunction) => navigate(Destination.Dashboard);\n\nexport const goToLog = (navigate: NavigateFunction) => navigate(Destination.Log);\n\nexport const goToProgram = (navigate: NavigateFunction) => navigate(Destination.Program);\n\nexport const goToVault = (navigate: NavigateFunction) => navigate(Destination.Vault);\n\nexport const goToSettings = (navigate: NavigateFunction) => navigate(Destination.Settings);\n\nexport const goToWorkout = (navigate: NavigateFunction) => (id: number) => navigate(`/Workout/${id}`);\n","import { extendTheme } from 'native-base';\n\nimport { Select } from './components/Select';\n\nexport const nativeBaseTheme = extendTheme({\n  fontSizes: {\n    xs: 11,\n    sm: 13,\n    md: 15,\n    lg: 18,\n    xl: 28,\n  },\n  colors: {\n    primary: {\n      '50': '#FFF3EB',\n      '100': '#FFE7D6',\n      '200': '#FFCEAD',\n      '300': '#FFB685',\n      '400': '#FF9D5C',\n      '500': '#FF8533',\n      '600': '#F56200',\n      '700': '#B84900',\n      '800': '#7A3100',\n      '900': '#3D1800',\n    },\n    secondary: {\n      '50': '#f9f9f8',\n      '100': '#e0e0de',\n      '200': '#a5a5a5',\n      '300': '#808080',\n      '400': '#656565',\n      '500': '#4a4a4a',\n      '600': '#434343',\n      '700': '#3a3a3a',\n      '800': '#323232',\n      '900': '#222222',\n    },\n  },\n  components: {\n    Select,\n  },\n});\n","export const Select = {\n  baseStyle: {\n    borderWidth: 0,\n    textAlign: 'right',\n    paddingTop: 0,\n  },\n};\n\n","import { Center, Spinner } from 'native-base';\n\nexport const Loader = () => (\n  <Center height={'100%'}>\n    <Spinner accessibilityLabel=\"Loading\" />\n  </Center>\n);\n","import React from 'react';\nimport { Box, HStack, Text, VStack } from 'native-base';\n\ninterface Cell {\n  content?: string | number | React.ReactNode;\n  fontWeight?: number | string;\n  textAlign?: string;\n  width?: string | number;\n  sideBorder?: boolean;\n  bottomBorder?: boolean;\n}\n\nexport const Table = ({ children }: { children: React.ReactNode }) => <VStack>{children}</VStack>;\n\nexport const TableHeader = ({ headings }: { headings: Cell[] }) => {\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'space-between'}\n      borderBottomWidth={1}\n      borderBottomColor={'secondary.100'}\n      marginBottom={1}\n    >\n      {headings.map((heading, id) => (\n        <TableCell\n          key={`${id}-${heading.content}`}\n          width={`${100 / headings.length}%`}\n          textAlign={heading.textAlign ?? 'center'}\n          fontWeight={500}\n          sideBorder={heading.sideBorder}\n          {...heading}\n        />\n      ))}\n    </HStack>\n  );\n};\n\nexport const TableCell = ({ width, textAlign, sideBorder, bottomBorder, content, fontWeight }: Cell) => {\n  return (\n    <>\n      {typeof content === 'object' ? (\n        <Box width={width}>{content}</Box>\n      ) : (\n        <Text\n          fontSize={'xs'}\n          fontWeight={fontWeight}\n          width={width}\n          textAlign={textAlign}\n          borderRightWidth={sideBorder ? 1 : 0}\n          borderBottomWidth={bottomBorder ? 1 : 0}\n          borderRightColor={'secondary.100'}\n        >\n          {content}\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport const TableRow = ({ children, values }: { children?: React.ReactNode; values?: Cell[] }) => {\n  return (\n    <HStack alignItems={'center'} justifyContent={'space-between'} marginBottom={1}>\n      {values?.map((item: Cell, id: number) => (\n        <TableCell key={`cell-${id}`} width={item.width ?? `${100 / values.length}%`} {...item} />\n      ))}\n      {children}\n    </HStack>\n  );\n};\n","export { ActivityLevel, UnitsType, Gender } from 'fitness-tools';\n\nexport enum Goal {\n  Strength = 'Strength',\n  Size = 'Size',\n  Lean = 'Leanness',\n  Speed = 'Speed',\n}\n\nexport enum ExperienceLevel {\n  Beginner = 'Average Joe',\n  Novice = 'Novice',\n  Intermediate = 'Intermediate',\n  Advanced = 'Advanced',\n  Vigilante = 'Vigilante',\n}\n\nexport enum DietType {\n  Balanced = 'Balanced',\n  Keto = 'Keto',\n  Carnivore = 'Carnivore',\n  Pescatarian = 'Pescatarian',\n  Vegetarian = 'Vegetarian',\n  Vegan = 'Vegan',\n}\n\nexport enum WeekDay {\n  Monday = 'Monday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday',\n  Thursday = 'Thursday',\n  Friday = 'Friday',\n  Saturday = 'Saturday',\n  Sunday = 'Sunday',\n}\n","export enum ExerciseType {\n  Duration = 'Barbell',\n  Distance = 'Dumbbell',\n  Bodyweight = 'Bodyweight',\n  Machine = 'Machine',\n}\n\nexport enum Exercise {\n  Bench = 'Bench Press',\n  InclineBench = 'Incline Press',\n  Press = 'Press',\n  CloseGripBench = 'Close Grip Bench Press',\n  Dips = 'Dips',\n  LateralRaises = 'Lateral Raises',\n  DiamondPushUp = 'Diamond Pushups',\n\n  Deadlift = 'Deadlift',\n  RDL = 'Romanian Deadlift',\n  Squat = 'Squat',\n  FrontSquat = 'Front Squat',\n  Hyperextensions = 'Hyperextensions',\n\n  Curl = 'Curls',\n  InclineCurls = 'Incline Curls',\n  TricepExtensions = 'Tricep Extensions',\n  HammerCurl = 'Hammer Curls',\n  DBSkulls = 'Dumbbell Skullcrushers',\n\n  Row = 'Row',\n  DumbbellRow = 'Dumbbell Row',\n  Shrugs = 'Shrugs',\n\n  MultiLunge = 'Multi Directional Lunge',\n  ReverseLunge = 'Reverse Lunge',\n  WalkingLunges = 'Walking Lunges',\n  HipThrust = 'Hip Thrusts',\n  HipBand = 'Hip Bands Side Steps',\n\n  Facepull = 'Face pulls',\n  PullApart = 'Band Pull Aparts',\n  HighPulls = 'High Pulls',\n\n  Pullup = 'Pull Ups',\n  Chinup = 'Chin Ups',\n  Pushup = 'Push Ups',\n  Dip = 'Dips',\n\n  CableCrunches = 'Cable Crunches',\n  Situp = 'Weighted Sit Up',\n  LegRaises = 'Leg Raises',\n\n  PowerClean = 'Power Clean',\n  PowerSnatch = 'Power Snatch',\n\n  MileRun = 'Mile Run',\n  FiveKmRun = '5k Run',\n\n  DbCarry = 'Dumbbell Carry',\n  DbOverheadCarry = 'Dumbbell Ovehead Carry',\n}\n","import { HStack, Text } from 'native-base';\n\nexport const Paragraph = ({ children }: { children: React.ReactNode }) => <Text marginBottom={5}>{children}</Text>;\n\nexport const BulletPoint = ({ children }: { children: React.ReactNode }) => (\n  <HStack marginY={1} marginLeft={3}>\n    <Text marginRight={2}>{'\\u{29BF}'}</Text>\n    <Text>{children}</Text>\n  </HStack>\n);\n","import YoutubePlayer from 'react-native-youtube-iframe';\nimport { Video as ExpoVideo } from 'expo-av';\n\nexport const Video = ({ video, width = 320 }: { video: string; width?: number }) => {\n  const height = width * (9 / 16);\n  if (video.includes('http')) {\n    return (\n      <ExpoVideo\n        style={{\n          alignSelf: 'center',\n          width,\n          height,\n        }}\n        source={{\n          uri: video,\n        }}\n        useNativeControls\n      />\n    );\n  }\n\n  return <YoutubePlayer width={width} height={height} videoId={video} />;\n};\n","import { Text, HStack, Image, VStack } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nexport const FitnessComponents = () => {\n  const { t } = useTranslation();\n  return (\n    <VStack>\n      <HStack marginBottom={3} alignItems={'center'}>\n        <Image\n          marginRight={3}\n          width={50}\n          height={50}\n          resizeMode={'contain'}\n          alt={t('Strength')}\n          source={require('./strength-icon.png')}\n        />\n        <Text>\n          <Text fontSize={'xs'} bold>\n            {t('Strength:')}{' '}\n          </Text>\n          <Text fontSize={'xs'}>\n            {t(\n              'This is the “power” essential for vigilantes fighting crime! Without muscular strength, your body would be weak and unable to lift or carry heavy objects. The way to increase strength is to train with heavy weights, working in the 3 - 6 and the 8 - 12 rep ranges. We measure and track your strength by calculating your bodyweight to weight lifted ratio and one rep max (1RM).'\n            )}\n          </Text>\n        </Text>\n      </HStack>\n      <HStack marginBottom={3} alignItems={'center'}>\n        <Image\n          marginRight={3}\n          width={50}\n          height={50}\n          resizeMode={'contain'}\n          alt={t('Endurance')}\n          source={require('./cardio-icon.png')}\n        />\n        <Text>\n          <Text fontSize={'xs'} bold>\n            {t('Endurance:')}{' '}\n          </Text>\n          <Text fontSize={'xs'}>\n            {t(\n              'Endurance is critical for those long battles! It is the ability of your muscles and cardiovascular system to perform for extended periods of time. The way to increase endurance is to train in high rep ranges and improve sustaining physical exertion for extended periods of time. We measure and track your endurance through the number of push ups, pull ups and squat jumps you can do, the distance you can carry heavy objects and your 5k run time.'\n            )}\n          </Text>\n        </Text>\n      </HStack>\n      <HStack marginBottom={3} alignItems={'center'}>\n        <Image\n          marginRight={3}\n          width={50}\n          height={50}\n          resizeMode={'contain'}\n          alt={t('speed')}\n          source={require('./speed-icon.png')}\n        />\n        <Text>\n          <Text fontSize={'xs'} bold>\n            {t('Speed:')}{' '}\n          </Text>\n          <Text fontSize={'xs'}>\n            {t(\n              \"Can't let those villains get away! Speed is all about how fast you can move. We measure and track your speed by practicing and testing your mile run time.\"\n            )}\n          </Text>\n        </Text>\n      </HStack>\n    </VStack>\n  );\n};\n","import { Image } from 'native-base';\n\ntype LogoSize = 'sm' | 'md';\n\nconst Logo = ({ size }: { size?: LogoSize }) => {\n  let height = 268; // actual image height\n  switch (size) {\n    case 'sm':\n      height = height / 10;\n      break;\n    case 'md':\n      height = height / 4;\n      break;\n  }\n  return (\n    <Image marginBottom={1} width={'100%'} height={height} alt={'logo'} resizeMode={'contain'} source={require(`./logo.png`)} />\n  );\n};\n\nexport default Logo;\n","import { ReactElement, useEffect } from 'react';\nimport { Center, HStack, Icon, Image, Pressable, Text } from 'native-base';\nimport { NavigateFunction, useLocation } from 'react-router';\nimport { ImageSourcePropType, Platform } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useStoredState } from 'react-native-use-stored-state';\n\nimport { goToDashboard, goToLog, goToProgram, goToSettings, goToVault, useNavigate } from '../../utils/routing';\n\ninterface Tab {\n  label?: string;\n  icon?: string;\n  image?: ImageSourcePropType;\n  action: (navigate: NavigateFunction) => void;\n}\n\nconst tabs: Tab[] = [\n  {\n    label: 'Program',\n    icon: 'dumbbell',\n    action: goToProgram,\n  },\n  {\n    label: 'Log',\n    icon: 'calendar',\n    action: goToLog,\n  },\n  {\n    image: require('./go.png'),\n    action: goToDashboard,\n  },\n  {\n    label: 'Vault',\n    icon: 'video',\n    action: goToVault,\n  },\n  {\n    label: 'Settings',\n    icon: 'cog',\n    action: goToSettings,\n  },\n];\n\nexport const Navigation = (): ReactElement => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab] = useStoredState<number>('ACTIVE_NAV_TAB', 2);\n\n  useEffect(() => {\n    if (location.pathname.includes('Dashboard')) {\n      setSelectedTab(2);\n    } else {\n      tabs.forEach((tab, idx) => {\n        if (tab.label && location.pathname.includes(tab.label)) {\n          setSelectedTab(idx);\n        }\n      });\n    }\n  }, [location]);\n\n  return (\n    <HStack\n      bg={'secondary.100'}\n      alignItems={'center'}\n      safeAreaBottom\n      shadow={5}\n      paddingTop={2}\n      //@ts-expect-error forced web styles for sticky nav\n      style={Platform.OS === 'web' ? { position: 'fixed', bottom: 0, left: 0, width: '100%' } : {}}\n    >\n      {tabs.map((tab, id) => (\n        <Pressable\n          key={`nav-tab-${id}`}\n          opacity={selectedTab === id ? 1 : 0.5}\n          py={2}\n          flex={1}\n          onPress={() => {\n            setSelectedTab(id);\n            tab.action(navigate);\n          }}\n        >\n          <Center>\n            {tab.icon && <Icon mb={1} as={MaterialCommunityIcons} name={tab.icon} size={'md'} />}\n            {tab.label && <Text>{tab.label}</Text>}\n            {tab.image && <Image width={10} height={10} alt={'Next Workout'} resizeMode={'contain'} source={tab.image} />}\n          </Center>\n        </Pressable>\n      ))}\n    </HStack>\n  );\n};\n","import { Box, Center, ScrollView, Text } from 'native-base';\nimport { Platform } from 'react-native';\n\nimport Logo from '../Logo';\nimport { Navigation } from '../Navigation';\n\nexport const DefaultLayout = ({\n  children,\n  showNav,\n  showLogo,\n  backgroundColor = 'secondary.50',\n}: {\n  showNav?: boolean;\n  showLogo?: boolean;\n  children: React.ReactNode;\n  backgroundColor?: 'secondary.100' | 'secondary.50';\n}) => {\n  return (\n    <>\n      <Box flex={1} backgroundColor={backgroundColor}>\n        <Box safeArea flex={1} maxWidth={600} width={'95%'} marginX={'auto'} paddingY={5}>\n          <ScrollView>\n            {showLogo && (\n              <Center paddingY={5}>\n                <Logo size={'md'} />\n              </Center>\n            )}\n            {children}\n          </ScrollView>\n        </Box>\n      </Box>\n      {showNav && <Navigation />}\n    </>\n  );\n};\n\nexport const HeadedLayout = ({\n  showNav,\n  children,\n  backgroundColor = 'secondary.50',\n  heading,\n  headerElements,\n}: {\n  showNav?: boolean;\n  children: React.ReactNode;\n  heading?: string;\n  headerElements?: React.ReactNode;\n  backgroundColor?: string;\n}) => {\n  return (\n    <Box flex={1} backgroundColor={backgroundColor}>\n      <Box flex={1} maxWidth={600} width={'100%'} marginX={'auto'}>\n        <Box\n          safeAreaTop\n          bg={'secondary.500'}\n          paddingY={2}\n          //@ts-expect-error forced web styles for sticky top\n          style={Platform.OS === 'web' ? { position: 'fixed', top: 0, left: 0, width: '100%', zIndex: 100 } : {}}\n        >\n          <Center>\n            <Logo size={'sm'} />\n            {heading && (\n              <Text bold color={'white'}>\n                {heading}\n              </Text>\n            )}\n            {headerElements && <>{headerElements}</>}\n          </Center>\n        </Box>\n        <ScrollView\n          flex={1}\n          width={'96%'}\n          marginX={'auto'}\n          paddingBottom={20}\n          style={Platform.OS === 'web' ? { marginTop: '75px' } : {}}\n        >\n          {children}\n        </ScrollView>\n        {showNav && <Navigation />}\n      </Box>\n    </Box>\n  );\n};\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const ahtleanXRoutines: Program[] = [\n  {\n    id: 'AXFullBody',\n    name: 'AthleanX Perfect Total Body',\n    author: 'Jeff Cavaliere',\n    link: 'https://athleanx.com/articles/full-body-workout-plan',\n    video: 'R6gZoAzAhCg',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 8,\n    workouts: (level?: ExperienceLevel): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const mainRest = 2;\n      const secondarySets = Array(level === ExperienceLevel.Beginner ? 3 : 4);\n      const secondaryRest = 1;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Squat,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-squat.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-hip-thrust.mp4',\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-bench-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/weighted-chinup.mp4',\n              warmup: [\n                { percentage: 0, reps: 5 },\n                { percentage: 0, reps: 5 },\n              ],\n              sets: [...secondarySets].fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              video: '//athleanx.com/wp-content/uploads/2019/07/farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.5 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/banded-facepull.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-deadlift.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.ReverseLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/reverse-barbell-lunge.mp4',\n              sets: [...secondarySets].fill({ targetReps: 10 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-overhead-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-row.mp4',\n              warmup,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/dumbbell-overhead-farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.25 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.HipBand,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/hip-band-mini-ladder.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.PullApart,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/band-pull-aparts.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'AXPushPullLegs',\n  //   name: 'AthleanX Perfect Push Pull Legs',\n  //   author: 'Jeff Cavaliere',\n  //   link: 'https://athleanx.com/articles/full-body-workout-plan',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 6,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const ssRoutines: Program[] = [\n  {\n    id: 'StartingStrength',\n    author: 'Mark Rippetoe',\n    name: 'Starting Strength',\n    link: 'https://startingstrength.com/get-started/programs',\n    video: 'a9-a_8hC17M',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '37-wjE_c4NU',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              sets,\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'TexasMethod',\n    author: 'Mark Rippetoe',\n    name: 'The Texas Method',\n    link: 'https://startingstrength.com/article/the_texas_method',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 60, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 70, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const volumeSets: RoutineSet[] = [\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const progressionSets: RoutineSet[] = [{ targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '2ggG1M2gGes',\n              sets: [{ targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }],\n              rest,\n            },\n          ],\n        },\n        // @TODO think about how to deal with alternating exercises\n        {\n          name: 'Workout A2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerSnatch,\n              video: 'uyY_ySdN6OU',\n              sets: [\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n              ],\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const slRoutines: Program[] = [\n  {\n    id: 'StrongLifts',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Strong Lifts',\n    link: 'https://stronglifts.com/5x5/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          video: 'EP2g3Sj3qSw',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'ICF',\n    author: 'Jason Blaha',\n    name: 'Ice Cream Fitness 5x5',\n    video: 'oAuARgqS6aQ',\n    link: 'https://www.muscleandstrength.com/workouts/jason-blaha-ice-cream-fitness-5x5-novice-workout',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Size, Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 90,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 2;\n      const warmup = [\n        { weight: 20, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const secondaryRest = 1.5;\n      const secondarySets = [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'yS8yUgRMiy4',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              video: 'Io4Fq0SpMAY',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'm_WPH1NYPxc',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              note: '10% ligther than Workout A',\n              ignoreForTracking: true,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'V8bDeB7UPFo',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.CloseGripBench,\n              video: '8hgpyLrdWXs',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              video: 'H2T3tSbI_iQ',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'Madcow',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Madcow 5x5',\n    link: 'https://stronglifts.com/madcow-5x5/',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 87.5, reps: 5, basis: 'fiveRepMax' },\n      ];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              note: 'Lighter than monday for recovery',\n              ignoreForTracking: true,\n              warmup: [\n                { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n              ],\n              sets: [\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ targetReps: 6 }, { targetReps: 6 }, { targetReps: 6 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const vigilanteRoutines: Program[] = [\n  {\n    id: 'Vigilante3Day',\n    name: 'Vigilante Full Body Training',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }];\n      const mainRest = 3;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(3).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'VigilanteAdvanced3Day',\n    name: 'Vigilante Advanced Full Body Training',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      const mainSets: RoutineSet[] = [\n        { targetReps: 5, AMRAP: true },\n        { targetReps: 8, AMRAP: true, percentage: 70 },\n      ];\n      const mainRest = 2;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: mainSets,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(4).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.FrontSquat,\n              warmup,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight: 'twelveRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.InclineBench,\n              warmup,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight: 'twelveRepMax',\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.DiamondPushUp,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.HighPulls,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.LegRaises,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const wendlerRoutines: Program[] = [\n  {\n    id: 'WendlerBBB',\n    author: 'Jim Wendler',\n    name: '5/3/1 Boring But Big',\n    link: 'https://www.jimwendler.com/blogs/jimwendler-com/101077382-boring-but-big',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size],\n    daysPerWeek: 4,\n    weeklySchedule: [0, 1, 3, 4],\n    workoutDuration: 60,\n    duration: 4,\n    workouts: (): Workout[] => {\n      const mainRest = 2;\n      const warmup: RoutineSet[] = [\n        { percentage: 40, reps: 5, basis: 'threeRepMax' },\n        { percentage: 50, reps: 5, basis: 'threeRepMax' },\n        { percentage: 60, reps: 3, basis: 'threeRepMax' },\n      ];\n      const workouts: Workout[] = [\n        [\n          { percentage: 65, targetReps: 5, basis: 'threeRepMax' },\n          { percentage: 75, targetReps: 5, basis: 'threeRepMax' },\n          { percentage: 85, targetReps: 5, basis: 'threeRepMax', AMRAP: true },\n        ],\n        [\n          { percentage: 70, targetReps: 3, basis: 'threeRepMax' },\n          { percentage: 80, targetReps: 3, basis: 'threeRepMax' },\n          { percentage: 90, targetReps: 3, basis: 'threeRepMax', AMRAP: true },\n        ],\n        [\n          { percentage: 75, targetReps: 5, basis: 'threeRepMax' },\n          { percentage: 85, targetReps: 3, basis: 'threeRepMax' },\n          { percentage: 95, targetReps: 1, basis: 'threeRepMax', AMRAP: true },\n        ],\n        [\n          { percentage: 40, targetReps: 5, basis: 'threeRepMax' },\n          { percentage: 50, targetReps: 5, basis: 'threeRepMax' },\n          { percentage: 60, targetReps: 5, basis: 'threeRepMax', AMRAP: true },\n        ],\n      ]\n        .map((mainSets, weekIndex) => {\n          const weekNumber = weekIndex + 1;\n          return [\n            {\n              name: `Week ${weekNumber} Workout A`,\n              routine: [\n                {\n                  exercise: Exercise.Press,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Bench,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.Chinup,\n                  warmup,\n                  sets: Array(5).fill({ targetReps: 10 }),\n                  bodyweight: true,\n                },\n                {\n                  exercise: Exercise.TricepExtensions,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Curl,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Facepull,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Workout B`,\n              routine: [\n                {\n                  exercise: Exercise.Deadlift,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Squat,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.CableCrunches,\n                  warmup,\n                  sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Workout C`,\n              routine: [\n                {\n                  exercise: Exercise.Bench,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Press,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.DumbbellRow,\n                  warmup,\n                  sets: Array(5).fill({ targetReps: 10 }),\n                  bodyweight: true,\n                },\n                {\n                  exercise: Exercise.TricepExtensions,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Curl,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n                {\n                  exercise: Exercise.Facepull,\n                  sets: Array(3).fill({ targetReps: 10 }),\n                },\n              ],\n            },\n            {\n              name: `Week ${weekNumber} Workout D`,\n              routine: [\n                {\n                  exercise: Exercise.Squat,\n                  warmup,\n                  sets: mainSets,\n                  rest: mainRest,\n                },\n                {\n                  exercise: Exercise.Deadlift,\n                  sets: Array(5).fill({ percentage: 60, targetReps: 10, basis: 'threeRepMax' }),\n                },\n                {\n                  exercise: Exercise.LegRaises,\n                  warmup,\n                  sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n                  bodyweight: true,\n                },\n              ],\n            },\n          ];\n        })\n        .flat();\n      console.log(workouts);\n      return workouts;\n    },\n  },\n  {\n    id: 'WendlerMonolith',\n    author: 'Jim Wendler',\n    name: '5/3/1 Building the Monolith',\n    link: 'https://www.jimwendler.com/blogs/jimwendler-com/101078918-building-the-monolith-5-3-1-for-size',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 75,\n    duration: 3,\n    workouts: (): Workout[] => {\n      const mainRest = 2;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'threeRepMax' },\n        { percentage: 60, reps: 5, basis: 'threeRepMax' },\n      ];\n      return [\n        {\n          name: 'Week 1 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                { percentage: 90, reps: 5, basis: 'threeRepMax' },\n                { percentage: 70, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Week 1 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 1 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                { percentage: 90, reps: 5, basis: 'threeRepMax' },\n                { percentage: 45, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: Array(10).fill({ percentage: 70, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 65, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 2 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 55, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: Array(10).fill({ percentage: 50, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 3 Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Week 3 Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Week 3 Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, reps: 5, basis: 'threeRepMax' },\n                { percentage: 55, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: Array(10).fill({ percentage: 75, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'WendlerBodybuilding',\n  //   author: 'Jim Wendler',\n  //   name: '5/3/1 Bodybuilding',\n  //   link: 'https://www.jimwendler.com/blogs/jimwendler-com/101075206-5-3-1-and-bodybuilding',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 4,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../constants';\nimport { Program } from './interfaces';\nimport { ahtleanXRoutines } from './routines/athleanx';\n// import { aWorkoutRoutines } from './routines/aworkoutroutine';\n// import { builtWithScienceRoutines } from './routines/builtwithschience';\n// import { greyskullRoutines } from './routines/greyskull';\n// import { gzclRoutines } from './routines/gzcl';\n// import { kinobodyRoutines } from './routines/kinobody';\n// import { leanGainsRoutines } from './routines/leangains';\n// import { oldSchoolRoutines } from './routines/oldschool';\n// import { otherRoutines } from './routines/other';\n// import { redditRoutines } from './routines/reddit';\nimport { ssRoutines } from './routines/startingstrength';\nimport { slRoutines } from './routines/stronglifts';\nimport { vigilanteRoutines } from './routines/vigilante';\nimport { wendlerRoutines } from './routines/wendler';\n\nexport const programs: Program[] = [\n  ...ssRoutines,\n  ...slRoutines,\n  ...ahtleanXRoutines,\n  // ...aWorkoutRoutines,\n  // ...builtWithScienceRoutines,\n  // ...greyskullRoutines,\n  // ...gzclRoutines,\n  // ...kinobodyRoutines,\n  // ...leanGainsRoutines,\n  // ...oldSchoolRoutines,\n  // ...otherRoutines,\n  // ...redditRoutines,\n  ...wendlerRoutines,\n  ...vigilanteRoutines,\n].sort((a, b) => {\n  return a.name > b.name ? 1 : -1;\n});\n\nexport const getProgram = (id: string): Program => programs.find((program) => program.id === id)!;\n\nexport const getProgramRecommendations = ({\n  gender,\n  strengthLevel,\n  primaryGoal,\n  secondaryGoal,\n  maxDaysPerWeek,\n  maxWorkoutDuration,\n}: {\n  gender: Gender;\n  strengthLevel: ExperienceLevel;\n  speedLevel: ExperienceLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  maxDaysPerWeek: number;\n  maxWorkoutDuration: number;\n}): { suitablePrograms: Program[]; bestMatch: string } => {\n  const suitablePrograms = programs.filter((program) => {\n    const isLevelAppropriate = program.level.includes(strengthLevel);\n    const isGenderAppropriate = program.gender.includes(gender);\n    const meetsPrimaryGoal = program.goal.includes(primaryGoal);\n    const meetsSecondaryGoal = program.goal.includes(secondaryGoal);\n    const isSuitableSchedule = program.daysPerWeek <= maxDaysPerWeek && program.workoutDuration <= maxWorkoutDuration;\n    return isLevelAppropriate && isGenderAppropriate && meetsPrimaryGoal && meetsSecondaryGoal && isSuitableSchedule;\n  });\n  const bestMatch: string = suitablePrograms.reduce<string>((acc, program) => {\n    if (program.name.toLowerCase().includes('vigilante')) {\n      return program.id;\n    }\n    return acc;\n  }, '');\n\n  return { suitablePrograms, bestMatch };\n};\n","import { Center, Heading, HStack, Image, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint, Paragraph } from '../../components/Content';\nimport { FitnessComponents } from './FitnessComponents';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { programs } from '../../domain/programs';\nimport { Destination, ExternalLink, RoutingButton } from '../../utils/routing';\n\nexport default function About() {\n  const { t } = useTranslation();\n  return (\n    <DefaultLayout showLogo>\n      <Paragraph>\n        {t(\n          'The internet is polluted with good and bad training advice, it is overwhelming and hard to know how to get started and how to advance in your fitness journey. This app fixes that, it matches your current level of strength and fitness, along with your lifestyle and goals, to tried and tested training and nutrition protocols focused on the main components of physical fitness:'\n        )}\n      </Paragraph>\n      <FitnessComponents />\n      <Paragraph>\n        {t(\n          'The app has a database of the most popular stregnth and weight lifting programs available for free on the internet that have been proven to work over and over again. These include:'\n        )}\n      </Paragraph>\n      {programs.map(({ id, name, link }) => (\n        <BulletPoint key={id}>\n          <ExternalLink to={link} text={name} />\n        </BulletPoint>\n      ))}\n      <Paragraph>\n        {t(\n          'The app filters them down to your level, preferences and disponibility, and maps out a journey of progression with appropriate conditioning and nutrition added, taking away all the guess work and giving years worth of training to follow. It will set you short term goals for strength, endurance and speed, and as you progress the programming updates and sets you new and more challenging targets. It keeps you progressing in the most optimal way possible and you will see your performance and physique transform to that of a vigilante...'\n        )}\n      </Paragraph>\n      <Center>\n        <Image\n          width={'100%'}\n          height={185}\n          resizeMode={'contain'}\n          alt={'Welcome'}\n          source={require('../../assets/comics/comic1.png')}\n        />\n      </Center>\n      <Paragraph>\n        {t(\n          'Everything is tailored to your goals and preferences to ensure it is enjoyable and sustainable with the aim of getting you stronger, faster and leaner. Sustainability and consistency is the only recipe for success no matter the program you follow.'\n        )}\n      </Paragraph>\n      <Heading size={'sm'}>{t('Example 1')}</Heading>\n      <Paragraph>\n        {t(\n          'As a complete beginner who is overweight (200lbs/~30% BF), has never lifted before and has a sedentary job/lifestyle. Willing and able to workout at most 3 days a week for an hour and is happy keeping it simple with the main goal of being strong and lean, would go through a multi phase programming that cosists of:'\n        )}\n      </Paragraph>\n      <BulletPoint>\n        An initial goal to deadlift and squat bodyweight, bench 1 plate (60kg/135lbs) and do assisted pull ups with 50% bodyweight\n        assist (all for 5 reps). To achieve this we follow the <Text bold>Greyskull LP</Text> routine. Nutrition would be focused\n        around <Text bold>an aggresive cut</Text> (~600 calorie deficit = 2200calories) with ample protein (at least 1g per pound\n        of lean bodyweight = 140g).\n      </BulletPoint>\n      <BulletPoint>\n        With the initial goals met the programming will update and set you new targets of Bench Pressing bodyweight, Overhead\n        pressing 70% of bodyweight, Squating 2 plates (100kg/225lbs) and Deadlifting 1.5x bodyweight, as well as doing unassissted\n        pull ups. The weights will deload and the workout routine will switch to{' '}\n        <Text bold>AthleanX&apos;s Perfect Total Body</Text>. This adds some more volume and improves work capacity and endurance.\n        Nutrition would stay the same unless you have not lost any weight in over 2 weeks, at which point an{' '}\n        <Text bold>additional 200 calorie deficit</Text> is applied.\n      </BulletPoint>\n      <BulletPoint>\n        With the second set of goals met, things will start to get a bit more challenging. The new targets are now to bench press\n        2 plates (100kg/225lbs), overhead press 1 plate (60kg/135lbs) and deadlift 3 plates (140kg/315lbs). If progress is still\n        strong on the AthleanX routine you will remain on it, once you start stalling the app will suggest a deload and switching\n        back to <Text bold>Greyskull LP</Text> in order to make use of double progression focusing on improving those rep maxes on\n        previously done weights for new strength gains. Nutrition <Text bold>moves to maintenance calories</Text> to aid meeting\n        the goals and a metabolic reset from being on a deficit for an extended period of time. You should experience a\n        recomposition effect over the coming weeks.\n      </BulletPoint>\n      <BulletPoint>\n        Moving into stronger intermediate territory, the programming will once again update setting you even more challenging\n        targets along the lines of Squatting 3 plates (140kg/315lbs), Overhead Pressing your bodyweight, Bench Pressin\n        (120kg/265lbs) and Deadlifting 4 plates (180kg/405lbs). To achieve these, programming may change to{' '}\n        <Text bold>Madcow&apos;s 5x5</Text> potentially followed by various 3-day <Text bold>Jim Wendler 5/3/1</Text> templates\n        with the accessory work being tailored your goals in terms of workout duration and weakness areas you want to work on.\n        Nutrition will depend on the new body fat %. You get to chose to get leaner with a moderate 400 calorie deficit or do a\n        lean bulk with a small surplus of 300 calories. The app will usually recommend a <Text bold>moderate cut</Text> if abs are\n        still not visible and one of your goals is leanness.\n      </BulletPoint>\n      <Paragraph>\n        In all phases, each workout would end with either a mile run or a random bodyweight endurance exercise (pushups, inverted\n        rows, jump squats or muscle ups) with a random aim (could be reps for time, reps within a certain time, pyramid reps or\n        reps every minute for 10 minutes). These will also have goals set and tracked such as mile run time, max push ups in a\n        set, etc.\n      </Paragraph>\n      <Paragraph>\n        <Center>\n          <HStack width={'100%'}>\n            <Image\n              width={'50%'}\n              height={185}\n              resizeMode={'contain'}\n              alt={'Welcome'}\n              source={require('../../assets/comics/comic2.png')}\n            />\n            <Image\n              width={'50%'}\n              height={185}\n              resizeMode={'contain'}\n              alt={'Welcome'}\n              source={require('../../assets/comics/comic3.jpeg')}\n            />\n          </HStack>\n        </Center>\n      </Paragraph>\n      <Heading size={'sm'}>{t('Example 2')}</Heading>\n      <Paragraph>\n        As an individual in decent shape, who has been lifting for some time and can already squat and bench their bodyweight for\n        reps and can do pull ups, looking to train 5 or 6 days a week focusing on aesthetics would go through a multi phase\n        programming cosisting of:\n      </Paragraph>\n      <BulletPoint>\n        An initial goal to Bench Press 2 plates (100kg/225lbs), Overhead Press 1 plate (60kg/135lbs) and Deadlift 3 plates\n        (140kg/315lbs). To achieve this you follow <Text bold>PHUL: Power Hypertrophy Upper Lower</Text> working out 4 days a\n        week.\n      </BulletPoint>\n\n      <RoutingButton to={Destination.GetStarted}>Get Started</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { Center, Container, Image, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nconst Headline = ({ text }: { text: string }) => (\n  <Text fontSize={'2xl'} marginBottom={2} fontWeight={500}>\n    {text}\n  </Text>\n);\n\nexport default function Welcome() {\n  const { t } = useTranslation();\n  return (\n    <DefaultLayout showLogo backgroundColor={'secondary.100'}>\n      <Center paddingTop={5}>\n        <Text textAlign={'center'} fontSize={'lg'} marginBottom={5}>\n          {t('The simple, enjoyable and sustainable approach to training.')}\n        </Text>\n        <Headline text={t('Get Stronger,')} />\n        <Headline text={t('Get Faster,')} />\n        <Headline text={t('Get Leaner.')} />\n      </Center>\n      <Center paddingY={5}>\n        <Image width={'100%'} height={320} resizeMode={'contain'} alt={'Welcome'} source={require(`./welcome2.png`)} />\n      </Center>\n      <Center marginY={5}>\n        <Text textAlign={'center'}>\n          <>\n            {t(\n              'This app matches your current level of strength and fitness to tried and tested training and nutrition regimes that are sustainable for your lifestyle and preferences. It sets you short term goals and as you progress the programming updates with new targets and appropriate routines. It keeps you progressing in the most optimal way possible and you will see your physique and performance transform to that of a vigilante...'\n            )}\n            <Container paddingLeft={1}>\n              <Link to={Destination.About} label={t('Tell me more')} />\n            </Container>\n          </>\n        </Text>\n      </Center>\n      <RoutingButton to={Destination.GetStarted}>{t('Get Started')}</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { WeekDay } from '../domain/constants';\n\n// Hard coded week day array as internally represented by javascript, sunday - saturday\nconst DAYS = [\n  WeekDay.Sunday,\n  WeekDay.Monday,\n  WeekDay.Tuesday,\n  WeekDay.Wednesday,\n  WeekDay.Thursday,\n  WeekDay.Friday,\n  WeekDay.Saturday,\n];\n\nexport const getDateOfWeekday = (dayName: WeekDay, date = new Date(), allowPast = true): Date => {\n  const now = date.getDay();\n  // The index for the day you want\n  const day = DAYS.findIndex((item: string) => dayName.toLowerCase() === item.toLowerCase());\n  // diff between desired day of week and now\n  let diff = day - now;\n  diff = diff < 0 && !allowPast ? diff + 7 : diff;\n  // Get the timestamp for the desired day, negative if it has already passed\n  const nextDayTimestamp = date.getTime() + 1000 * 60 * 60 * 24 * diff;\n\n  return new Date(nextDayTimestamp);\n};\n\nexport const addDays = (date: Date, days: number) => {\n  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n};\n\nexport const isDateWeekend = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 6 || dayOfWeek === 0; // 6 = Saturday, 0 = Sunday\n};\n\nexport const isDateConsecutiveDay = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 4 || dayOfWeek === 5; // 4 = Thursday, 5 = Friday\n};\n\nconst isDateInPast = (date: Date) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return date.getTime() < today.getTime();\n};\n\nexport const convertScheduleToWeekdays = (schedule: number[], weekStart: WeekDay): WeekDay[] => {\n  let map: { found: boolean; parts: WeekDay[][] } = { found: false, parts: [[], []] };\n  map = DAYS.reduce((acc, current) => {\n    if (current === weekStart) acc.found = true;\n    acc.found ? acc.parts[1].push(current) : acc.parts[0].push(current);\n    return acc;\n  }, map);\n\n  const week = [...map.parts[1], ...map.parts[0]];\n  return schedule.map((day) => week[day]);\n};\n\nexport const getNextScheduledWeekday = (weeklySchedule: WeekDay[], previousWorkoutDate: Date): WeekDay => {\n  const previousWorkoutDay = DAYS[previousWorkoutDate.getDay()];\n  const previousWorkoutDayIndex = weeklySchedule.findIndex(\n    (item: string) => previousWorkoutDay.toLowerCase() === item.toLowerCase()\n  );\n  const nextWorkoutIndex = previousWorkoutDayIndex + 1 > weeklySchedule.length - 1 ? 0 : previousWorkoutDayIndex + 1;\n  return weeklySchedule[nextWorkoutIndex];\n};\n\nexport const getNextWorkoutDay = (weeklySchedule: number[], weekStart: WeekDay, previousWorkoutDate?: Date): Date => {\n  if (!previousWorkoutDate) {\n    let proposedDate = getDateOfWeekday(weekStart);\n    while (isDateInPast(proposedDate)) {\n      proposedDate = getNextWorkoutDay(weeklySchedule, weekStart, proposedDate);\n    }\n    return proposedDate;\n  }\n\n  const schedule = convertScheduleToWeekdays(weeklySchedule, weekStart);\n  const scheduleDay = getNextScheduledWeekday(schedule, previousWorkoutDate);\n  return getDateOfWeekday(scheduleDay, previousWorkoutDate, false);\n};\n","import {\n  calculateBMI,\n  calculateBMR,\n  calculateMinimumProteinRequirement,\n  calculateTDEE,\n  UnitsType,\n  ActivityLevel,\n  Gender,\n  cmToInches,\n  kgToLbs,\n} from 'fitness-tools';\n\nimport { isDateWeekend } from '../../utils/calendar';\nimport { Goal } from '../constants';\n\nconst AGGRESSIVE_CUT_DEFICIT = -600;\nconst CUT_DEFICIT = -400;\nconst BULK_SURPLUS = 300;\nconst MAX_CALORIES = 2600;\nconst UNDERWEIGHT_BMI = 18.5;\n\nexport enum NutritionType {\n  AggressiveCut = 'Aggressive Cut',\n  Cut = 'Cut',\n  Bulk = 'Lean Bulk',\n  Maintain = 'Maintain',\n}\n\nexport interface NutritionProtocol {\n  type: NutritionType;\n  note?: string;\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  cycleNutrition: boolean;\n  higherCaloriesOnWeekends: boolean;\n  targetCalories: {\n    energyExpenditureModifier: number;\n    trainingDay: number;\n    restDay: number;\n    weekend: number;\n    average: number;\n  };\n  targetProtein: number;\n}\n\nconst getNutritionTypeRecommendation = ({\n  gender,\n  bodyFat,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset,\n  bmi,\n}: {\n  gender: Gender;\n  bodyFat: number;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset: boolean;\n  bmi: number;\n}): { type: NutritionType; reason?: string } => {\n  const largeDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to handle an aggressive deficit while still making gains in strength and muscle mass.';\n  const smallDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to make gains in strength and muscle while on a small deficit.';\n  const metabolicResetMessage =\n    'Given you have been dieting on low or unknown calories for some time without results, it is essential you eat at maintenance for 2-4 weeks.';\n  const lowBMIMessage = 'You are underweight for your height and should focus on adding muscle to your frame.';\n\n  if (bmi < UNDERWEIGHT_BMI && bodyFat > 10) {\n    return { type: NutritionType.Bulk, reason: lowBMIMessage };\n  }\n\n  if (needsMetabolicReset) {\n    return { type: NutritionType.Maintain, reason: metabolicResetMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 20) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 30) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 15) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 20) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (primaryGoal === Goal.Lean) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (secondaryGoal === Goal.Lean && bodyFat >= 15) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (\n    primaryGoal === Goal.Size ||\n    secondaryGoal === Goal.Size ||\n    primaryGoal === Goal.Strength ||\n    secondaryGoal === Goal.Strength\n  ) {\n    return { type: NutritionType.Bulk };\n  }\n\n  return { type: NutritionType.Maintain };\n};\n\nconst getEnergyExpenditureModifier = (goal: NutritionType, preferAggressiveCut: boolean) => {\n  switch (goal) {\n    case NutritionType.AggressiveCut:\n    case NutritionType.Cut:\n      if (preferAggressiveCut) {\n        return AGGRESSIVE_CUT_DEFICIT;\n      }\n      return CUT_DEFICIT;\n    case NutritionType.Bulk:\n      return BULK_SURPLUS;\n    case NutritionType.Maintain:\n    default:\n      return 0;\n  }\n};\n\nconst getTargetCalories = ({\n  tdee,\n  goal,\n  cycleNutrition,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends,\n  preferAggressiveCut,\n}: {\n  tdee: number;\n  goal: NutritionType;\n  cycleNutrition: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends: boolean;\n  preferAggressiveCut: boolean;\n}): { trainingDay: number; restDay: number; weekend: number; average: number; energyExpenditureModifier: number } => {\n  const isCut = goal === NutritionType.Cut || goal === NutritionType.AggressiveCut;\n\n  const modifier = getEnergyExpenditureModifier(goal, preferAggressiveCut);\n  const average = tdee + modifier;\n\n  let workoutdaysTarget = average;\n  let restdaysTarget = average;\n  let weekendTarget = average;\n\n  if (cycleNutrition) {\n    workoutdaysTarget = average + Math.abs(modifier);\n    restdaysTarget = average - Math.abs((modifier * numberOfWorkoutDays!) / (7 - numberOfWorkoutDays!));\n    weekendTarget = restdaysTarget;\n  }\n\n  if (higherCaloriesOnWeekends) {\n    weekendTarget = weekendTarget + 500;\n    workoutdaysTarget = workoutdaysTarget - 200;\n    restdaysTarget = restdaysTarget - 200;\n  }\n\n  if (isCut && workoutdaysTarget > MAX_CALORIES) {\n    workoutdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && restdaysTarget > MAX_CALORIES) {\n    restdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && weekendTarget > MAX_CALORIES) {\n    weekendTarget = MAX_CALORIES;\n  }\n\n  return {\n    trainingDay: workoutdaysTarget,\n    restDay: restdaysTarget,\n    weekend: weekendTarget,\n    average,\n    energyExpenditureModifier: modifier,\n  };\n};\n\nexport const getNutritionRecommendation = ({\n  gender,\n  weight,\n  height,\n  age,\n  unitsType,\n  bodyFat,\n  activityLevel,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset = false,\n  cycleNutrition = false,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends = false,\n  preferAggressiveCut = false,\n}: {\n  gender: Gender;\n  weight: number;\n  height: number;\n  age: number;\n  unitsType: UnitsType;\n  bodyFat: number;\n  activityLevel: ActivityLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset?: boolean;\n  cycleNutrition?: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends?: boolean;\n  preferAggressiveCut?: boolean;\n}): NutritionProtocol => {\n  const calcWeight = unitsType === UnitsType.Metric ? kgToLbs(weight) : weight;\n  const calcHeight = unitsType === UnitsType.Metric ? cmToInches(height) : height;\n\n  const bmi = calculateBMI(calcWeight, calcHeight);\n  const bmr = calculateBMR({ heightInInches: calcHeight, weightInLbs: calcWeight, gender, bodyFat, age });\n  const tdee = calculateTDEE(activityLevel, bmr);\n  const targetProtein = calculateMinimumProteinRequirement(calcWeight, bodyFat);\n\n  const { type, reason } = getNutritionTypeRecommendation({\n    gender,\n    bodyFat,\n    primaryGoal,\n    secondaryGoal,\n    needsMetabolicReset,\n    bmi,\n  });\n\n  const targetCalories = getTargetCalories({\n    tdee,\n    goal: type,\n    cycleNutrition: cycleNutrition ?? false,\n    numberOfWorkoutDays,\n    higherCaloriesOnWeekends,\n    preferAggressiveCut,\n  });\n\n  return {\n    type,\n    note: reason,\n    bmi,\n    bmr,\n    tdee,\n    targetCalories,\n    targetProtein,\n    cycleNutrition,\n    higherCaloriesOnWeekends,\n  };\n};\n\nexport const getTodaysCalories = (recommendedNutrition: NutritionProtocol, isWorkoutDay: boolean) => {\n  const { targetCalories } = recommendedNutrition;\n  const isWeekend = isDateWeekend();\n  return (\n    (isWeekend ? targetCalories.weekend : isWorkoutDay ? targetCalories.trainingDay : targetCalories.restDay) ??\n    targetCalories.average\n  );\n};\n","import { ExperienceLevel, Gender } from '../constants';\n\nexport interface SpeedMetrics {\n  mileRun: number;\n  fiveKmRun: number;\n}\n\nconst speedStandards: {\n  [key in Gender]: {\n    [key in ExperienceLevel]: SpeedMetrics;\n  };\n} = {\n  [Gender.Male]: {\n    [ExperienceLevel.Beginner]: { mileRun: 9.5, fiveKmRun: 31.5 },\n    [ExperienceLevel.Novice]: { mileRun: 7.75, fiveKmRun: 26.33 },\n    [ExperienceLevel.Intermediate]: { mileRun: 6.5, fiveKmRun: 22.5 },\n    [ExperienceLevel.Advanced]: { mileRun: 5.75, fiveKmRun: 19.75 },\n    [ExperienceLevel.Vigilante]: { mileRun: 5.15, fiveKmRun: 17.75 },\n  },\n  [Gender.Female]: {\n    [ExperienceLevel.Beginner]: { mileRun: 10.75, fiveKmRun: 35.5 },\n    [ExperienceLevel.Novice]: { mileRun: 9, fiveKmRun: 30 },\n    [ExperienceLevel.Intermediate]: { mileRun: 7.75, fiveKmRun: 26.15 },\n    [ExperienceLevel.Advanced]: { mileRun: 6.8, fiveKmRun: 23 },\n    [ExperienceLevel.Vigilante]: { mileRun: 6.15, fiveKmRun: 20.75 },\n  },\n};\n\nexport const getSpeedStandards = (gender: Gender): { [key in ExperienceLevel]?: SpeedMetrics } => {\n  return speedStandards[gender];\n};\n\nexport const getSpeedLevel = (gender: Gender, mileRunTime: number, fiveKmRun: number) => {\n  const runStandards = getSpeedStandards(gender);\n  return Object.keys(runStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n    const levelStandards = runStandards[<ExperienceLevel>current]!;\n\n    const meetsMileRunStandard = mileRunTime <= levelStandards.mileRun;\n    const meetsFiveKmStandard = fiveKmRun <= levelStandards.fiveKmRun;\n\n    if (meetsMileRunStandard && meetsFiveKmStandard) {\n      return <ExperienceLevel>current;\n    }\n\n    return acc;\n  }, ExperienceLevel.Beginner);\n};\n","import { calculateRepMaxes, Gender, lbsToKg, UnitsType } from 'fitness-tools';\n\nimport { ExperienceLevel } from '../constants';\nimport { Exercise } from '../exercises';\nimport { Lifts } from '../trainee';\n\nexport const standardExercises = [\n  Exercise.Bench,\n  Exercise.Squat,\n  Exercise.Press,\n  Exercise.Deadlift,\n  Exercise.Row,\n  Exercise.InclineBench,\n  Exercise.Curl,\n];\n\nexport interface LiftMetrics {\n  oneRepMax?: number;\n  threeRepMax?: number;\n  fiveRepMax?: number;\n  eightRepMax?: number;\n  tenRepMax?: number;\n  twelveRepMax?: number;\n  fithteenRepMax?: number;\n  twentyRepMax?: number;\n  ratio?: number;\n  reps?: number;\n}\n\nexport type StrengthMetrics = {\n  [key in Exercise]?: LiftMetrics;\n};\n\nconst strengthStandards: {\n  [key in Gender]: {\n    [key in Exercise]?: {\n      [key in ExperienceLevel]: LiftMetrics;\n    };\n  };\n} = {\n  [Gender.Male]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Novice]: { ratio: 1.25, oneRepMax: 93 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.5, oneRepMax: 130 },\n      [ExperienceLevel.Advanced]: { ratio: 2.25, oneRepMax: 173 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.75, oneRepMax: 219 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 1, oneRepMax: 78 },\n      [ExperienceLevel.Novice]: { ratio: 1.5, oneRepMax: 112 },\n      [ExperienceLevel.Intermediate]: { ratio: 2, oneRepMax: 152 },\n      [ExperienceLevel.Advanced]: { ratio: 2.5, oneRepMax: 200 },\n      [ExperienceLevel.Vigilante]: { ratio: 3, oneRepMax: 250 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 47 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 70 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 98 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 132 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 169 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 44 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 89 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 118 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 149 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.4, oneRepMax: 31 },\n      [ExperienceLevel.Novice]: { ratio: 0.55, oneRepMax: 46 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.8, oneRepMax: 64 },\n      [ExperienceLevel.Advanced]: { ratio: 1.05, oneRepMax: 86 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.35, oneRepMax: 109 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 41 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 85 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 115 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 147 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 30 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.6, oneRepMax: 37 },\n      [ExperienceLevel.Advanced]: { ratio: 0.85, oneRepMax: 68 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.15, oneRepMax: 91 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -13 },\n      [ExperienceLevel.Novice]: { reps: 5, oneRepMax: +8 },\n      [ExperienceLevel.Intermediate]: { reps: 15, oneRepMax: +34 },\n      [ExperienceLevel.Advanced]: { reps: 25, oneRepMax: +63 },\n      [ExperienceLevel.Vigilante]: { reps: 37, oneRepMax: +93 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -8 },\n      [ExperienceLevel.Novice]: { reps: 8, oneRepMax: +18 },\n      [ExperienceLevel.Intermediate]: { reps: 20, oneRepMax: +50 },\n      [ExperienceLevel.Advanced]: { reps: 34, oneRepMax: +86 },\n      [ExperienceLevel.Vigilante]: { reps: 49, oneRepMax: +125 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 18 },\n      [ExperienceLevel.Intermediate]: { reps: 41 },\n      [ExperienceLevel.Advanced]: { reps: 68 },\n      [ExperienceLevel.Vigilante]: { reps: 99 },\n    },\n  },\n  [Gender.Female]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 30 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 73 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 103 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 136 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 38 },\n      [ExperienceLevel.Novice]: { ratio: 1, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 87 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 120 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.5, oneRepMax: 157 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.5, oneRepMax: 31 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.75, oneRepMax: 51 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 74 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.5, oneRepMax: 101 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 13 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 44 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 67 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.4, oneRepMax: 93 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Novice]: { ratio: 0.35, oneRepMax: 23 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.55, oneRepMax: 34 },\n      [ExperienceLevel.Advanced]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Vigilante]: { ratio: 1, oneRepMax: 64 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 15 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 41 },\n      [ExperienceLevel.Advanced]: { ratio: 0.9, oneRepMax: 59 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.2, oneRepMax: 79 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.1, oneRepMax: 6 },\n      [ExperienceLevel.Novice]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.4, oneRepMax: 25 },\n      [ExperienceLevel.Advanced]: { ratio: 0.6, oneRepMax: 39 },\n      [ExperienceLevel.Vigilante]: { ratio: 0.85, oneRepMax: 55 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -22 },\n      [ExperienceLevel.Novice]: { reps: 3, oneRepMax: -8 },\n      [ExperienceLevel.Intermediate]: { reps: 6, oneRepMax: 10 },\n      [ExperienceLevel.Advanced]: { reps: 15, oneRepMax: 30 },\n      [ExperienceLevel.Vigilante]: { reps: 26, oneRepMax: 51 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -20 },\n      [ExperienceLevel.Novice]: { reps: 1, oneRepMax: -5 },\n      [ExperienceLevel.Intermediate]: { reps: 10, oneRepMax: +19 },\n      [ExperienceLevel.Advanced]: { reps: 22, oneRepMax: +45 },\n      [ExperienceLevel.Vigilante]: { reps: 35, oneRepMax: +72 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 5 },\n      [ExperienceLevel.Intermediate]: { reps: 19 },\n      [ExperienceLevel.Advanced]: { reps: 37 },\n      [ExperienceLevel.Vigilante]: { reps: 56 },\n    },\n  },\n};\n\nexport const getLiftStandards = (gender: Gender, exercise: Exercise): { [key in ExperienceLevel]?: LiftMetrics } => {\n  const genderStandards = strengthStandards[gender];\n  const liftStandards = genderStandards[exercise]!;\n  return liftStandards;\n};\n\nexport const getLiftLevel = (\n  gender: Gender,\n  lift: Exercise,\n  { oneRepMax, ratio, reps }: LiftMetrics,\n  unitsType = UnitsType.Metric\n): ExperienceLevel => {\n  const liftStandards = getLiftStandards(gender, lift);\n  return (\n    liftStandards &&\n    Object.keys(liftStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n      const levelStandards = liftStandards[<ExperienceLevel>current]!;\n\n      const oneRepMaxForComparison = oneRepMax && unitsType === UnitsType.Metric ? oneRepMax : lbsToKg(oneRepMax!);\n      const meetsOneRepMaxBasedStandard = levelStandards.oneRepMax && oneRepMaxForComparison >= levelStandards.oneRepMax;\n      const meetsRatioBasedStandard = ratio && levelStandards.ratio && ratio >= levelStandards.ratio;\n\n      const meetsWeightBasedStandard = meetsRatioBasedStandard || meetsOneRepMaxBasedStandard;\n      const meetsRepBasedStandard = reps && levelStandards.reps && reps >= levelStandards.reps;\n\n      if (meetsWeightBasedStandard || meetsRepBasedStandard) {\n        return <ExperienceLevel>current;\n      }\n\n      return acc;\n    }, ExperienceLevel.Beginner)\n  );\n};\n\nexport const getStrengthLevel = (gender: Gender, everLifted: boolean, strengthStandards: StrengthMetrics): ExperienceLevel => {\n  if (!everLifted) {\n    return ExperienceLevel.Beginner;\n  }\n\n  const level = standardExercises.reduce<ExperienceLevel | undefined>((accLevel, lift) => {\n    const liftStandards = strengthStandards[lift as keyof StrengthMetrics]!;\n    const liftLevel = getLiftLevel(Gender[gender], lift as Exercise, {\n      oneRepMax: liftStandards.oneRepMax,\n      ratio: liftStandards.ratio,\n      reps: liftStandards.reps,\n    });\n    const isLowerStandard =\n      accLevel && Object.values(ExperienceLevel).indexOf(liftLevel) < Object.values(ExperienceLevel).indexOf(accLevel);\n\n    if (liftLevel && (!accLevel || isLowerStandard)) {\n      return liftLevel;\n    }\n\n    return accLevel;\n  }, undefined);\n\n  return level ?? ExperienceLevel.Beginner;\n};\n\nexport const calculateStrengthStandards = (weight: number, lifts: Lifts): StrengthMetrics =>\n  standardExercises.reduce((acc, key: string) => {\n    const lift = lifts?.[key as keyof Lifts];\n    if (!lift) return acc;\n\n    const repMaxes = calculateRepMaxes(lift.weight, lift.reps);\n    return {\n      ...acc,\n      [key]: {\n        ...repMaxes,\n        ratio: Math.round((repMaxes.oneRepMax! / weight) * 100) / 100,\n      },\n    };\n  }, {});\n","import { ActivityLevel, DietType, ExperienceLevel, Gender, Goal, UnitsType, WeekDay } from '../constants';\nimport { Exercise } from '../exercises';\nimport { getNutritionRecommendation, NutritionType } from '../nutrition';\nimport { getProgramRecommendations } from '../programs';\nimport { calculateStrengthStandards, getSpeedLevel, getStrengthLevel, SpeedMetrics, StrengthMetrics } from '../standards';\nimport { getNextLiftTargets, getNextSpeedTargets } from './targets';\n\nexport interface Trainee {\n  preferredUnitsType: keyof typeof UnitsType;\n\n  gender: keyof typeof Gender;\n  age: number;\n  weight: number;\n  height: number;\n  waist: number;\n  bodyFat: number;\n\n  bestMileRunTime: number;\n  bestfiveKmRunTime: number;\n  maxPushUps: number;\n  maxPullUps: number;\n  hasLifted: boolean;\n  currentLifts: Lifts;\n\n  activityLevel: keyof typeof ActivityLevel;\n  primaryGoal: keyof typeof Goal;\n  secondaryGoal: keyof typeof Goal;\n\n  preferredDietType: keyof typeof DietType;\n  preferredWeekStart: keyof typeof WeekDay;\n  preferredNumberOfWorkoutsPerWeek: number;\n  preferredWorkoutDuration: number;\n  preferredWorkoutDays: Array<keyof typeof WeekDay>;\n  prefersProgramHoping: boolean;\n  prefersMinimalLegs: boolean;\n\n  needsMetabolicReset: boolean;\n  prefersCycledNutrition: boolean;\n  prefersHigherCaloriesOnWeekends: boolean;\n  prefersAggressiveCut: boolean;\n\n  preferredBarbellIncrement: number;\n  preferredBarbellDecrement: number;\n  preferredDumbbellIncrement: number;\n  preferredDumbbellDecrement: number;\n}\n\nexport type LiftAttempt = { weight: number; reps: number; targetReps?: number; fails?: number };\n\nexport type Lifts = {\n  [key in Exercise]?: LiftAttempt;\n};\n\nexport interface TraineeMetrics {\n  strengthMetrics: StrengthMetrics;\n  strengthLevel: ExperienceLevel;\n  speedMetrics: SpeedMetrics;\n  speedLevel: ExperienceLevel;\n}\n\nexport const getTraineeMetrics = (trainee: Trainee): TraineeMetrics => {\n  const { gender, weight, currentLifts, hasLifted, bestMileRunTime, bestfiveKmRunTime } = trainee;\n\n  const strengthMetrics = calculateStrengthStandards(weight, currentLifts);\n  const strengthLevel = getStrengthLevel(Gender[gender], hasLifted, strengthMetrics);\n\n  const speedMetrics: SpeedMetrics = { mileRun: bestMileRunTime, fiveKmRun: bestfiveKmRunTime };\n  const speedLevel = getSpeedLevel(Gender[gender], bestMileRunTime, bestfiveKmRunTime);\n\n  return { strengthMetrics, strengthLevel, speedLevel, speedMetrics };\n};\n\nexport const getTraineeRecommendations = (trainee: Trainee, traineeMetrics: TraineeMetrics) => {\n  const {\n    gender,\n    primaryGoal,\n    secondaryGoal,\n    preferredNumberOfWorkoutsPerWeek,\n    preferredWorkoutDuration,\n    bodyFat,\n    preferredUnitsType,\n    weight,\n    height,\n    age,\n    activityLevel,\n    needsMetabolicReset,\n    prefersHigherCaloriesOnWeekends,\n    prefersCycledNutrition,\n    prefersAggressiveCut,\n  } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n\n  const recommendedPrograms = getProgramRecommendations({\n    gender: Gender[gender],\n    strengthLevel: strengthLevel!,\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    maxDaysPerWeek: preferredNumberOfWorkoutsPerWeek,\n    maxWorkoutDuration: preferredWorkoutDuration,\n    speedLevel: speedLevel!,\n  });\n\n  const recommendedNutrition = getNutritionRecommendation({\n    gender: Gender[gender],\n    weight: weight,\n    height: height,\n    age: age,\n    unitsType: UnitsType[preferredUnitsType],\n    bodyFat: bodyFat,\n    activityLevel: ActivityLevel[activityLevel],\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    needsMetabolicReset: needsMetabolicReset,\n    higherCaloriesOnWeekends: prefersHigherCaloriesOnWeekends,\n    cycleNutrition: prefersCycledNutrition,\n    numberOfWorkoutDays: preferredNumberOfWorkoutsPerWeek, // @TODO should be the selected program\n    preferAggressiveCut: prefersAggressiveCut,\n  });\n\n  const speedTargets = speedMetrics && getNextSpeedTargets(Gender[gender], speedMetrics);\n\n  const liftTargets = getNextLiftTargets(Gender[gender], strengthMetrics, weight);\n\n  const bodyFatTarget =\n    bodyFat > 10 && recommendedNutrition && [NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type)\n      ? bodyFat - 5\n      : undefined;\n\n  return { bodyFatTarget, liftTargets, speedTargets, recommendedNutrition, recommendedPrograms };\n};\n","import { calculateFiveRepMax } from 'fitness-tools';\n\nimport { ExperienceLevel, Gender } from '../constants';\nimport { Exercise } from '../exercises';\nimport { getLiftStandards, getSpeedStandards, LiftMetrics, SpeedMetrics, StrengthMetrics } from '../standards';\n\nexport const getNextSpeedTargets = (gender: Gender, speedMetrics: SpeedMetrics): SpeedMetrics => {\n  const standards = getSpeedStandards(gender);\n  const mileRun = speedMetrics.mileRun ? speedMetrics.mileRun - 0.5 : standards[ExperienceLevel.Beginner]!.mileRun;\n  const fiveKmRun = speedMetrics.fiveKmRun ? speedMetrics.fiveKmRun - 1.5 : standards[ExperienceLevel.Beginner]!.fiveKmRun;\n\n  return { mileRun, fiveKmRun };\n};\n\nexport const getNextLiftTargets = (gender: Gender, lifterStandards: StrengthMetrics, weight: number): StrengthMetrics => {\n  const getLiftTarget = (exercise: Exercise) => {\n    const standards = getLiftStandards(gender, exercise);\n    const currentLift = lifterStandards[exercise];\n\n    if (!currentLift) {\n      const levelStandard = standards[ExperienceLevel.Beginner]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (levelRatio < levelOneRepMax) {\n        return { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n      } else {\n        return { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n      }\n    }\n\n    let target: LiftMetrics = {\n      oneRepMax: currentLift.oneRepMax! + 10,\n      fiveRepMax: calculateFiveRepMax(currentLift.oneRepMax! + 10),\n    };\n\n    const levels = Object.keys(standards);\n    for (const level of levels) {\n      const levelStandard = standards[level as keyof typeof standards]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (\n        levelOneRepMax < levelRatio &&\n        levelOneRepMax > currentLift.oneRepMax! &&\n        levelOneRepMax - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n        break;\n      } else if (\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n        break;\n      }\n    }\n\n    return target;\n  };\n\n  return {\n    [Exercise.Bench]: getLiftTarget(Exercise.Bench),\n    [Exercise.Squat]: getLiftTarget(Exercise.Squat),\n    [Exercise.Deadlift]: getLiftTarget(Exercise.Deadlift),\n    [Exercise.Press]: getLiftTarget(Exercise.Press),\n    [Exercise.Row]: getLiftTarget(Exercise.Row),\n  };\n};\n","import dayjs from 'dayjs';\n\nimport { getDateOfWeekday, getNextWorkoutDay } from '../../utils/calendar';\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { Program, Workout } from '../programs/interfaces';\n\nexport interface ScheduledWorkout extends Workout {\n  id: number;\n  date: Date;\n  status?: 'pending' | 'done' | 'in progress';\n}\n\nexport type ScheduleAction =\n  | 'create'\n  | 'start_workout'\n  | 'end_workout'\n  | 'change_set_weight'\n  | 'change_set_reps'\n  | 'complete_set';\n\ntype CreateSchedulePayload = { program: Program; experienceLevel: ExperienceLevel; weekStart: WeekDay };\ntype UpdateScheduleWorkoutPayload = { id: number; exerciseId: number; setId: number; value: number };\ntype CompleteSetPayload = UpdateScheduleWorkoutPayload & { isWarmup: boolean; recommendedWeight: number };\n\nexport const scheduleReducer = (\n  schedule: ScheduledWorkout[],\n  action: {\n    type: ScheduleAction;\n    payload: CreateSchedulePayload | UpdateScheduleWorkoutPayload | CompleteSetPayload;\n  }\n) => {\n  const { type, payload } = action;\n\n  if (type === 'create') {\n    const { program, experienceLevel, weekStart } = <CreateSchedulePayload>payload;\n    return createSchedule(program, experienceLevel, weekStart);\n  }\n\n  const newSchedule = [...schedule];\n  const { id, exerciseId, setId, value } = <UpdateScheduleWorkoutPayload>payload;\n\n  switch (type) {\n    case 'start_workout':\n      newSchedule[id].status = 'in progress';\n      return newSchedule;\n    case 'end_workout':\n      markAllSetsAsComplete(schedule, id);\n      newSchedule[id].status = 'done';\n      return newSchedule;\n    case 'change_set_weight':\n      newSchedule[id].routine[exerciseId].sets[setId].weight = value;\n      return newSchedule;\n    case 'change_set_reps':\n      newSchedule[id].routine[exerciseId].sets[setId].reps = value;\n      return newSchedule;\n    case 'complete_set':\n      const { isWarmup, recommendedWeight } = <CompleteSetPayload>payload;\n      updateWorkoutWithCompletedSet(newSchedule, id, exerciseId, setId, isWarmup, recommendedWeight);\n      return newSchedule;\n    default:\n      throw new Error();\n  }\n};\n\nexport const createSchedule = (program: Program, experienceLevel: ExperienceLevel, weekStart: WeekDay = WeekDay.Monday) => {\n  // @TODO configurable per program, A/B splits should can be false\n  const firstWorkoutMustBeOnWeekStart = false;\n  const workouts = program.workouts(experienceLevel);\n  let totalWorkouts: number = program.daysPerWeek * program.duration;\n  let workoutWeeklyIndex = 0;\n  let date: Date | undefined = firstWorkoutMustBeOnWeekStart\n    ? getDateOfWeekday(weekStart, new Date(), false)\n    : getNextWorkoutDay(program.weeklySchedule, weekStart);\n\n  const schedule: ScheduledWorkout[] = [];\n  while (totalWorkouts > 0) {\n    schedule.push({\n      id: schedule.length,\n      date,\n      status: 'pending',\n      ...workouts[workoutWeeklyIndex],\n    });\n    date = getNextWorkoutDay(program.weeklySchedule, weekStart, date);\n    totalWorkouts--;\n    workoutWeeklyIndex++;\n    if (workoutWeeklyIndex === workouts.length) {\n      workoutWeeklyIndex = 0;\n    }\n  }\n\n  return schedule;\n};\n\nexport const getTodaysWorkout = (schedule: ScheduledWorkout[]): ScheduledWorkout | undefined => {\n  return schedule.find((item) => new Date(item.date).setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));\n};\n\nexport const getScheduledForThisWeek = (schedule: ScheduledWorkout[]): ScheduledWorkout[] => {\n  return schedule.filter((entry) => dayjs().isSame(entry.date, 'week')) || [];\n};\n\nexport const markAllSetsAsComplete = (schedule: ScheduledWorkout[], workoutId: number): void => {\n  schedule[workoutId].routine.forEach((exercise, exerciseId) => {\n    exercise.warmup?.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, true));\n    exercise.sets.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, false));\n  });\n};\n\nexport const updateWorkoutWithCompletedSet = (\n  schedule: ScheduledWorkout[],\n  workoutId: number,\n  exerciseId: number,\n  setId: number,\n  isWarmup: boolean,\n  recommendedWeight?: number\n): void => {\n  if (isWarmup) {\n    const warmup = schedule[workoutId].routine[exerciseId].warmup![setId];\n    if (!warmup.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].warmup![setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].warmup![setId].status = 'done';\n  } else {\n    const set = schedule[workoutId].routine[exerciseId].sets[setId];\n    if (!set.reps) {\n      schedule[workoutId].routine[exerciseId].sets[setId].reps = set.maxReps ?? set.targetReps;\n    }\n    if (!set.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].sets[setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].sets[setId].status = 'done';\n  }\n};\n","import { useStoredReducer, useStoredState } from 'react-native-use-stored-state';\n\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { getProgram } from '../programs';\nimport { getTodaysWorkout, ScheduleAction, ScheduledWorkout, scheduleReducer } from './schedule';\n\nimport { Trainee } from './trainee';\n\nexport type UpdateTraineeFn = <K extends keyof Trainee>(field: K, value: Trainee[K]) => void;\n\nexport type TraineeReducerAction = 'set_data';\n\nexport const traineeReducer = (\n  formData: Trainee,\n  action: { type: TraineeReducerAction; payload: { field: keyof Trainee; value: string | number | boolean } }\n) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'set_data':\n      const { field, value } = payload;\n      return { ...formData, [field]: value };\n    default:\n      throw new Error();\n  }\n};\n\nconst defaultTrainee = <Trainee>{\n  preferredUnitsType: 'Metric',\n  gender: 'Male',\n  activityLevel: 'LightlyActive',\n  bodyFat: 20,\n  primaryGoal: 'Lean',\n  secondaryGoal: 'Strength',\n  preferredDietType: 'Balanced',\n  preferredWeekStart: 'Monday',\n  preferredNumberOfWorkoutsPerWeek: 3,\n  preferredWorkoutDuration: 60,\n  preferredWorkoutDays: ['Monday', 'Wednesday', 'Friday'],\n  prefersProgramHoping: false,\n  prefersMinimalLegs: false,\n  prefersCycledNutrition: false,\n  prefersHigherCaloriesOnWeekends: false,\n  prefersAggressiveCut: false,\n  preferredBarbellIncrement: 2.5,\n  preferredBarbellDecrement: 10,\n  preferredDumbbellIncrement: 2,\n  preferredDumbbellDecrement: 15,\n};\n\nexport const useTrainee = () => {\n  const [trainee, dispatch, traineeLoaded, resetTrainee] = useStoredReducer<Trainee, TraineeReducerAction>(\n    'TRAINEE_1.0.1',\n    traineeReducer,\n    defaultTrainee\n  );\n\n  const updateTrainee: UpdateTraineeFn = (field, value) => {\n    dispatch({ type: 'set_data', payload: { field, value } });\n  };\n\n  return { trainee, updateTrainee, traineeLoaded, resetTrainee };\n};\n\nexport const useActiveProgram = () => {\n  const [activeProgram, setActiveProgram, activeProgramLoaded, unsetIsActive] = useStoredState<string>('ACTIVE_PROGRAM_1.0.0');\n  const [schedule, updateSchedule, scheduleLoaded, unsetSchedule] = useStoredReducer<ScheduledWorkout[], ScheduleAction>(\n    'ACTIVE_SCHEDULE_1.0.0',\n    scheduleReducer\n  );\n\n  const program = activeProgram ? getProgram(activeProgram) : undefined;\n  const todaysWorkout = schedule ? getTodaysWorkout(schedule) : undefined;\n\n  const initialiseProgram = (id: string, experienceLevel: ExperienceLevel, weekStart: WeekDay) => {\n    updateSchedule({ type: 'create', payload: { program: getProgram(id), experienceLevel, weekStart } });\n    setActiveProgram(id);\n  };\n\n  const resetProgram = () => {\n    unsetIsActive();\n    unsetSchedule();\n  };\n\n  return {\n    activeProgramLoaded: scheduleLoaded && activeProgramLoaded,\n    active: !!program,\n    schedule,\n    updateSchedule,\n    program,\n    initialiseProgram,\n    todaysWorkout,\n    resetProgram,\n  };\n};\n","import { useStoredState } from 'react-native-use-stored-state';\n\nimport { ScheduledWorkout } from './schedule';\n\nexport interface LoggedWorkout extends ScheduledWorkout {\n  datePerformed: Date;\n  program: string;\n}\n\nexport const useLog = () => {\n  const [workoutLog = [], setWorkoutLog, workoutLogLoaded, removeWorkoutLog] = useStoredState<LoggedWorkout[]>('LOG_WORKOUTS');\n\n  const logWorkout = (workout: ScheduledWorkout, program: string) => {\n    setWorkoutLog([\n      { ...workout, datePerformed: new Date(), program },\n      // spread at the end to force reverse order\n      ...(workoutLog ?? []),\n    ]);\n  };\n\n  const resetLog = () => {\n    removeWorkoutLog();\n  };\n\n  return {\n    logLoaded: workoutLogLoaded,\n    workoutLog,\n    logWorkout,\n    resetLog,\n  };\n};\n","import { Box, HStack, Heading, Text, useTheme } from 'native-base';\n\nexport const DashboardHeading = ({ heading }: { heading: string }) => (\n  <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n    {heading}\n  </Heading>\n);\n\nexport const DashboardCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  const { colors } = useTheme();\n  return (\n    <Box marginY={2}>\n      {heading && <DashboardHeading heading={heading} />}\n      <Box padding={3} rounded={'lg'} backgroundColor={colors.white}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport const DashboardLabel = ({ children }: { children: React.ReactNode }) => <Text bold>{children}</Text>;\n\nexport const DashboardDetail = ({ label, value }: { label: string; value: string | number }) => (\n  <HStack paddingY={1} justifyContent={'space-between'} alignItems={'center'}>\n    <DashboardLabel>{label}:</DashboardLabel>\n    <Text>{value}</Text>\n  </HStack>\n);\n","import { Checkbox, HStack, Icon, Text } from 'native-base';\nimport RNPickerSelect from 'react-native-picker-select';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\ntype StringEnum = { [key: string]: string };\n\nexport const Select = ({\n  onValueChange,\n  selectedValue,\n  items,\n  width = 200,\n  textAlign = 'right',\n  border = false,\n}: {\n  onValueChange: (value: string) => void;\n  selectedValue: string | number | symbol;\n  items: { label: string; value: string | number }[];\n  width?: number | string;\n  textAlign?: 'right' | 'left' | 'center';\n  border?: boolean;\n}) => {\n  return (\n    <RNPickerSelect\n      style={{\n        inputWeb: { fontSize: 11, padding: 4, paddingRight: 10, borderWidth: border ? 1 : 0, textAlign },\n        inputIOS: {\n          width,\n          fontSize: 11,\n          padding: 6,\n          paddingRight: 20,\n          borderWidth: border ? 1 : 0,\n          borderColor: 'lightgray',\n          borderRadius: 3,\n          textAlign,\n        },\n        inputAndroid: { fontSize: 11, padding: 4, paddingRight: 20, textAlign },\n        iconContainer: {\n          paddingTop: 4,\n          paddingRight: 2,\n        },\n      }}\n      fixAndroidTouchableBug={true}\n      onValueChange={(value) => onValueChange(value)}\n      value={selectedValue || ''}\n      items={items}\n      // @ts-expect-error ignore\n      Icon={() => <Icon as={MaterialCommunityIcons} name={'chevron-down'} size={'sm'} />}\n    />\n  );\n};\n\nexport const EnumSelect = <E extends StringEnum>({\n  Enum,\n  selectedValue,\n  onValueChange,\n}: {\n  Enum: E;\n  selectedValue: keyof E | undefined;\n  onValueChange: (newValue: keyof E) => void;\n}) => {\n  const items = Object.keys(Enum).map((key) => ({ label: Enum[key], value: key }));\n  return (\n    <Select\n      onValueChange={(value: string) => onValueChange(value as keyof E)}\n      selectedValue={selectedValue ?? ''}\n      items={items}\n    />\n  );\n};\n\nexport const EnumMultiSelect = <E extends StringEnum>({\n  Enum,\n  selectedValues,\n  onChange,\n  accessibilityLabel,\n}: {\n  Enum: E;\n  selectedValues: Array<keyof E>;\n  onChange: (newValues: Array<keyof E>) => void;\n  accessibilityLabel: string;\n}) => (\n  <Checkbox.Group\n    defaultValue={(selectedValues ?? []) as string[]}\n    accessibilityLabel={accessibilityLabel ?? ''}\n    onChange={(values) => {\n      onChange((values || []) as Array<keyof E>);\n    }}\n  >\n    <HStack space={2} flexWrap={'wrap'}>\n      {Object.keys(Enum).map((key: string) => (\n        <Checkbox key={key} value={key} my=\"1\" size={'sm'}>\n          <Text fontSize={'xs'}>{Enum[key]}</Text>\n        </Checkbox>\n      ))}\n    </HStack>\n  </Checkbox.Group>\n);\n","import { Box, HStack, VStack } from 'native-base';\n\nimport { DashboardCard } from '../Dashboards';\n\nexport * from './Select';\n\nexport const FormCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  return <DashboardCard heading={heading}>{children}</DashboardCard>;\n};\n\nexport const InlineField = ({ children, allowWrap = false }: { children: React.ReactNode; allowWrap?: boolean }) => (\n  <HStack paddingBottom={1} justifyContent={'space-between'} alignItems={'center'} flexWrap={allowWrap ? 'wrap' : 'nowrap'}>\n    {children}\n  </HStack>\n);\n\nexport const StackedField = ({ children }: { children: React.ReactNode }) => <VStack paddingBottom={1}>{children}</VStack>;\n\nexport const BottomButtonsBox = ({ children }: { children: React.ReactNode }) => (\n  <Box marginTop={'auto'} marginBottom={2}>\n    {children}\n  </Box>\n);\n","import { HStack, Image, Radio, VStack } from 'native-base';\nimport { ImageSourcePropType } from 'react-native';\nimport { Gender } from '../../../domain/constants';\n\nconst BodyFatImageMap: {\n  [key in Gender]: { [key: number]: ImageSourcePropType };\n} = {\n  [Gender.Male]: {\n    10: require('./Male10.png'),\n    15: require('./Male15.png'),\n    20: require('./Male20.png'),\n    25: require('./Male25.png'),\n    30: require('./Male30.png'),\n  },\n  [Gender.Female]: {\n    10: require('./Female10.png'),\n    15: require('./Female15.png'),\n    20: require('./Female20.png'),\n    25: require('./Female25.png'),\n    30: require('./Female30.png'),\n  },\n};\n\nexport const BodyFatSelector = ({\n  gender,\n  bodyFat,\n  setBodyFat,\n}: {\n  gender: keyof typeof Gender;\n  bodyFat: number;\n  setBodyFat: (newvalue: number) => void;\n}) => {\n  return (\n    <Radio.Group\n      name=\"bodyFat\"\n      accessibilityLabel=\"select your approximate bodyfat percentage\"\n      value={bodyFat?.toString()}\n      onChange={(value) => {\n        setBodyFat(Number(value));\n      }}\n    >\n      {gender && (\n        <HStack alignItems={'center'} space={1}>\n          {['10', '15', '20', '25', '30'].map((percent) => (\n            <VStack key={`${gender}-${percent}`}>\n              <Image\n                size={'sm'}\n                resizeMode={'contain'}\n                alt={'Welcome'}\n                source={BodyFatImageMap[gender as keyof typeof Gender][Number(percent)]}\n              />\n              <Radio value={percent} my={1} size={'sm'}>\n                {`${percent}%`}\n              </Radio>\n            </VStack>\n          ))}\n        </HStack>\n      )}\n    </Radio.Group>\n  );\n};\n","import { HStack, Input, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { UnitsType, feetAndInchesToInches, inchestToFeetAndInches } from 'fitness-tools';\n\nexport const HeightInput = ({\n  height,\n  unitsType,\n  setHeight,\n}: {\n  height: number;\n  unitsType: UnitsType;\n  setHeight: (newvalue: number) => void;\n}) => {\n  return (\n    <>\n      {unitsType === UnitsType.Imperial ? (\n        <ImperialHeightInput height={height} setHeight={setHeight} />\n      ) : (\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={height?.toString() || ''}\n          onChangeText={(value: string) => setHeight(Number(value))}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ImperialHeightInput = ({ height, setHeight }: { height: number; setHeight: (newvalue: number) => void }) => {\n  const [feet, setFeet] = useState<number>();\n  const [inches, setInches] = useState<number>();\n\n  const onSetHeight = () => {\n    if (feet && inches) {\n      const heightInInches = feetAndInchesToInches(feet, inches);\n      setHeight(heightInInches);\n    }\n  };\n\n  useEffect(() => {\n    if (height) {\n      const [feet, inches] = inchestToFeetAndInches(height);\n      setFeet(feet);\n      setInches(inches);\n    }\n  }, []);\n\n  useEffect(() => {\n    onSetHeight();\n  }, [feet, inches]);\n\n  return (\n    <HStack alignItems={'center'}>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={feet?.toString() || ''}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setFeet(Number(value));\n        }}\n      />\n      <Text>{'ft'}</Text>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={inches?.toString() || ''}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setInches(Number(value));\n        }}\n      />\n      <Text>{'in'}</Text>\n    </HStack>\n  );\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const formatDecimalMins = (time: number): string => {\n  const min = Math.floor(time);\n  const sec = Math.floor((time * 60) % 60);\n  return (min < 10 ? '0' : '') + min + ':' + (sec < 10 ? '0' : '') + sec;\n};\n\nexport const getWeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'lbs' : 'kg';\n};\n\nexport const getHeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'feet' : 'cm';\n};\n\nexport const getCircumferenceLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'inches' : 'cm';\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { BodyFatSelector } from '../../components/Forms/BodyFatSelector';\nimport { HeightInput } from '../../components/Forms/HeightInput';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getCircumferenceLabel, getHeightLabel, getWeightLabel } from '../../utils/measurements';\n\nexport const AboutYou = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { age, weight, height, waist, gender, bodyFat, preferredUnitsType } = trainee;\n  const unitsType = UnitsType[preferredUnitsType];\n  return (\n    <FormCard heading={t('About You')}>\n      <InlineField>\n        <Text>{t('Gender')}</Text>\n        <EnumSelect\n          Enum={Gender}\n          selectedValue={gender}\n          onValueChange={(value: keyof typeof Gender) => updateTrainee('gender', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your age')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={age?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('age', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your height ({{unitLabel}})', { unitLabel: getHeightLabel(unitsType) })}</Text>\n        <HeightInput unitsType={unitsType} height={height} setHeight={(value: number) => updateTrainee('height', value)} />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your current weight ({{unitLabel}})', { unitLabel: getWeightLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={weight?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('weight', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your waist circumference ({{unitLabel}})', { unitLabel: getCircumferenceLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={waist?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('waist', Number(value))}\n        />\n      </InlineField>\n      <InlineField allowWrap>\n        <Text>{t('Bodyfat (%)')}</Text>\n        <BodyFatSelector\n          gender={gender}\n          bodyFat={bodyFat}\n          setBodyFat={(value: number) => updateTrainee('bodyFat', Number(value))}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Box, ScrollView, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { ExperienceLevel, Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { getLiftStandards, getSpeedStandards, LiftMetrics, SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { formatDecimalMins, getWeightLabel } from '../../utils/measurements';\nimport { Table, TableHeader, TableRow } from '../Content';\n\nexport const StrengthStandardsComparison = ({\n  gender,\n  standards,\n  unitsType,\n}: {\n  gender: Gender;\n  standards: StrengthMetrics;\n  unitsType: UnitsType;\n}) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={700}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Exercice', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            {Object.keys(standards).map((exercise) => {\n              const lift: LiftMetrics = standards[exercise as keyof typeof standards]!;\n              const liftStandards = getLiftStandards(gender, exercise as Exercise);\n\n              if (!liftStandards) {\n                return;\n              }\n\n              const getCellContent = ({ oneRepMax, ratio, reps }: LiftMetrics, isStandard = false) => {\n                if (isStandard) {\n                  if (reps) {\n                    return `${reps} reps`;\n                  }\n                  return `${oneRepMax}${weightLabel} or ${ratio}x`;\n                }\n\n                if (reps) {\n                  return `${reps} reps`;\n                }\n                return oneRepMax ? `${oneRepMax}${weightLabel}/${ratio}x` : '-';\n              };\n\n              return (\n                <TableRow\n                  key={exercise}\n                  values={[\n                    { content: exercise, sideBorder: true },\n                    { content: getCellContent(lift), textAlign: 'center', sideBorder: true },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Beginner]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Novice]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Intermediate]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Advanced]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Vigilante]!, true),\n                      textAlign: 'center',\n                    },\n                  ]}\n                />\n              );\n            })}\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          'Note: Weights are calculated 1 Rep Maxes (using the average of multiple formulas - Epley, O&apos;Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight. Standards are sourced from strengthlevel.com'\n        )}\n      </Text>\n    </>\n  );\n};\n\nexport const SpeedtandardsComparison = ({ gender, standards }: { gender: Gender; standards: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  const genderStandards = getSpeedStandards(gender);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={575}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Distance', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: 'Mile Run', sideBorder: true },\n                {\n                  content: standards.mileRun ? formatDecimalMins(standards.mileRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.mileRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: '5k Run', sideBorder: true },\n                {\n                  content: standards.fiveKmRun ? formatDecimalMins(standards.fiveKmRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.fiveKmRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t('Note: Standards are sourced from runninglevel.com')}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { calculateStrengthStandards, LiftMetrics, standardExercises } from '../../domain/standards';\nimport { LiftAttempt, Lifts } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { Table, TableCell, TableHeader, TableRow } from '../Content';\n\nexport const LiftingStandardsCalculator = ({\n  unitsType,\n  weight,\n  lifts = {},\n  setLifts,\n}: {\n  unitsType: UnitsType;\n  weight: number;\n  lifts: Lifts;\n  setLifts: (newLifts: Lifts) => void;\n}) => {\n  const { t } = useTranslation();\n\n  const standards = useMemo(() => weight && lifts && calculateStrengthStandards(weight, lifts), [lifts, weight]);\n\n  const onChange = (lift: Exercise, attr: keyof LiftAttempt, value: number) => {\n    setLifts({\n      ...lifts,\n      [lift]: { ...lifts[lift as Exercise], [attr]: value },\n    });\n  };\n\n  const weightLabel = getWeightLabel(unitsType);\n  const headings = [\n    { content: 'Exercise', textAlign: 'left' },\n    { content: `Weight (${weightLabel})` },\n    { content: 'Reps' },\n    { content: '1RM', textAlign: 'right' },\n    { content: 'Ratio', textAlign: 'right' },\n  ];\n  const cellWidth = `${100 / headings.length}%`;\n\n  return (\n    <>\n      <Table>\n        <TableHeader headings={headings} />\n        {standardExercises.map((lift) => {\n          const calculated: LiftMetrics = standards?.[lift as keyof typeof standards];\n          return (\n            <TableRow key={lift}>\n              <TableCell width={cellWidth} content={lift} />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'decimal-pad'}\n                    value={lifts?.[lift as Exercise]?.weight?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'weight', Number(value))}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'number-pad'}\n                    value={lifts?.[lift as Exercise]?.reps?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'reps', Number(value))}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.oneRepMax ? `${calculated.oneRepMax}${weightLabel}` : ''}\n              />\n              <TableCell width={cellWidth} textAlign={'right'} content={calculated?.ratio ? `${calculated.ratio}x` : ''} />\n            </TableRow>\n          );\n        })}\n      </Table>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          \"Rep Maxes are calculated using the average of multiple formulas (Epley, O'Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight\"\n        )}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingStandardsCalculator } from '../../components/Standards';\nimport { ActivityLevel, UnitsType } from '../../domain/constants';\nimport { Lifts, Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Activity = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const {\n    activityLevel,\n    bestMileRunTime,\n    bestfiveKmRunTime,\n    maxPushUps,\n    maxPullUps,\n    hasLifted,\n    preferredUnitsType,\n    currentLifts,\n    weight,\n  } = trainee;\n  return (\n    <FormCard heading={t('Your current activity')}>\n      <InlineField>\n        <Text>{t('General daily activity')}</Text>\n        <EnumSelect\n          Enum={ActivityLevel}\n          selectedValue={activityLevel}\n          onValueChange={(value: keyof typeof ActivityLevel) => updateTrainee('activityLevel', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Mile run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestMileRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestMileRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('5k run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestfiveKmRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestfiveKmRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many push ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPushUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPushUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many pull ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPullUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPullUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Ever done barbell lifting?')}</Text>\n        <Select\n          selectedValue={hasLifted ? 'yes' : 'no'}\n          onValueChange={(value: string) => updateTrainee('hasLifted', value === 'yes')}\n          items={[\n            { value: 'yes', label: 'yes' },\n            { value: 'no', label: 'no' },\n          ]}\n        />\n      </InlineField>\n      {hasLifted && (\n        <LiftingStandardsCalculator\n          unitsType={UnitsType[preferredUnitsType]}\n          lifts={currentLifts}\n          weight={weight}\n          setLifts={(newLifts: Lifts) => {\n            updateTrainee('currentLifts', newLifts);\n          }}\n        />\n      )}\n    </FormCard>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Configuration = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredUnitsType } = trainee;\n  return (\n    <FormCard heading={t('Configuration')}>\n      <InlineField>\n        <Text>{t('Units')}</Text>\n        <EnumSelect\n          Enum={UnitsType}\n          selectedValue={preferredUnitsType}\n          onValueChange={(value: keyof typeof UnitsType) => updateTrainee('preferredUnitsType', value)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { DietType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Nutrition = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredDietType, prefersHigherCaloriesOnWeekends, prefersCycledNutrition, needsMetabolicReset } = trainee;\n  return (\n    <FormCard heading={t('Your current nutrition and preferences')}>\n      <InlineField>\n        <Text>{'Eating style'}</Text>\n        <EnumSelect\n          Enum={DietType}\n          selectedValue={preferredDietType}\n          onValueChange={(value: keyof typeof DietType) => updateTrainee('preferredDietType', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>{t('Have you been \"dieting\" on low calories for a long time without results?')}</Text>\n        <Switch\n          size=\"sm\"\n          isChecked={needsMetabolicReset}\n          onValueChange={(checked: boolean) => updateTrainee('needsMetabolicReset', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { Goal } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Preferences = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { primaryGoal, secondaryGoal, prefersMinimalLegs, prefersProgramHoping } = trainee;\n  return (\n    <FormCard heading={t('Your goals and preferences')}>\n      <InlineField>\n        <Text>{t('Primary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={primaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('primaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Secondary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={secondaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('secondaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Mix it up often:')}</Text>{' '}\n          {t('If you get bored easily, this will cycle you through appropriate programs more often')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersProgramHoping}\n          onValueChange={(checked: boolean) => updateTrainee('prefersProgramHoping', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Minimal legs:')}</Text>{' '}\n          {t(\n            'For those not keen on squatting heavy and often, or those who just do not want big legs and rather keep them strong and athletic'\n          )}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersMinimalLegs}\n          onValueChange={(checked: boolean) => updateTrainee('prefersMinimalLegs', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Alert, ArrowDownIcon, ArrowUpIcon, Box, HStack, Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumMultiSelect, EnumSelect, FormCard, InlineField, Select, StackedField } from '../../components/Forms';\nimport { UnitsType, WeekDay } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\n\nexport const Scheduling = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredWeekStart, preferredNumberOfWorkoutsPerWeek, preferredWorkoutDuration, preferredWorkoutDays } = trainee;\n\n  const weightUnitLabel = getWeightLabel(UnitsType[trainee.preferredUnitsType]);\n  const percentLabel = '%';\n\n  return (\n    <FormCard heading={t('Scheduling & Progression')}>\n      <Alert status={'info'} colorScheme={'info'} marginBottom={2}>\n        <HStack flexShrink={1} space={2}>\n          <Text>\n            {t(\n              'It is important you commit to something sustainable, more is not always better. Success comes from long term consistency.'\n            )}\n          </Text>\n        </HStack>\n      </Alert>\n      <InlineField>\n        <Text>{t('Workouts per week')}</Text>\n        <Select\n          selectedValue={preferredNumberOfWorkoutsPerWeek}\n          onValueChange={(value: string) => updateTrainee('preferredNumberOfWorkoutsPerWeek', Number(value))}\n          items={[\n            { label: '2 at most', value: 2 },\n            { label: '3 at most', value: 3 },\n            { label: '4 at most', value: 4 },\n            { label: '5 at most', value: 5 },\n            { label: '6 at most', value: 6 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Workout duration')}</Text>\n        <Select\n          selectedValue={preferredWorkoutDuration}\n          onValueChange={(value: string) => updateTrainee('preferredWorkoutDuration', Number(value))}\n          items={[\n            { label: '30 min at most', value: 30 },\n            { label: '45 min at most', value: 45 },\n            { label: '60 min at most', value: 60 },\n            { label: '75 min at most', value: 75 },\n            { label: '90 min at most', value: 90 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Start week on')}</Text>\n        <EnumSelect\n          Enum={WeekDay}\n          selectedValue={preferredWeekStart}\n          onValueChange={(value: keyof typeof WeekDay) => updateTrainee('preferredWeekStart', value)}\n        />\n      </InlineField>\n      <StackedField>\n        <Text>{t('Days you can train')}</Text>\n        <EnumMultiSelect\n          Enum={WeekDay}\n          accessibilityLabel={t('Select days you can train')}\n          selectedValues={preferredWorkoutDays}\n          onChange={(newValues: Array<keyof typeof WeekDay>) => updateTrainee('preferredWorkoutDays', newValues)}\n        />\n      </StackedField>\n      <Box paddingTop={5}>\n        <Text>\n          {t('On Success')} <ArrowUpIcon />\n        </Text>\n        <InlineField>\n          <Text>{t('Barbell Increment')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={trainee.preferredBarbellIncrement?.toString() || ''}\n              onChangeText={(value: string) => updateTrainee('preferredBarbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>{t('Dumbbell Increment')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={trainee.preferredDumbbellIncrement?.toString() || ''}\n              onChangeText={(value: string) => updateTrainee('preferredDumbbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n      <Box paddingY={1}>\n        <Text>\n          {t('On Failure')} <ArrowDownIcon />\n        </Text>\n        <InlineField>\n          <Text>{t('Barbell Decrement')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={trainee.preferredBarbellDecrement?.toString()}\n              onChangeText={(value: string) => updateTrainee('preferredBarbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>{t('Dumbbell Decrement')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={trainee.preferredDumbbellDecrement?.toString()}\n              onChangeText={(value: string) => updateTrainee('preferredDumbbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n    </FormCard>\n  );\n};\n","import { Button } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nimport { AboutYou } from './AboutYou';\nimport { Activity } from './Activity';\nimport { Configuration } from './Configuration';\nimport { Nutrition } from './Nutrition';\nimport { Preferences } from './Preferences';\nimport { Scheduling } from './Scheduling';\n\nexport default function GetStarted() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { age, weight, height, bodyFat, primaryGoal, secondaryGoal } = trainee!;\n  const enableContinueButton = !!age && !!bodyFat && !!weight && !!height && !!primaryGoal && !!secondaryGoal;\n\n  return (\n    <DefaultLayout>\n      <Configuration trainee={trainee!} updateTrainee={updateTrainee} />\n      <AboutYou trainee={trainee!} updateTrainee={updateTrainee} />\n      <Nutrition trainee={trainee!} updateTrainee={updateTrainee} />\n      <Activity trainee={trainee!} updateTrainee={updateTrainee} />\n      <Preferences trainee={trainee!} updateTrainee={updateTrainee} />\n      <Scheduling trainee={trainee!} updateTrainee={updateTrainee} />\n      {enableContinueButton ? (\n        <RoutingButton to={Destination.ProgramSelection}>{t('Continue')}</RoutingButton>\n      ) : (\n        <Button colorScheme=\"secondary\" disabled>\n          {t('Continue')}\n        </Button>\n      )}\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard } from '../../components/Forms';\nimport { SpeedtandardsComparison, StrengthStandardsComparison } from '../../components/Standards';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const Comparison = ({ trainee, traineeMetrics }: { trainee: Trainee; traineeMetrics: TraineeMetrics }) => {\n  const { t } = useTranslation();\n  const { gender, maxPullUps, maxPushUps, preferredUnitsType } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n  return (\n    <>\n      <FormCard heading={t('Strength')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{strengthLevel}</Text>\n        </Text>\n        <StrengthStandardsComparison\n          gender={Gender[gender]}\n          standards={{\n            ...strengthMetrics,\n            [Exercise.Pullup]: { reps: maxPullUps },\n            [Exercise.Pushup]: { reps: maxPushUps },\n          }}\n          unitsType={UnitsType[preferredUnitsType]}\n        />\n      </FormCard>\n      <FormCard heading={t('Speed')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{speedLevel}</Text>\n        </Text>\n        <SpeedtandardsComparison gender={Gender[gender]} standards={speedMetrics} />\n      </FormCard>\n    </>\n  );\n};\n","import { Box, Divider, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\n\nimport { DashboardDetail } from '../Dashboards';\n\nexport const NutritionInfo = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { note, bmr, tdee } = protocol;\n  return (\n    <>\n      {note && <Text fontSize={'xs'}>{note}</Text>}\n      <Box marginY={2}>\n        <DashboardDetail label={t('BMR (Base Metabolic Rate)')} value={`${bmr}`} />\n        <Divider />\n        <DashboardDetail label={t('TDEE (Total Daily Energy Expenditure)')} value={`${tdee}`} />\n        <Divider />\n        <NutritionRecommendations protocol={protocol} />\n        <Box marginY={2}>\n          <Text fontSize={'2xs'} italic>\n            {t(\n              'NOTE: BMR was calculated using the average of Miffin St Jeor, Harris Benedict and Katch McArdle formulas. TDEE was calculated using your BMR and given activity level (lightly active=x1.375, active=x1.55 and very active=x1.725). Minimum protein to consume was calculated using your body fat % (1 gram per pound of lean bodyweight)'\n            )}\n          </Text>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport const NutritionRecommendations = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { targetCalories, type, higherCaloriesOnWeekends, cycleNutrition, targetProtein } = protocol;\n  return (\n    <Box>\n      <DashboardDetail\n        label={`Recommended Target Average ${type === NutritionType.Bulk ? 'Surplus' : 'Deficit'}`}\n        value={`${targetCalories.energyExpenditureModifier}`}\n      />\n      <Divider />\n      <DashboardDetail label={t('Target Average Daily Calories')} value={`${targetCalories.average}`} />\n      <Divider />\n      {higherCaloriesOnWeekends && !cycleNutrition && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && !higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekday Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      <DashboardDetail label={t('Minimum Grams of Protein')} value={`${targetProtein}`} />\n      <Divider />\n    </Box>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard, InlineField } from '../../components/Forms';\nimport { NutritionInfo } from '../../components/Nutrition';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const NutritionRecommendation = ({\n  trainee,\n  updateTrainee,\n  recommendedNutrition,\n}: {\n  trainee: Trainee;\n  updateTrainee: UpdateTraineeFn;\n  recommendedNutrition: NutritionProtocol;\n}) => {\n  const { t } = useTranslation();\n  const { prefersAggressiveCut, prefersHigherCaloriesOnWeekends, prefersCycledNutrition } = trainee;\n  return (\n    <FormCard heading={'Nutritional Recommendation'}>\n      <NutritionInfo protocol={recommendedNutrition} />\n      {[NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type) && (\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('More aggresive cut:')}</Text>{' '}\n            {t('for those who want to drop weight quicker and can handle lower calories.')}\n          </Text>\n          <Switch\n            size=\"sm\"\n            isChecked={prefersAggressiveCut}\n            onValueChange={(checked: boolean) => updateTrainee('prefersAggressiveCut', checked)}\n          />\n        </InlineField>\n      )}\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\nimport { toNearestIncrement } from 'fitness-tools';\n\nimport { UnitsType } from '../../domain/constants';\nimport { LiftMetrics, StrengthMetrics } from '../../domain/standards';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const LiftingTargets = ({ liftTargets, unitsType }: { liftTargets: StrengthMetrics; unitsType: UnitsType }) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      {Object.keys(liftTargets).map((lift) => {\n        const { oneRepMax, fiveRepMax, reps } = liftTargets[lift as keyof typeof liftTargets] as LiftMetrics;\n        const roundedFiveReps = fiveRepMax && toNearestIncrement({ weight: fiveRepMax, unitsType });\n\n        return (\n          <BulletPoint key={lift}>\n            <Text fontSize={'xs'}>\n              {oneRepMax ? (\n                <>\n                  {t('Get your {{lift}} 1RM to {{oneRepMax}}{{weightLabel}}', { lift, oneRepMax, weightLabel })}\n                  {roundedFiveReps && (\n                    <Text>{t(` (that's {{weight}}{{weightLabel}} for 5 reps)`, { weight: roundedFiveReps, weightLabel })}</Text>\n                  )}\n                </>\n              ) : (\n                <>{t('Get your number of {{lift}} to {{reps}}', { lift, reps })}</>\n              )}\n            </Text>\n          </BulletPoint>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { SpeedMetrics } from '../../domain/standards';\nimport { formatDecimalMins } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const SpeedTargets = ({ speedTargets }: { speedTargets: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <BulletPoint>\n        <Text fontSize={'xs'}>\n          {t('Get your Mile Run run down to {{time}}', { time: formatDecimalMins(speedTargets.mileRun) })}\n        </Text>\n      </BulletPoint>\n      <BulletPoint>\n        <Text fontSize={'xs'}>\n          {t('Get your 5k Run run down to {{time}}', { time: formatDecimalMins(speedTargets.fiveKmRun) })}\n        </Text>\n      </BulletPoint>\n    </>\n  );\n};\n","import { Box, Center, Divider, Heading, HStack, ScrollView, Text } from 'native-base';\nimport { RoutineEntry, RoutineSet, Workout } from '../../domain/programs';\nimport { Video } from '../Content';\n\nexport const getExerciseRepLabel = (item: RoutineEntry): string => {\n  const sets = item.sets.length > 0 ? item.sets : item.warmup;\n\n  const reps = sets!\n    .reduce<string[]>((acc, set: RoutineSet) => {\n      let targetReps = `${set.reps || set.targetReps || ''}`;\n      if (set.minReps) {\n        targetReps = `${set.minReps}-${set.maxReps}`;\n      }\n      if (set.AMRAP) {\n        targetReps = targetReps ? `${targetReps}+` : 'f';\n      }\n      if (set.percentage) {\n        targetReps = `${targetReps}@${set.percentage}%`;\n      }\n\n      return [...acc, targetReps];\n    }, [])\n    .reduce<string[]>((acc, current, currentIndex, array) => {\n      let str = `1x${current}`;\n      if (array[currentIndex] === array[currentIndex + 1] || array[currentIndex] === array[currentIndex - 1]) {\n        str = `${array.filter((item) => item === current).length}x${current}`;\n      }\n      if (acc.includes(str)) return acc;\n\n      return [...acc, str];\n    }, []);\n\n  return reps.join(', ');\n};\n\nexport const WorkoutRoutinesHScroll = ({ workouts, showVideos }: { workouts: Workout[]; showVideos?: boolean }) => {\n  return (\n    <ScrollView horizontal={true}>\n      <HStack>\n        {workouts.map((workout: Workout, idx) => {\n          const wid = `workout-${workout.name}`;\n          const hasDivider = idx < workouts.length - 1;\n          return (\n            <HStack key={wid}>\n              <Box width={240}>\n                <Heading fontSize={'md'} fontWeight={300} paddingBottom={2}>\n                  {workout.name}\n                </Heading>\n                {workout.routine.map((item: RoutineEntry) => (\n                  <Box key={`${wid}-${item.exercise}`} paddingBottom={1}>\n                    <Text bold>{item.exercise}</Text>\n                    <Text>{getExerciseRepLabel(item)}</Text>\n                  </Box>\n                ))}\n                {workout.video && showVideos && (\n                  <Center paddingTop={2}>\n                    <Video video={workout.video} width={260} />\n                  </Center>\n                )}\n              </Box>\n              {hasDivider && <Divider marginX={4} orientation={'vertical'} />}\n            </HStack>\n          );\n        })}\n      </HStack>\n    </ScrollView>\n  );\n};\n","import { Box, Button, Container, Switch, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint } from '../../components/Content';\nimport { FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingTargets, SpeedTargets } from '../../components/Targets';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { UnitsType } from '../../domain/constants';\nimport { getProgram, Program, programs } from '../../domain/programs';\nimport { SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const ProgramRecommendation = ({\n  trainee,\n  recommendedPrograms,\n  speedTargets,\n  liftTargets,\n  bodyFatTarget,\n  program,\n  setProgram,\n  traineeMetrics,\n}: {\n  trainee: Trainee;\n  recommendedPrograms: { suitablePrograms: Program[]; bestMatch: string };\n  speedTargets: SpeedMetrics;\n  liftTargets: StrengthMetrics;\n  bodyFatTarget?: number;\n  program: string;\n  setProgram: (value: string) => void;\n  traineeMetrics: TraineeMetrics;\n}) => {\n  const { t } = useTranslation();\n  const [showAllPrograms, setShowAllPrograms] = useState(false);\n\n  const { preferredUnitsType } = trainee;\n  const selectedProgram = getProgram(program);\n  const selectedProgramWorkouts = selectedProgram?.workouts(traineeMetrics.strengthLevel);\n  const selectedValue = program || recommendedPrograms.bestMatch;\n\n  const programList = showAllPrograms ? programs : recommendedPrograms.suitablePrograms;\n\n  useEffect(() => {\n    setProgram(selectedValue);\n  }, [program, recommendedPrograms]);\n\n  return (\n    <FormCard heading={'Training Recommendation'}>\n      <Box marginBottom={3}>\n        <Text>{t('You should focus on getting stronger and faster aiming for the following short term goals:')}</Text>\n        {liftTargets && <LiftingTargets liftTargets={liftTargets} unitsType={UnitsType[preferredUnitsType]} />}\n        {speedTargets && <SpeedTargets speedTargets={speedTargets} />}\n        {bodyFatTarget && (\n          <BulletPoint>\n            <Text fontSize={'xs'}>{t('Get your body fat down to {{bodyFatTarget}}%', { bodyFatTarget })}</Text>\n          </BulletPoint>\n        )}\n      </Box>\n\n      <Text fontSize={'xs'} italic>\n        {t(\n          'The most recommended program to achieve the above is selected, but you can also chose one of the other programs that match your level of strength and preferences and you will still see good results.'\n        )}\n      </Text>\n      <Box marginTop={3} marginBottom={6}>\n        <Select\n          border\n          selectedValue={selectedValue}\n          onValueChange={(value: string) => setProgram(value)}\n          width={'100%'}\n          textAlign={'left'}\n          items={programList.map((program) => ({\n            label: `${program.name}${program.id === recommendedPrograms.bestMatch ? ` (recommended)` : ''}`,\n            value: program.id,\n          }))}\n        />\n        <Container marginTop={2}>\n          {!showAllPrograms ? (\n            <Button size=\"xs\" onPress={() => setShowAllPrograms(true)}>\n              {t('Show all programs')}\n            </Button>\n          ) : (\n            <Button size=\"xs\" colorScheme={'secondary'} onPress={() => setShowAllPrograms(false)}>\n              {t('Hide non recommended programs')}\n            </Button>\n          )}\n        </Container>\n      </Box>\n\n      {selectedProgramWorkouts && <WorkoutRoutinesHScroll workouts={selectedProgramWorkouts} />}\n      <Box marginTop={5}>\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('End workouts with a speed or endurance finisher.')}</Text>{' '}\n            {t(\n              'In true vigilante fashion, workouts will randomly end with a bodyweight exercise for reps and/or time, some sort of carry for distance and/or time or a 1 mile or 5k run for time.'\n            )}\n          </Text>\n          <Switch size=\"sm\" isChecked />\n        </InlineField>\n      </Box>\n    </FormCard>\n  );\n};\n","import { useState } from 'react';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WeekDay } from '../../domain/constants';\nimport { getTraineeMetrics, getTraineeRecommendations, useActiveProgram, useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { Comparison } from './Comparison';\nimport { NutritionRecommendation } from './NutritionRecommendation';\nimport { ProgramRecommendation } from './ProgramRecommendation';\n\nexport default function ProgramSelection() {\n  const [program, setProgram] = useState<string>();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { initialiseProgram } = useActiveProgram();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition, recommendedPrograms, speedTargets, liftTargets, bodyFatTarget } = getTraineeRecommendations(\n    trainee!,\n    traineeMetrics\n  );\n\n  return (\n    <DefaultLayout>\n      <Comparison trainee={trainee!} traineeMetrics={traineeMetrics} />\n      <NutritionRecommendation trainee={trainee!} updateTrainee={updateTrainee} recommendedNutrition={recommendedNutrition} />\n      <ProgramRecommendation\n        trainee={trainee!}\n        traineeMetrics={traineeMetrics}\n        recommendedPrograms={recommendedPrograms}\n        speedTargets={speedTargets}\n        liftTargets={liftTargets}\n        bodyFatTarget={bodyFatTarget}\n        program={program!}\n        setProgram={setProgram}\n      />\n      <RoutingButton\n        to={Destination.Dashboard}\n        onPress={() => initialiseProgram(program!, traineeMetrics.strengthLevel, WeekDay[trainee!.preferredWeekStart])}\n      >\n        {'Lets Go!'}\n      </RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { Paragraph } from '../../components/Content';\nimport { DashboardCard } from '../../components/Dashboards';\nimport { getTodaysCalories, NutritionProtocol } from '../../domain/nutrition';\nimport { ScheduledWorkout } from '../../domain/trainee';\nimport { RoutingButton } from '../../utils/routing';\n\nexport default function Today({\n  recommendedNutrition,\n  workout,\n  startWorkout,\n}: {\n  recommendedNutrition: NutritionProtocol;\n  workout: ScheduledWorkout | undefined;\n  startWorkout: () => void;\n}) {\n  const { t } = useTranslation();\n\n  const calories = getTodaysCalories(recommendedNutrition, !!workout);\n  const protein = recommendedNutrition.targetProtein;\n  const link = `/Workout/${workout?.id}`;\n\n  return (\n    <DashboardCard heading={t('Today')}>\n      {workout ? (\n        <Paragraph>\n          <Text paddingRight={3}>\n            {t('Today you are scheduled to perform:')} <Text bold>{workout.name}</Text>\n          </Text>\n          {workout.status === 'in progress' && <RoutingButton to={link}>{t('Continue Workout')}</RoutingButton>}\n          {workout.status === 'pending' && (\n            <RoutingButton to={link} onPress={startWorkout}>\n              {t('Start Workout')}\n            </RoutingButton>\n          )}\n        </Paragraph>\n      ) : (\n        <Paragraph>{t('Today is an active recovery day. Go for a run, do some stretching and/or some mobility work.')}</Paragraph>\n      )}\n\n      <Paragraph>\n        <Trans t={t} calories={calories} protein={protein}>\n          You should consume <Text bold>{{ calories }} calories</Text> and at least{' '}\n          <Text bold>{{ protein }} grams of protein</Text>. Calories can be split between fat and carbs to preference,\n          recommendation is that 20-30% come from healthy fats to maintain hormonal balance.\n        </Trans>\n      </Paragraph>\n    </DashboardCard>\n  );\n}\n","import { Box, Divider, HStack, Icon, Text } from 'native-base';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { goToWorkout, useNavigate } from '../../utils/routing';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport const WorkoutList = ({ workouts, dateFormat = 'date' }: { workouts: ScheduledWorkout[]; dateFormat?: 'day' | 'date' }) => {\n  const navigate = useNavigate();\n  return (\n    <>\n      {workouts.map((item, idx) => {\n        const isDone = item.status === 'done';\n        return (\n          <Box key={`workout-${idx}`}>\n            <HStack>\n              <Icon\n                color={isDone ? 'green.500' : 'amber.500'}\n                mb={1}\n                as={MaterialIcons}\n                name={isDone ? 'done' : 'schedule'}\n                size={'md'}\n                marginRight={1}\n              />\n              <Text>\n                {dateFormat === 'date'\n                  ? new Date(item.date).toLocaleDateString('en-GB', {\n                      weekday: 'short',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : new Date(item.date).toLocaleDateString('en-GB', { weekday: 'long' })}\n              </Text>\n              <Text bold>{` ${item.name}`}</Text>\n              <Icon\n                as={MaterialCommunityIcons}\n                name={'eye'}\n                size={'md'}\n                marginLeft={'auto'}\n                onPress={() => goToWorkout(navigate)(idx)}\n              />\n            </HStack>\n            <Divider marginY={2} />\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutList } from '../../components/Workouts';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport default function ThisWeek({ workouts }: { workouts: ScheduledWorkout[] }) {\n  const { t } = useTranslation();\n\n  return (\n    <DashboardCard heading={'This Week'}>\n      {workouts.length ? <WorkoutList workouts={workouts} dateFormat={'day'} /> : <Text>{t('No workouts scheduled.')}</Text>}\n    </DashboardCard>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport Today from './Today';\nimport {\n  getScheduledForThisWeek,\n  getTraineeMetrics,\n  getTraineeRecommendations,\n  useActiveProgram,\n  useTrainee,\n} from '../../domain/trainee';\nimport ThisWeek from './ThisWeek';\n\nexport default function Dashboard() {\n  const { t } = useTranslation();\n  const { traineeLoaded, trainee } = useTrainee();\n  const { schedule, activeProgramLoaded, todaysWorkout, updateSchedule } = useActiveProgram();\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition } = getTraineeRecommendations(trainee!, traineeMetrics);\n  const thisWeeksWorkouts = getScheduledForThisWeek(schedule!);\n\n  const startWorkout = () => {\n    todaysWorkout && updateSchedule({ type: 'start_workout', payload: { id: todaysWorkout.id } });\n  };\n\n  return (\n    <HeadedLayout showNav heading={t('Dashboard')}>\n      <Today recommendedNutrition={recommendedNutrition!} workout={todaysWorkout} startWorkout={startWorkout} />\n      <ThisWeek workouts={thisWeeksWorkouts} />\n    </HeadedLayout>\n  );\n}\n","import { Center, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { Video } from '../../components/Content';\nimport { DashboardCard, DashboardDetail } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WorkoutList } from '../../components/Workouts';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { getTraineeMetrics, useActiveProgram, useTrainee } from '../../domain/trainee';\n\nexport default function Program() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded } = useTrainee();\n  const { activeProgramLoaded, program, schedule } = useActiveProgram();\n\n  if (!activeProgramLoaded || !traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { strengthLevel } = getTraineeMetrics(trainee!);\n  const completedCount = schedule!.filter((item) => item.status === 'done').length;\n\n  return (\n    <HeadedLayout showNav heading={t('Program')}>\n      <DashboardCard heading={t('Active Program')}>\n        <DashboardDetail label={t('Name')} value={program!.name} />\n        <DashboardDetail label={t('Author')} value={program!.author} />\n        {program!.link && <DashboardDetail label={t('Sourced from')} value={program!.link} />}\n        <DashboardDetail label={t('Duration')} value={`${program!.duration} weeks`} />\n        <DashboardDetail label={t('Workouts per week')} value={program!.daysPerWeek} />\n        <DashboardDetail label={t('Workout duration')} value={`${program!.workoutDuration} min`} />\n        {program?.video && (\n          <Center paddingTop={2}>\n            <Video video={program.video} />\n          </Center>\n        )}\n      </DashboardCard>\n      <DashboardCard heading={t('Workouts')}>\n        <WorkoutRoutinesHScroll workouts={program!.workouts(strengthLevel)} showVideos />\n      </DashboardCard>\n      <DashboardCard heading={t('Schedule')}>\n        <WorkoutList workouts={schedule!} />\n        <Text italic textAlign={'right'}>\n          {t('{{completedCount}}/{{total}} workouts complete', { completedCount, total: schedule!.length })}\n        </Text>\n      </DashboardCard>\n    </HeadedLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport { BottomButtonsBox } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram, useLog } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nexport default function Settings() {\n  const { t } = useTranslation();\n  const { activeProgramLoaded, resetProgram } = useActiveProgram();\n  const { resetLog } = useLog();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Settings')}>\n      <BottomButtonsBox>\n        <RoutingButton to={Destination.Log} onPress={resetLog} colorScheme=\"secondary\" marginY={1}>\n          {t('Reset Log')}\n        </RoutingButton>\n        <RoutingButton to={Destination.GetStarted} onPress={resetProgram}>\n          {t('Reset/Change Program')}\n        </RoutingButton>\n      </BottomButtonsBox>\n    </HeadedLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\n\nexport default function Vault() {\n  const { t } = useTranslation();\n\n  return (\n    <HeadedLayout showNav heading={t('Vault')}>\n      <Text>{t('Coming Soon')}</Text>\n    </HeadedLayout>\n  );\n}\n","import { Box, Divider, HStack, Text, VStack } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { RoutineEntry } from '../../domain/programs';\nimport { useLog } from '../../domain/trainee';\n\nexport default function Log() {\n  const { t } = useTranslation();\n  const { workoutLog, logLoaded } = useLog();\n\n  if (!logLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Log')}>\n      {(!workoutLog || !workoutLog.length) && <Text>{t('No workouts logged.')}</Text>}\n      {workoutLog?.map((workout) => {\n        const key = `${workout.datePerformed}-${workout.name}`;\n        return (\n          <DashboardCard key={key}>\n            <VStack space={1}>\n              <Text bold fontSize={'xs'}>\n                {new Date(workout.datePerformed).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              </Text>\n              <Text fontSize={'xs'}>\n                {t('{{workoutName}}, {{program}}', { workoutName: workout.name, program: workout.program })}\n              </Text>\n              <Divider />\n              {workout.routine.map((item: RoutineEntry) => (\n                <Box key={`${key}-${item.exercise}`}>\n                  {item.sets.length > 0 && (\n                    <Box>\n                      <Text bold fontSize={'xs'}>\n                        {item.exercise}\n                      </Text>\n                      <HStack>\n                        {item.sets.map((set, setId) => (\n                          <Text fontSize={'xs'} key={`${key}-${item.exercise}set-${setId}`} marginRight={2}>\n                            {!!set.weight && !!set.reps && `${set.weight}x${set.reps}`}\n                            {!set.weight && !!set.reps && `${set.reps}reps`}\n                          </Text>\n                        ))}\n                      </HStack>\n                    </Box>\n                  )}\n                </Box>\n              ))}\n            </VStack>\n          </DashboardCard>\n        );\n      })}\n    </HeadedLayout>\n  );\n}\n","import { toNearestIncrement } from 'fitness-tools';\n\nimport { RoutineEntry, RoutineSet } from '../programs';\nimport { StrengthMetrics } from '../standards';\nimport { LiftAttempt, Lifts, ScheduledWorkout } from '../trainee';\n\nexport const getWorkoutById = (schedule: ScheduledWorkout[]) => (id: number) => schedule.find((entry) => entry.id === id);\n\nexport const getWorkoutTotalSetCount = (workout: ScheduledWorkout): number =>\n  workout.routine.reduce((acc, current) => {\n    if (current.warmup) acc = acc + current.warmup.length;\n    if (current.sets) acc = acc + current.sets.length;\n    return acc;\n  }, 0);\n\nexport const getCompleteSetCount = (workout: ScheduledWorkout): number => {\n  return workout.routine.reduce((acc: number, curr: RoutineEntry) => {\n    let count = acc;\n    [...(curr.warmup ? curr.warmup : []), ...(curr.sets ? curr.sets : [])].forEach((curr) => {\n      if (curr.status === 'done') count = count + 1;\n    });\n\n    return count;\n  }, 0);\n};\n\nexport const getPreviousWorkoutOfType = (schedule: ScheduledWorkout[]) => (workoutId: number) => {\n  const workout = schedule[workoutId];\n  let previous;\n  for (let i = workoutId - 1; i >= 0; i--) {\n    if (schedule[i].name === workout.name) {\n      previous = schedule[i];\n      break;\n    }\n  }\n  return previous;\n};\n\nexport const getPreviousLift =\n  (schedule: ScheduledWorkout[], workoutId: number, currentLifts?: Lifts) =>\n  (exerciseId: number, setId: number, warmup = false): { weight: number | undefined; reps: number } | undefined => {\n    // @TODO track and handle warmup history\n    if (warmup) return;\n\n    const previousWorkout = getPreviousWorkoutOfType(schedule!)(workoutId);\n    const previousSet = previousWorkout?.routine[exerciseId].sets[setId];\n\n    let previous = previousSet ? { weight: previousSet.weight, reps: previousSet.reps! } : undefined;\n\n    // if no previous and it is not a warmup\n    if (!previous && setId === 0 && currentLifts) {\n      previous = currentLifts[schedule[workoutId].routine[exerciseId].exercise as keyof typeof currentLifts];\n    }\n\n    return previous;\n  };\n\nexport const getRecommendedWeight =\n  ({\n    schedule,\n    workoutId,\n    barbellIncrement,\n    barbellDecrement,\n    dumbbellIncrement,\n    dumbbellDecrement,\n    strengthStandards,\n    bodyweight,\n    currentLifts,\n  }: {\n    schedule: ScheduledWorkout[];\n    workoutId: number;\n    barbellIncrement: number;\n    barbellDecrement: number;\n    dumbbellIncrement: number;\n    dumbbellDecrement: number;\n    strengthStandards: StrengthMetrics;\n    bodyweight: number;\n    currentLifts: Lifts;\n  }) =>\n  (exerciseId: number, setId: number, warmup = false): number | undefined => {\n    const entry = schedule[workoutId].routine[exerciseId];\n\n    const currentLift = currentLifts[entry.exercise as keyof typeof currentLifts];\n    const previous = getPreviousLift(schedule, workoutId)(exerciseId, setId);\n    const liftStandards = strengthStandards[entry.exercise as keyof typeof strengthStandards];\n    const set = warmup ? entry.warmup?.[setId] : entry.sets[setId];\n\n    // @TODO by exercise type\n    const smallestIncrement = barbellIncrement;\n    const deloadDecrement = barbellDecrement;\n\n    let weight;\n    if (set?.weight) {\n      weight = set.weight;\n    } else if (set?.percentage && liftStandards) {\n      weight = liftStandards[set.basis ?? 'oneRepMax']! * (set.percentage / 100);\n    } else if (set?.ratio) {\n      weight = bodyweight * set.ratio;\n    } else if (!previous && liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      const needsDeload = currentLift.fails && currentLift.fails >= 3;\n      const passedLastAttempt = currentLift.targetReps && currentLift.reps >= currentLift.targetReps;\n      const needsToRepeatPrevious = currentLift.targetReps && currentLift.reps < currentLift.targetReps;\n      if (needsDeload) {\n        weight = Number(currentLift.weight) - Number(currentLift.weight) * (deloadDecrement / 100);\n      } else if (passedLastAttempt) {\n        weight = Number(currentLift.weight) + Number(smallestIncrement);\n      } else if (needsToRepeatPrevious) {\n        weight = Number(currentLift.weight);\n      } else if (liftStandards) {\n        // @TODO should be configurable?\n        weight = liftStandards['fiveRepMax'];\n      }\n    } else if (liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      weight = Number(currentLift.weight);\n    }\n\n    return weight && toNearestIncrement({ weight, increment: smallestIncrement });\n  };\n\nconst getBestAttemptFromSets = (sets: RoutineSet[]): LiftAttempt =>\n  sets.reduce(\n    (acc, set) => {\n      if (!set.weight && !set.reps) return acc;\n\n      if (set.weight && set.weight >= acc.weight) {\n        acc.weight = Number(set.weight);\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      } else if ((set.weight == acc.weight || !set.weight) && set.reps! > acc.reps) {\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      }\n      return acc;\n    },\n    <LiftAttempt>{ weight: 0, reps: 0, targetReps: 0 }\n  );\n\nexport const updateCurrentLifts = (\n  currentLifts: Lifts,\n  workout: ScheduledWorkout,\n  setCurrentLifts: (newLifts: Lifts) => void\n) => {\n  setCurrentLifts({\n    ...currentLifts,\n    ...workout?.routine.reduce((acc, curr: RoutineEntry) => {\n      if (curr.ignoreForTracking) return acc;\n\n      const { weight, reps, targetReps } = getBestAttemptFromSets(curr.sets);\n      const currentFails = currentLifts[curr.exercise as keyof typeof currentLifts]?.fails ?? 0;\n      const isFail = targetReps && reps < targetReps;\n\n      return { ...acc, [curr.exercise as string]: { weight, reps, targetReps, fails: isFail ? currentFails + 1 : 0 } };\n    }, {}),\n  });\n};\n","import { Icon, Modal, Pressable } from 'native-base';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useState } from 'react';\n\nimport { RoutineEntry } from '../../../../domain/programs';\nimport { Video } from '../../../../components/Content';\n\nexport const ExerciseInfo = ({ item }: { item: RoutineEntry }) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n  const { video } = item;\n  return (\n    <>\n      <Modal\n        isOpen={modalVisible}\n        onClose={() => {\n          setModalVisible(false);\n        }}\n      >\n        <Modal.CloseButton />\n        {video && <Video video={video} />}\n      </Modal>\n      {video && (\n        <Pressable\n          onPress={() => {\n            setModalVisible(true);\n          }}\n        >\n          <Icon as={MaterialCommunityIcons} name={'information-outline'} size={'sm'} />\n        </Pressable>\n      )}\n    </>\n  );\n};\n","import { Box, Text } from 'native-base';\n\nexport const SetIdentifier = ({ warmup, setId }: { warmup?: boolean; setId: number }) => (\n  <Box width={25} borderRadius={10} background={warmup ? 'primary.50' : 'primary.200'} padding={0.5}>\n    <Text textAlign={'center'} fontSize={'xs'}>\n      {setId + 1}\n    </Text>\n  </Box>\n);\n","import { RoutineSet } from '../../../domain/programs';\n\nexport const getTargetRepsPlaceholder = (entry: RoutineSet): string => {\n  let placeholder = '';\n  if (entry.minReps) {\n    placeholder = `${entry.minReps}-${entry.maxReps}`;\n  } else if (entry.targetReps) {\n    placeholder = `${entry.targetReps}`;\n  } else if (entry.reps) {\n    placeholder = `${entry.reps}`;\n  }\n\n  if (entry.AMRAP) placeholder = `${placeholder}+`;\n\n  return placeholder;\n};\n\nexport const getPreviousLabel =\n  (\n    getPreviousLift: (\n      exerciseId: number,\n      setId: number,\n      isWarmup: boolean\n    ) => { weight: number | undefined; reps: number } | undefined\n  ) =>\n  (exerciseId: number, setId: number, isWarmup = false) => {\n    const prev = getPreviousLift(exerciseId, setId, isWarmup);\n    if (prev && prev.weight) {\n      return `${prev?.weight}x${prev?.reps}`;\n    } else if (prev && prev.reps) {\n      return `${prev?.reps}`;\n    }\n    return '-';\n  };\n","import { Checkbox, Input, Text } from 'native-base';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel, getTargetRepsPlaceholder } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Sets = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const { t } = useTranslation();\n  const [sets, setSets] = useState<RoutineSet[]>(routine.sets);\n  const onUpdate = (setId: number, attr: 'weight' | 'reps', value: any) => {\n    const newSets = [...sets];\n    newSets[setId][attr] = value;\n    setSets(newSets);\n  };\n  return (\n    <>\n      {sets.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-set-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId), textAlign: 'center' },\n            ...(!routine.bodyweight\n              ? [\n                  {\n                    content: (\n                      <Input\n                        keyboardType={'decimal-pad'}\n                        value={entry.weight?.toString() || ''}\n                        textAlign={'center'}\n                        onChangeText={(value: string) => onUpdate(setId, 'weight', value)}\n                        placeholder={getRecommendedWeight(exerciseId, setId)?.toString()}\n                        marginX={1}\n                      />\n                    ),\n                    textAlign: 'center',\n                  },\n                ]\n              : []),\n            {\n              content: (\n                <Input\n                  keyboardType={'number-pad'}\n                  value={entry.reps?.toString() || ''}\n                  textAlign={'center'}\n                  onChangeText={(value: string) => onUpdate(setId, 'reps', Number(value))}\n                  placeholder={getTargetRepsPlaceholder(entry)}\n                  marginX={1}\n                />\n              ),\n              textAlign: 'center',\n            },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, false)}\n                >\n                  <Text display={'none'}>{t('Done')}</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Checkbox, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Warmups = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {routine.warmup?.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-warmup-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier warmup setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId, true), textAlign: 'center' },\n            ...(!routine.bodyweight ? [{ content: getRecommendedWeight(exerciseId, setId, true), textAlign: 'center' }] : []),\n            { content: entry.reps, textAlign: 'center' },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, true)}\n                >\n                  <Text display={'none'}>{t('Done')}</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Box, Heading, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { Table, TableHeader } from '../../../components/Content';\nimport { RoutineEntry } from '../../../domain/programs';\nimport { ScheduledWorkout } from '../../../domain/trainee';\nimport { ExerciseInfo } from './components/ExerciseInfo';\nimport { SetProps } from './interfaces';\nimport { Sets } from './Sets';\nimport { Warmups } from './Warmups';\n\nexport const WorkoutSheet = ({\n  workout,\n  ...rest\n}: {\n  workout: ScheduledWorkout;\n} & SetProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {workout.routine.map((item: RoutineEntry, exerciseId: number) => {\n        return (\n          <Box key={`workout-${item.exercise}`} marginBottom={10}>\n            <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n              {item.optional && <Text italic>{t('(Optional)')} </Text>}\n              {item.exercise} <ExerciseInfo item={item} />\n            </Heading>\n            {item.note && (\n              <Text>\n                {t('Note:')} {item.note}\n              </Text>\n            )}\n            <Table>\n              <TableHeader\n                headings={[\n                  { content: t('Set'), textAlign: 'left', width: 10 },\n                  { content: t('Previous') },\n                  ...(!item.bodyweight ? [{ content: t('Weight') }] : []),\n                  { content: t('Reps') },\n                  { content: '' },\n                ]}\n              />\n              <Warmups exerciseId={exerciseId} routine={item} {...rest} />\n              <Sets exerciseId={exerciseId} routine={item} {...rest} />\n            </Table>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\nimport { CountdownCircleTimer, TimeProps } from 'react-native-countdown-circle-timer';\n\nimport { FormCard } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { getTraineeMetrics, Lifts, useActiveProgram, useLog, useTrainee } from '../../domain/trainee';\nimport {\n  getCompleteSetCount,\n  getPreviousLift,\n  getRecommendedWeight,\n  getWorkoutById,\n  getWorkoutTotalSetCount,\n  updateCurrentLifts,\n} from '../../domain/workout';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { WorkoutSheet } from './WorkoutSheet';\nimport { Box, Progress, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\n\nexport default function Workout() {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { program, schedule, activeProgramLoaded, updateSchedule } = useActiveProgram();\n  const { logWorkout } = useLog();\n\n  const [setsDone, setSetsDone] = useState<number>(0);\n  const [nextRestDuration, setNextRestDuration] = useState<number>(0);\n  const [remainingTime, setRemainingTime] = useState<number>(0);\n\n  const workout = schedule && getWorkoutById(schedule)(Number(id));\n\n  useEffect(() => {\n    schedule && workout && setSetsDone(getCompleteSetCount(workout));\n  }, [id, schedule, setSetsDone, workout]);\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const { strengthMetrics } = getTraineeMetrics(trainee!);\n  const totalSets = workout ? getWorkoutTotalSetCount(workout) : 0;\n\n  const getSetRecommendedWeight = getRecommendedWeight({\n    schedule: schedule!,\n    workoutId: Number(id),\n    barbellIncrement: 5,\n    barbellDecrement: 10,\n    dumbbellIncrement: 2,\n    dumbbellDecrement: 15,\n    strengthStandards: strengthMetrics,\n    bodyweight: trainee!.weight,\n    currentLifts: trainee!.currentLifts,\n  });\n\n  const onChangeSetWeight = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_weight', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onChangeSetReps = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_reps', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onSetComplete = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    setSetsDone((previous: number) => previous + 1);\n    updateSchedule({\n      type: 'complete_set',\n      payload: { id, exerciseId, setId, isWarmup, recommendedWeight: getSetRecommendedWeight(exerciseId, setId, isWarmup) },\n    });\n    // trigger rest timer\n    const restTime = isWarmup ? 60 : (schedule![Number(id!)].routine[exerciseId].rest ?? 1) * 60;\n    setNextRestDuration(restTime);\n    setRemainingTime(restTime);\n  };\n\n  const finishWorkout = () => {\n    updateCurrentLifts(trainee!.currentLifts, workout!, (newLifts: Lifts) => updateTrainee('currentLifts', newLifts));\n    updateSchedule({ type: 'end_workout', payload: { id } });\n    logWorkout(workout!, program!.name);\n  };\n\n  return (\n    <HeadedLayout\n      showNav\n      heading={workout!.name}\n      headerElements={\n        <>\n          <Progress w=\"70%\" colorScheme=\"primary\" value={(setsDone / totalSets) * 100} marginY={1} />\n          {nextRestDuration > 0 && remainingTime > 0 && (\n            <Box paddingY={2}>\n              <CountdownCircleTimer\n                size={90}\n                strokeWidth={8}\n                key={setsDone}\n                isPlaying\n                duration={nextRestDuration}\n                colors={'#FF8533'}\n              >\n                {({ remainingTime }: TimeProps) => {\n                  setRemainingTime(remainingTime);\n                  return <Text color={'white'} fontSize={'xs'}>{`${~~(remainingTime / 60)}min ${remainingTime % 60}sec`}</Text>;\n                }}\n              </CountdownCircleTimer>\n            </Box>\n          )}\n        </>\n      }\n    >\n      <FormCard>\n        <WorkoutSheet\n          workout={workout!}\n          getRecommendedWeight={getSetRecommendedWeight}\n          onChangeSetReps={onChangeSetReps}\n          onChangeSetWeight={onChangeSetWeight}\n          onSetComplete={onSetComplete}\n          getPreviousLift={getPreviousLift(schedule!, Number(id), trainee!.currentLifts)}\n        />\n        {workout?.status !== 'done' && (\n          <RoutingButton to={Destination.Dashboard} onPress={finishWorkout}>\n            {t('Finish Workout')}\n          </RoutingButton>\n        )}\n      </FormCard>\n    </HeadedLayout>\n  );\n}\n","import { Route, Routes } from 'react-router';\nimport { NativeBaseProvider } from 'native-base';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { nativeBaseTheme } from './theme';\nimport { Destination, Router } from './utils/routing';\nimport { Loader } from './components/Loader';\n\nimport About from './screens/About';\nimport Welcome from './screens/Welcome';\nimport GetStarted from './screens/GetStarted';\nimport ProgramSelection from './screens/ProgramSelection';\nimport Dashboard from './screens/Dashboard';\nimport Program from './screens/Program';\nimport Settings from './screens/Settings';\nimport Vault from './screens/Vault';\nimport Log from './screens/Log';\nimport Workout from './screens/Workout';\n\ni18n.use(initReactI18next).init({\n  resources: {},\n  lng: 'en',\n  fallbackLng: 'en',\n});\n\nexport default function App() {\n  const activeProgramLoaded = true;\n\n  return (\n    <NativeBaseProvider theme={nativeBaseTheme}>\n      {!activeProgramLoaded ? (\n        <Loader />\n      ) : (\n        <Router>\n          <Routes>\n            <Route path={Destination.Home} element={<Welcome />} />\n            <Route path={Destination.About} element={<About />} />\n            <Route path={Destination.Dashboard} element={<Dashboard />} />\n            <Route path={Destination.GetStarted} element={<GetStarted />} />\n            <Route path={Destination.ProgramSelection} element={<ProgramSelection />} />\n            <Route path={Destination.Program} element={<Program />} />\n            <Route path={Destination.Settings} element={<Settings />} />\n            <Route path={Destination.Vault} element={<Vault />} />\n            <Route path={Destination.Log} element={<Log />} />\n            <Route path={Destination.Workout} element={<Workout />} />\n          </Routes>\n        </Router>\n      )}\n    </NativeBaseProvider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/strength-icon.23b12a84.png\";","module.exports = __webpack_public_path__ + \"static/media/cardio-icon.96b53289.png\";","module.exports = __webpack_public_path__ + \"static/media/speed-icon.6097ad38.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.19683717.png\";","module.exports = __webpack_public_path__ + \"static/media/go.077d9926.png\";","module.exports = __webpack_public_path__ + \"static/media/comic1.96e63579.png\";","module.exports = __webpack_public_path__ + \"static/media/comic2.70b29362.png\";","module.exports = __webpack_public_path__ + \"static/media/comic3.6d65de32.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/welcome2.bd841836.png\";","module.exports = __webpack_public_path__ + \"static/media/Male10.f23d08d5.png\";","module.exports = __webpack_public_path__ + \"static/media/Male15.293ba6ba.png\";","module.exports = __webpack_public_path__ + \"static/media/Male20.4ad2a421.png\";","module.exports = __webpack_public_path__ + \"static/media/Male25.a2cbf1de.png\";","module.exports = __webpack_public_path__ + \"static/media/Male30.c81ae86e.png\";","module.exports = __webpack_public_path__ + \"static/media/Female10.0c2955e8.png\";","module.exports = __webpack_public_path__ + \"static/media/Female15.6d965ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/Female20.14ba5dd7.png\";","module.exports = __webpack_public_path__ + \"static/media/Female25.91e6a499.png\";","module.exports = __webpack_public_path__ + \"static/media/Female30.fd170a69.png\";"],"sourceRoot":""}