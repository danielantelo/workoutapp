{"version":3,"sources":["utils/routing.tsx","theme/index.ts","theme/components/Select.ts","components/Loader/index.tsx","components/Content/Tables.tsx","components/Content/Typography.tsx","components/Content/Video.tsx","components/Logo/index.tsx","components/Navigation/index.tsx","components/Layouts/index.tsx","screens/About/index.tsx","domain/constants/index.ts","screens/Welcome/index.tsx","domain/nutrition/nutrition.ts","utils/calendar.ts","utils/measurements.ts","domain/nutrition/calculators.ts","domain/exercises/exercises.ts","domain/programs/routines/athleanx.ts","domain/programs/routines/startingstrength.ts","domain/programs/routines/stronglifts.ts","domain/programs/routines/vigilante.ts","domain/programs/routines/wendler.ts","domain/programs/programs.ts","domain/standards/speed.ts","domain/standards/strength.ts","domain/standards/calculators.ts","domain/trainee/trainee.ts","domain/trainee/targets.ts","domain/trainee/schedule.ts","domain/trainee/store.ts","domain/trainee/log.ts","components/Dashboards/index.tsx","components/Forms/Select/index.tsx","components/Forms/index.tsx","components/Forms/BodyFatSelector/index.tsx","components/Forms/HeightInput/index.tsx","screens/GetStarted/AboutYou.tsx","components/Standards/StandardsComparison.tsx","components/Standards/LiftingStandardsCalculator.tsx","screens/GetStarted/Activity.tsx","screens/GetStarted/Configuration.tsx","screens/GetStarted/Nutrition.tsx","screens/GetStarted/Preferences.tsx","screens/GetStarted/Scheduling.tsx","screens/GetStarted/index.tsx","screens/ProgramSelection/Comparison.tsx","components/Nutrition/index.tsx","screens/ProgramSelection/NutritionRecommendation.tsx","utils/weight.ts","components/Targets/LiftingTargets.tsx","components/Targets/SpeedTargets.tsx","components/Workouts/WorkoutRoutinesHScroll.tsx","screens/ProgramSelection/ProgramRecommendation.tsx","screens/ProgramSelection/index.tsx","screens/Dashboard/Today.tsx","components/Workouts/WorkoutsList.tsx","screens/Dashboard/ThisWeek.tsx","screens/Dashboard/index.tsx","screens/Program/index.tsx","screens/Settings/index.tsx","screens/Vault/index.tsx","screens/Log/index.tsx","domain/workout/helpers.ts","screens/Workout/WorkoutSheet/components/ExerciseInfo.tsx","screens/Workout/WorkoutSheet/components/SetIdentifier.tsx","screens/Workout/WorkoutSheet/helpers.ts","screens/Workout/WorkoutSheet/Sets.tsx","screens/Workout/WorkoutSheet/Warmups.tsx","screens/Workout/WorkoutSheet/index.tsx","screens/Workout/index.tsx","App.tsx","components/Logo/logo.png","components/Navigation/go.png","screens/Welcome/welcome2.png","components/Forms/BodyFatSelector/Male10.png","components/Forms/BodyFatSelector/Male15.png","components/Forms/BodyFatSelector/Male20.png","components/Forms/BodyFatSelector/Male25.png","components/Forms/BodyFatSelector/Male30.png","components/Forms/BodyFatSelector/Female10.png","components/Forms/BodyFatSelector/Female15.png","components/Forms/BodyFatSelector/Female20.png","components/Forms/BodyFatSelector/Female25.png","components/Forms/BodyFatSelector/Female30.png"],"names":["Destination","nativeBaseTheme","extendTheme","fontSizes","xs","sm","md","lg","xl","colors","primary","secondary","components","Select","baseStyle","borderWidth","textAlign","paddingTop","Router","children","Platform","OS","useNavigate","useNavigateDom","linkStyle","color","Link","to","label","style","textDecoration","Text","RoutingButton","onPress","rest","navigate","Button","Loader","Center","height","Spinner","accessibilityLabel","Table","VStack","TableHeader","headings","HStack","alignItems","justifyContent","borderBottomWidth","borderBottomColor","marginBottom","map","heading","id","width","length","fontWeight","sideBorder","content","TableCell","bottomBorder","Box","fontSize","borderRightWidth","borderRightColor","TableRow","values","item","Paragraph","BulletPoint","marginY","marginLeft","marginRight","Video","video","includes","alignSelf","source","uri","useNativeControls","videoId","Logo","size","Image","alt","resizeMode","require","tabs","icon","action","Program","Log","image","Dashboard","Vault","Settings","Navigation","location","useLocation","useStoredState","selectedTab","setSelectedTab","useEffect","pathname","forEach","tab","idx","bg","safeAreaBottom","shadow","position","bottom","left","Pressable","opacity","py","flex","mb","as","MaterialCommunityIcons","name","DefaultLayout","showNav","showLogo","backgroundColor","safeArea","maxWidth","marginX","paddingY","ScrollView","HeadedLayout","headerElements","safeAreaTop","top","zIndex","bold","paddingBottom","marginTop","About","Heading","Home","Goal","ExperienceLevel","Gender","UnitsType","ActivityLevel","DietType","WeekDay","Headline","text","Welcome","t","useTranslation","Container","paddingLeft","GetStarted","NutritionType","DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getDateOfWeekday","dayName","date","Date","allowPast","now","getDay","day","findIndex","toLowerCase","diff","nextDayTimestamp","getTime","isDateInPast","today","setHours","getNextWorkoutDay","weeklySchedule","weekStart","previousWorkoutDate","proposedDate","scheduleDay","previousWorkoutDay","previousWorkoutDayIndex","getNextScheduledWeekday","schedule","found","parts","reduce","acc","current","push","week","convertScheduleToWeekdays","lbsToKg","lbs","feetToInches","feet","formatDecimalMins","time","min","Math","floor","sec","getWeightLabel","unitsType","Imperial","getHeightLabel","getCircumferenceLabel","bmrFormulas","miffinStJeor","gender","weightInLbs","heightInInches","age","Female","harrisBenedict","katchMcArdle","bodyFat","ExerciseType","Exercise","getTargetCalories","tdee","goal","cycleNutrition","numberOfWorkoutDays","higherCaloriesOnWeekends","preferAggressiveCut","isCut","Cut","AggressiveCut","modifier","Bulk","Maintain","getEnergyExpenditureModifier","average","workoutdaysTarget","restdaysTarget","weekendTarget","abs","trainingDay","restDay","weekend","energyExpenditureModifier","getNutritionRecommendation","cms","weight","activityLevel","primaryGoal","secondaryGoal","needsMetabolicReset","calcWeight","Metric","calcHeight","round","bmi","calculateBMI","bmr","args","formula","Object","keys","calculateBMR","Active","VeryActive","Sedentary","calculateTDEE","targetProtein","bodyWeightInLbs","grams","calculateMinimumProteinRequirement","largeDeficitDueToBodyfatMessage","type","reason","Male","Lean","Size","Strength","getNutritionTypeRecommendation","note","targetCalories","getTodaysCalories","recommendedNutrition","isWorkoutDay","dayOfWeek","isDateWeekend","ahtleanXRoutines","author","link","level","Beginner","Novice","Intermediate","Speed","daysPerWeek","workoutDuration","duration","workouts","warmup","percentage","reps","mainSets","targetReps","secondarySets","Array","routine","exercise","MultiLunge","sets","Squat","startingWeight","HipThrust","fill","minReps","maxReps","Bench","Chinup","DbCarry","ratio","Facepull","Deadlift","ReverseLunge","Press","Row","DbOverheadCarry","HipBand","PullApart","ssRoutines","PowerClean","optional","Advanced","basis","volumeSets","progressionSets","ignoreForTracking","bodyweight","AMRAP","Hyperextensions","PowerSnatch","slRoutines","Dips","Shrugs","TricepExtensions","Curl","CableCrunches","CloseGripBench","InclineCurls","Situp","vigilanteRoutines","RDL","WalkingLunges","Pullup","LateralRaises","Vigilante","Dip","HammerCurl","FrontSquat","InclineBench","DumbbellRow","DiamondPushUp","HighPulls","LegRaises","wendlerRoutines","programs","sort","a","b","getProgram","find","program","speedStandards","mileRun","fiveKmRun","getSpeedStandards","standardExercises","strengthStandards","oneRepMax","Pushup","getLiftStandards","getStrengthLevel","everLifted","accLevel","lift","liftStandards","liftLevel","levelStandards","oneRepMaxForComparison","meetsOneRepMaxBasedStandard","meetsWeightBasedStandard","meetsRepBasedStandard","getLiftLevel","isLowerStandard","indexOf","undefined","formulas","epley","brzycki","oconner","lombardi","wathan","exp","mayhem","lander","calculatRepMax","multiplier","calculateThreeRepMax","calculateFiveRepMax","calculateEightRepMax","calculateTenRepMax","calculateTwelveRepMax","calculateFithteenRepMax","calculateTwentyRepMax","calculateRepMaxes","calculate1RepMax","threeRepMax","fiveRepMax","eightRepMax","tenRepMax","twelveRepMax","fithteenRepMax","twentyRepMax","calculateStrengthStandards","lifts","key","repMaxes","getTraineeMetrics","trainee","currentLifts","hasLifted","bestMileRunTime","bestfiveKmRunTime","strengthMetrics","speedMetrics","strengthLevel","speedLevel","mileRunTime","runStandards","meetsMileRunStandard","meetsFiveKmStandard","getSpeedLevel","getTraineeRecommendations","traineeMetrics","preferredNumberOfWorkoutsPerWeek","preferredWorkoutDuration","preferredUnitsType","prefersHigherCaloriesOnWeekends","prefersCycledNutrition","prefersAggressiveCut","recommendedPrograms","maxDaysPerWeek","maxWorkoutDuration","suitablePrograms","filter","isLevelAppropriate","isGenderAppropriate","meetsPrimaryGoal","meetsSecondaryGoal","isSuitableSchedule","bestMatch","getProgramRecommendations","speedTargets","standards","getNextSpeedTargets","liftTargets","lifterStandards","getLiftTarget","currentLift","levelStandard","levelOneRepMax","levelRatio","target","getNextLiftTargets","bodyFatTarget","scheduleReducer","payload","experienceLevel","createSchedule","newSchedule","exerciseId","setId","value","status","markAllSetsAsComplete","isWarmup","recommendedWeight","updateWorkoutWithCompletedSet","Error","firstWorkoutMustBeOnWeekStart","totalWorkouts","workoutWeeklyIndex","workoutId","set","traineeReducer","formData","field","defaultTrainee","preferredDietType","preferredWeekStart","preferredWorkoutDays","prefersProgramHoping","prefersMinimalLegs","preferredBarbellIncrement","preferredBarbellDecrement","preferredDumbbellIncrement","preferredDumbbellDecrement","useTrainee","useStoredReducer","dispatch","updateTrainee","traineeLoaded","resetTrainee","useActiveProgram","activeProgram","setActiveProgram","activeProgramLoaded","unsetIsActive","updateSchedule","scheduleLoaded","unsetSchedule","todaysWorkout","getTodaysWorkout","active","initialiseProgram","resetProgram","useLog","workoutLog","setWorkoutLog","workoutLogLoaded","removeWorkoutLog","logLoaded","logWorkout","workout","datePerformed","resetLog","DashboardHeading","DashboardCard","useTheme","padding","rounded","white","DashboardLabel","DashboardDetail","onValueChange","selectedValue","items","border","inputWeb","paddingRight","inputIOS","borderColor","borderRadius","inputAndroid","iconContainer","fixAndroidTouchableBug","Icon","EnumSelect","Enum","EnumMultiSelect","selectedValues","onChange","Checkbox","Group","defaultValue","space","flexWrap","my","FormCard","InlineField","allowWrap","StackedField","BottomButtonsBox","BodyFatImageMap","10","15","20","25","30","BodyFatSelector","setBodyFat","Radio","toString","Number","percent","HeightInput","setHeight","Input","keyboardType","onChangeText","ImperialHeightInput","useState","setFeet","inches","setInches","converted","inchesToFeet","onSetHeight","AboutYou","waist","unitLabel","StrengthStandardsComparison","weightLabel","horizontal","showsHorizontalScrollIndicator","minWidth","getCellContent","isStandard","italic","SpeedtandardsComparison","genderStandards","LiftingStandardsCalculator","setLifts","useMemo","attr","cellWidth","calculated","Activity","maxPushUps","maxPullUps","newLifts","Configuration","Nutrition","Switch","isChecked","checked","Preferences","Scheduling","weightUnitLabel","Alert","colorScheme","flexShrink","newValues","Arrow","enableContinueButton","ProgramSelection","disabled","Comparison","NutritionInfo","protocol","Divider","NutritionRecommendations","NutritionRecommendation","toNearestIncrement","increment","inc","LiftingTargets","roundedFiveReps","SpeedTargets","getExerciseRepLabel","currentIndex","array","str","join","WorkoutRoutinesHScroll","showVideos","wid","hasDivider","orientation","ProgramRecommendation","setProgram","showAllPrograms","setShowAllPrograms","selectedProgram","selectedProgramWorkouts","programList","Today","startWorkout","calories","protein","Trans","WorkoutList","dateFormat","isDone","MaterialIcons","toLocaleDateString","weekday","month","goToWorkout","ThisWeek","thisWeeksWorkouts","entry","dayjs","isSame","getScheduledForThisWeek","completedCount","total","year","workoutName","getPreviousWorkoutOfType","previous","i","getPreviousLift","previousWorkout","previousSet","updateCurrentLifts","setCurrentLifts","curr","currentFails","fails","isFail","ExerciseInfo","modalVisible","setModalVisible","Modal","isOpen","onClose","CloseButton","SetIdentifier","background","getTargetRepsPlaceholder","placeholder","getPreviousLabel","prev","Sets","getRecommendedWeight","onSetComplete","setSets","onUpdate","newSets","display","Warmups","WorkoutSheet","Workout","useParams","setsDone","setSetsDone","nextRestDuration","setNextRestDuration","remainingTime","setRemainingTime","getWorkoutById","count","getCompleteSetCount","totalSets","getWorkoutTotalSetCount","getSetRecommendedWeight","barbellIncrement","barbellDecrement","dumbbellIncrement","dumbbellDecrement","smallestIncrement","deloadDecrement","needsDeload","passedLastAttempt","needsToRepeatPrevious","Progress","w","strokeWidth","isPlaying","onChangeSetReps","onChangeSetWeight","restTime","App","NativeBaseProvider","theme","path","element","i18n","use","initReactI18next","init","resources","lng","fallbackLng","module","exports"],"mappings":"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","file":"static/js/app.0abf0f41.chunk.js","sourcesContent":["import { Button, IButtonProps, Text } from 'native-base';\nimport { Linking, Platform } from 'react-native';\nimport { NavigateFunction } from 'react-router';\nimport { HashRouter, Link as DomLink, useNavigate as useNavigateDom } from 'react-router-dom';\nimport { NativeRouter, Link as NativeLink, useNavigate as useNavigateNative } from 'react-router-native';\n\nexport enum Destination {\n  About = '/About',\n  Dashboard = '/Dashboard',\n  GetStarted = '/GetStarted',\n  Home = '/',\n  Log = '/Log',\n  ProgramSelection = '/ProgramSelection',\n  Program = '/Program',\n  Settings = '/Settings',\n  Vault = '/Vault',\n  Workout = '/Workout/:id',\n}\n\nexport const Router = ({ children }: { children: React.ReactNode }) =>\n  Platform.OS === 'web' ? <HashRouter>{children}</HashRouter> : <NativeRouter>{children}</NativeRouter>;\n\nexport const useNavigate = () => (Platform.OS === 'web' ? useNavigateDom() : useNavigateNative());\n\nconst linkStyle = { color: '#FF8533' };\n\nexport const Link = ({ to, label }: { to: Destination; label: string }) => {\n  return Platform.OS === 'web' ? (\n    <DomLink to={to} style={{ textDecoration: 'none' }}>\n      <Text style={linkStyle}>{label}</Text>\n    </DomLink>\n  ) : (\n    <NativeLink to={to}>\n      <Text style={linkStyle}>{label}</Text>\n    </NativeLink>\n  );\n};\n\nexport const ExternalLink = ({ to, text }: { to: string; text: string }) => {\n  return (\n    <Text\n      style={linkStyle}\n      onPress={() => {\n        Linking.openURL(to);\n      }}\n    >\n      {text}\n    </Text>\n  );\n};\n\nexport const RoutingButton = ({\n  children,\n  to,\n  onPress,\n  ...rest\n}: {\n  children: React.ReactNode;\n  to: Destination | string;\n  secondary?: boolean;\n  onPress?: () => void;\n} & IButtonProps) => {\n  const navigate = useNavigate();\n  return (\n    <Button\n      {...rest}\n      onPress={() => {\n        onPress && onPress();\n        navigate(to);\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const goToAbout = (navigate: NavigateFunction) => navigate(Destination.About);\n\nexport const goToGetStarted = (navigate: NavigateFunction) => navigate(Destination.GetStarted);\n\nexport const goToHome = (navigate: NavigateFunction) => navigate(Destination.Home);\n\nexport const goToDashboard = (navigate: NavigateFunction) => navigate(Destination.Dashboard);\n\nexport const goToLog = (navigate: NavigateFunction) => navigate(Destination.Log);\n\nexport const goToProgram = (navigate: NavigateFunction) => navigate(Destination.Program);\n\nexport const goToVault = (navigate: NavigateFunction) => navigate(Destination.Vault);\n\nexport const goToSettings = (navigate: NavigateFunction) => navigate(Destination.Settings);\n\nexport const goToWorkout = (navigate: NavigateFunction) => (id: number) => navigate(`/Workout/${id}`);\n","import { extendTheme } from 'native-base';\n\nimport { Select } from './components/Select';\n\nexport const nativeBaseTheme = extendTheme({\n  fontSizes: {\n    xs: 11,\n    sm: 13,\n    md: 15,\n    lg: 18,\n    xl: 28,\n  },\n  colors: {\n    primary: {\n      '50': '#FFF3EB',\n      '100': '#FFE7D6',\n      '200': '#FFCEAD',\n      '300': '#FFB685',\n      '400': '#FF9D5C',\n      '500': '#FF8533',\n      '600': '#F56200',\n      '700': '#B84900',\n      '800': '#7A3100',\n      '900': '#3D1800',\n    },\n    secondary: {\n      '50': '#f9f9f8',\n      '100': '#e0e0de',\n      '200': '#a5a5a5',\n      '300': '#808080',\n      '400': '#656565',\n      '500': '#4a4a4a',\n      '600': '#434343',\n      '700': '#3a3a3a',\n      '800': '#323232',\n      '900': '#222222',\n    },\n  },\n  components: {\n    Select,\n  },\n});\n","export const Select = {\n  baseStyle: {\n    borderWidth: 0,\n    textAlign: 'right',\n    paddingTop: 0,\n  },\n};\n\n","import { Center, Spinner } from 'native-base';\n\nexport const Loader = () => (\n  <Center height={'100%'}>\n    <Spinner accessibilityLabel=\"Loading\" />\n  </Center>\n);\n","import React from 'react';\nimport { Box, HStack, Text, VStack } from 'native-base';\n\ninterface Cell {\n  content?: string | number | React.ReactNode;\n  fontWeight?: number | string;\n  textAlign?: string;\n  width?: string | number;\n  sideBorder?: boolean;\n  bottomBorder?: boolean;\n}\n\nexport const Table = ({ children }: { children: React.ReactNode }) => <VStack>{children}</VStack>;\n\nexport const TableHeader = ({ headings }: { headings: Cell[] }) => {\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'space-between'}\n      borderBottomWidth={1}\n      borderBottomColor={'secondary.100'}\n      marginBottom={1}\n    >\n      {headings.map((heading, id) => (\n        <TableCell\n          key={`${id}-${heading.content}`}\n          width={`${100 / headings.length}%`}\n          textAlign={heading.textAlign ?? 'center'}\n          fontWeight={500}\n          sideBorder={heading.sideBorder}\n          {...heading}\n        />\n      ))}\n    </HStack>\n  );\n};\n\nexport const TableCell = ({ width, textAlign, sideBorder, bottomBorder, content, fontWeight }: Cell) => {\n  return (\n    <>\n      {typeof content === 'object' ? (\n        <Box width={width}>{content}</Box>\n      ) : (\n        <Text\n          fontSize={'xs'}\n          fontWeight={fontWeight}\n          width={width}\n          // @ts-expect-error force text align string\n          textAlign={textAlign}\n          borderRightWidth={sideBorder ? 1 : 0}\n          borderBottomWidth={bottomBorder ? 1 : 0}\n          borderRightColor={'secondary.100'}\n        >\n          {content}\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport const TableRow = ({ children, values }: { children?: React.ReactNode; values?: Cell[] }) => {\n  return (\n    <HStack alignItems={'center'} justifyContent={'space-between'} marginBottom={1}>\n      {values?.map((item: Cell, id: number) => (\n        <TableCell key={`cell-${id}`} width={item.width ?? `${100 / values.length}%`} {...item} />\n      ))}\n      {children}\n    </HStack>\n  );\n};\n","import { HStack, Text } from 'native-base';\n\nexport const Paragraph = ({ children }: { children: React.ReactNode }) => <Text marginBottom={5}>{children}</Text>;\n\nexport const BulletPoint = ({ children }: { children: React.ReactNode }) => (\n  <HStack marginY={1} marginLeft={3}>\n    <Text marginRight={2}>{'\\u{29BF}'}</Text>\n    <Text>{children}</Text>\n  </HStack>\n);\n","import YoutubePlayer from 'react-native-youtube-iframe';\nimport { Video as ExpoVideo } from 'expo-av';\n\nexport const Video = ({ video, width = 320 }: { video: string; width?: number }) => {\n  const height = width * (9 / 16);\n  if (video.includes('http')) {\n    return (\n      <ExpoVideo\n        style={{\n          alignSelf: 'center',\n          width,\n          height,\n        }}\n        source={{\n          uri: video,\n        }}\n        useNativeControls\n      />\n    );\n  }\n\n  return <YoutubePlayer width={width} height={height} videoId={video} />;\n};\n","import { Image } from 'native-base';\n\ntype LogoSize = 'sm' | 'md';\n\nconst Logo = ({ size }: { size?: LogoSize }) => {\n  let height = 268; // actual image height\n  switch (size) {\n    case 'sm':\n      height = height / 10;\n      break;\n    case 'md':\n      height = height / 4;\n      break;\n  }\n  return (\n    <Image marginBottom={1} width={'100%'} height={height} alt={'logo'} resizeMode={'contain'} source={require(`./logo.png`)} />\n  );\n};\n\nexport default Logo;\n","import { ReactElement, useEffect } from 'react';\nimport { Center, HStack, Icon, Image, Pressable, Text } from 'native-base';\nimport { NavigateFunction, useLocation } from 'react-router';\nimport { ImageSourcePropType, Platform } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useStoredState } from 'react-native-use-stored-state';\n\nimport { goToDashboard, goToLog, goToProgram, goToSettings, goToVault, useNavigate } from '../../utils/routing';\n\ninterface Tab {\n  label?: string;\n  icon?: string;\n  image?: ImageSourcePropType;\n  action: (navigate: NavigateFunction) => void;\n}\n\nconst tabs: Tab[] = [\n  {\n    label: 'Program',\n    icon: 'dumbbell',\n    action: goToProgram,\n  },\n  {\n    label: 'Log',\n    icon: 'calendar',\n    action: goToLog,\n  },\n  {\n    image: require('./go.png'),\n    action: goToDashboard,\n  },\n  {\n    label: 'Vault',\n    icon: 'video',\n    action: goToVault,\n  },\n  {\n    label: 'Settings',\n    icon: 'cog',\n    action: goToSettings,\n  },\n];\n\nexport const Navigation = (): ReactElement => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab] = useStoredState<number>('ACTIVE_NAV_TAB', 2);\n\n  useEffect(() => {\n    if (location.pathname.includes('Dashboard')) {\n      setSelectedTab(2);\n    } else {\n      tabs.forEach((tab, idx) => {\n        if (tab.label && location.pathname.includes(tab.label)) {\n          setSelectedTab(idx);\n        }\n      });\n    }\n  }, [location]);\n\n  return (\n    <HStack\n      bg={'secondary.100'}\n      alignItems={'center'}\n      safeAreaBottom\n      shadow={5}\n      paddingTop={2}\n      //@ts-expect-error forced web styles for sticky nav\n      style={Platform.OS === 'web' ? { position: 'fixed', bottom: 0, left: 0, width: '100%' } : {}}\n    >\n      {tabs.map((tab, id) => (\n        <Pressable\n          key={`nav-tab-${id}`}\n          opacity={selectedTab === id ? 1 : 0.5}\n          py={2}\n          flex={1}\n          onPress={() => {\n            setSelectedTab(id);\n            tab.action(navigate);\n          }}\n        >\n          <Center>\n            {tab.icon && <Icon mb={1} as={MaterialCommunityIcons} name={tab.icon} size={'md'} />}\n            {tab.label && <Text>{tab.label}</Text>}\n            {tab.image && <Image width={10} height={10} alt={'Next Workout'} resizeMode={'contain'} source={tab.image} />}\n          </Center>\n        </Pressable>\n      ))}\n    </HStack>\n  );\n};\n","import { Box, Center, ScrollView, Text } from 'native-base';\nimport { Platform } from 'react-native';\n\nimport Logo from '../Logo';\nimport { Navigation } from '../Navigation';\n\nexport const DefaultLayout = ({\n  children,\n  showNav,\n  showLogo,\n  backgroundColor = 'secondary.50',\n}: {\n  showNav?: boolean;\n  showLogo?: boolean;\n  children: React.ReactNode;\n  backgroundColor?: 'secondary.100' | 'secondary.50';\n}) => {\n  return (\n    <>\n      <Box flex={1} backgroundColor={backgroundColor}>\n        <Box safeArea flex={1} maxWidth={600} width={'95%'} marginX={'auto'} paddingY={5}>\n          <ScrollView>\n            {showLogo && (\n              <Center paddingY={5}>\n                <Logo size={'md'} />\n              </Center>\n            )}\n            {children}\n          </ScrollView>\n        </Box>\n      </Box>\n      {showNav && <Navigation />}\n    </>\n  );\n};\n\nexport const HeadedLayout = ({\n  showNav,\n  children,\n  backgroundColor = 'secondary.50',\n  heading,\n  headerElements,\n}: {\n  showNav?: boolean;\n  children: React.ReactNode;\n  heading?: string;\n  headerElements?: React.ReactNode;\n  backgroundColor?: string;\n}) => {\n  return (\n    <Box flex={1} backgroundColor={backgroundColor}>\n      <Box flex={1} maxWidth={600} width={'100%'} marginX={'auto'}>\n        <Box\n          safeAreaTop\n          bg={'secondary.500'}\n          paddingY={2}\n          //@ts-expect-error forced web styles for sticky top\n          style={Platform.OS === 'web' ? { position: 'fixed', top: 0, left: 0, width: '100%', zIndex: 100 } : {}}\n        >\n          <Center>\n            <Logo size={'sm'} />\n            {heading && (\n              <Text bold color={'white'}>\n                {heading}\n              </Text>\n            )}\n            {headerElements && <>{headerElements}</>}\n          </Center>\n        </Box>\n        <ScrollView\n          flex={1}\n          width={'96%'}\n          marginX={'auto'}\n          paddingBottom={20}\n          style={Platform.OS === 'web' ? { marginTop: '75px' } : {}}\n        >\n          {children}\n        </ScrollView>\n        {showNav && <Navigation />}\n      </Box>\n    </Box>\n  );\n};\n","import { Heading } from 'native-base';\n\nimport { Paragraph } from '../../components/Content';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nexport default function About() {\n  return (\n    <DefaultLayout showNav>\n      <Heading>About</Heading>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n        aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n        aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n        cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <Link to={Destination.Home} label={'Link back to home'} />\n      </Paragraph>\n      <RoutingButton to={Destination.Home}>Routing Button back to home</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","export enum Goal {\n  Strength = 'Strength',\n  Size = 'Size',\n  Lean = 'Leanness',\n  Speed = 'Speed',\n}\n\nexport enum ExperienceLevel {\n  Beginner = 'Average Joe',\n  Novice = 'Novice',\n  Intermediate = 'Intermediate',\n  Advanced = 'Advanced',\n  Vigilante = 'Vigilante',\n}\n\nexport enum Gender {\n  Male = 'Male',\n  Female = 'Female',\n}\n\nexport enum UnitsType {\n  Metric = 'Metric (kg/cm)',\n  Imperial = 'Imperial (lbs/inches)',\n}\n\nexport enum ActivityLevel {\n  Sedentary = 'Lightly Active (sedentary job)',\n  Active = 'Active (over 10k steps per day)',\n  VeryActive = 'Very Active (physically demanding job)',\n}\n\nexport enum DietType {\n  Balanced = 'Balanced',\n  Keto = 'Keto',\n  Carnivore = 'Carnivore',\n  Pescatarian = 'Pescatarian',\n  Vegetarian = 'Vegetarian',\n  Vegan = 'Vegan',\n}\n\nexport enum WeekDay {\n  Monday = 'Monday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday',\n  Thursday = 'Thursday',\n  Friday = 'Friday',\n  Saturday = 'Saturday',\n  Sunday = 'Sunday',\n}\n","import { Center, Container, Image, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nconst Headline = ({ text }: { text: string }) => (\n  <Text fontSize={'2xl'} marginBottom={2} fontWeight={500}>\n    {text}\n  </Text>\n);\n\nexport default function Welcome() {\n  const { t } = useTranslation();\n  return (\n    <DefaultLayout showLogo backgroundColor={'secondary.100'}>\n      <Center paddingTop={5}>\n        <Text textAlign={'center'} fontSize={'lg'} marginBottom={5}>\n          {t('The simple, enjoyable and sustainable approach to training.')}\n        </Text>\n        <Headline text={t('Get Stronger,')} />\n        <Headline text={t('Get Faster,')} />\n        <Headline text={t('Get Leaner.')} />\n      </Center>\n      <Center paddingY={5}>\n        <Image width={'100%'} height={320} resizeMode={'contain'} alt={'Welcome'} source={require(`./welcome2.png`)} />\n      </Center>\n      <Center marginY={5}>\n        <Text textAlign={'center'}>\n          <>\n            {t(\n              'This app matches your current level of strength and fitness to tried and tested training and nutrition regimes that are sustainable for your lifestyle and preferences. It sets you short term goals and as you progress the programming updates with new targets and appropriate routines. It keeps you progressing in the most optimal way possible and you will see your physique and performance transform to that of a vigilante...'\n            )}\n            <Container paddingLeft={1}>\n              <Link to={Destination.About} label={t('Tell me more')} />\n            </Container>\n          </>\n        </Text>\n      </Center>\n      <RoutingButton to={Destination.GetStarted}>{t('Get Started')}</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { isDateWeekend } from '../../utils/calendar';\nimport { cmToInches, kgToLbs } from '../../utils/measurements';\nimport { ActivityLevel, Gender, Goal, UnitsType } from '../constants';\nimport { calculateBMI, calculateBMR, calculateMinimumProteinRequirement, calculateTDEE } from './calculators';\n\nconst AGGRESSIVE_CUT_DEFICIT = -600;\nconst CUT_DEFICIT = -400;\nconst BULK_SURPLUS = 300;\nconst MAX_CALORIES = 2600;\nconst UNDERWEIGHT_BMI = 18.5;\n\nexport enum NutritionType {\n  AggressiveCut = 'Aggressive Cut',\n  Cut = 'Cut',\n  Bulk = 'Lean Bulk',\n  Maintain = 'Maintain',\n}\n\nexport interface NutritionProtocol {\n  type: NutritionType;\n  note?: string;\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  cycleNutrition: boolean;\n  higherCaloriesOnWeekends: boolean;\n  targetCalories: {\n    energyExpenditureModifier: number;\n    trainingDay: number;\n    restDay: number;\n    weekend: number;\n    average: number;\n  };\n  targetProtein: number;\n}\n\nconst getNutritionTypeRecommendation = ({\n  gender,\n  bodyFat,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset,\n  bmi,\n}: {\n  gender: Gender;\n  bodyFat: number;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset: boolean;\n  bmi: number;\n}): { type: NutritionType; reason?: string } => {\n  const largeDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to handle an aggressive deficit while still making gains in strength and muscle mass.';\n  const smallDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to make gains in strength and muscle while on a small deficit.';\n  const metabolicResetMessage =\n    'Given you have been dieting on low or unknown calories for some time without results, it is essential you eat at maintenance for 2-4 weeks.';\n  const lowBMIMessage = 'You are underweight for your height and should focus on adding muscle to your frame.';\n\n  if (bmi < UNDERWEIGHT_BMI && bodyFat > 10) {\n    return { type: NutritionType.Bulk, reason: lowBMIMessage };\n  }\n\n  if (needsMetabolicReset) {\n    return { type: NutritionType.Maintain, reason: metabolicResetMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 20) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 30) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 15) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 20) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (primaryGoal === Goal.Lean) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (secondaryGoal === Goal.Lean && bodyFat >= 15) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (\n    primaryGoal === Goal.Size ||\n    secondaryGoal === Goal.Size ||\n    primaryGoal === Goal.Strength ||\n    secondaryGoal === Goal.Strength\n  ) {\n    return { type: NutritionType.Bulk };\n  }\n\n  return { type: NutritionType.Maintain };\n};\n\nconst getEnergyExpenditureModifier = (goal: NutritionType, preferAggressiveCut: boolean) => {\n  switch (goal) {\n    case NutritionType.AggressiveCut:\n    case NutritionType.Cut:\n      if (preferAggressiveCut) {\n        return AGGRESSIVE_CUT_DEFICIT;\n      }\n      return CUT_DEFICIT;\n    case NutritionType.Bulk:\n      return BULK_SURPLUS;\n    case NutritionType.Maintain:\n    default:\n      return 0;\n  }\n};\n\nconst getTargetCalories = ({\n  tdee,\n  goal,\n  cycleNutrition,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends,\n  preferAggressiveCut,\n}: {\n  tdee: number;\n  goal: NutritionType;\n  cycleNutrition: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends: boolean;\n  preferAggressiveCut: boolean;\n}): { trainingDay: number; restDay: number; weekend: number; average: number; energyExpenditureModifier: number } => {\n  const isCut = goal === NutritionType.Cut || goal === NutritionType.AggressiveCut;\n\n  const modifier = getEnergyExpenditureModifier(goal, preferAggressiveCut);\n  const average = tdee + modifier;\n\n  let workoutdaysTarget = average;\n  let restdaysTarget = average;\n  let weekendTarget = average;\n\n  if (cycleNutrition) {\n    workoutdaysTarget = average + Math.abs(modifier);\n    restdaysTarget = average - Math.abs((modifier * numberOfWorkoutDays!) / (7 - numberOfWorkoutDays!));\n    weekendTarget = restdaysTarget;\n  }\n\n  if (higherCaloriesOnWeekends) {\n    weekendTarget = weekendTarget + 500;\n    workoutdaysTarget = workoutdaysTarget - 200;\n    restdaysTarget = restdaysTarget - 200;\n  }\n\n  if (isCut && workoutdaysTarget > MAX_CALORIES) {\n    workoutdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && restdaysTarget > MAX_CALORIES) {\n    restdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && weekendTarget > MAX_CALORIES) {\n    weekendTarget = MAX_CALORIES;\n  }\n\n  return {\n    trainingDay: workoutdaysTarget,\n    restDay: restdaysTarget,\n    weekend: weekendTarget,\n    average,\n    energyExpenditureModifier: modifier,\n  };\n};\n\nexport const getNutritionRecommendation = ({\n  gender,\n  weight,\n  height,\n  age,\n  unitsType,\n  bodyFat,\n  activityLevel,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset = false,\n  cycleNutrition = false,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends = false,\n  preferAggressiveCut = false,\n}: {\n  gender: Gender;\n  weight: number;\n  height: number;\n  age: number;\n  unitsType: UnitsType;\n  bodyFat: number;\n  activityLevel: ActivityLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset?: boolean;\n  cycleNutrition?: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends?: boolean;\n  preferAggressiveCut?: boolean;\n}): NutritionProtocol => {\n  const calcWeight = unitsType === UnitsType.Metric ? kgToLbs(weight) : weight;\n  const calcHeight = unitsType === UnitsType.Metric ? cmToInches(height) : height;\n\n  const bmi = calculateBMI(calcWeight, calcHeight);\n  const bmr = calculateBMR({ heightInInches: calcHeight, weightInLbs: calcWeight, gender, bodyFat, age });\n  const tdee = calculateTDEE(activityLevel, bmr);\n  const targetProtein = calculateMinimumProteinRequirement(calcWeight, bodyFat);\n\n  const { type, reason } = getNutritionTypeRecommendation({\n    gender,\n    bodyFat,\n    primaryGoal,\n    secondaryGoal,\n    needsMetabolicReset,\n    bmi,\n  });\n\n  const targetCalories = getTargetCalories({\n    tdee,\n    goal: type,\n    cycleNutrition: cycleNutrition ?? false,\n    numberOfWorkoutDays,\n    higherCaloriesOnWeekends,\n    preferAggressiveCut,\n  });\n\n  return {\n    type,\n    note: reason,\n    bmi,\n    bmr,\n    tdee,\n    targetCalories,\n    targetProtein,\n    cycleNutrition,\n    higherCaloriesOnWeekends,\n  };\n};\n\nexport const getTodaysCalories = (recommendedNutrition: NutritionProtocol, isWorkoutDay: boolean) => {\n  const { targetCalories } = recommendedNutrition;\n  const isWeekend = isDateWeekend();\n  return (\n    (isWeekend ? targetCalories.weekend : isWorkoutDay ? targetCalories.trainingDay : targetCalories.restDay) ??\n    targetCalories.average\n  );\n};\n","import { WeekDay } from '../domain/constants';\n\n// Hard coded week day array as internally represented by javascript, sunday - saturday\nconst DAYS = [\n  WeekDay.Sunday,\n  WeekDay.Monday,\n  WeekDay.Tuesday,\n  WeekDay.Wednesday,\n  WeekDay.Thursday,\n  WeekDay.Friday,\n  WeekDay.Saturday,\n];\n\nexport const getDateOfWeekday = (dayName: WeekDay, date = new Date(), allowPast = true): Date => {\n  const now = date.getDay();\n  // The index for the day you want\n  const day = DAYS.findIndex((item: string) => dayName.toLowerCase() === item.toLowerCase());\n  // diff between desired day of week and now\n  let diff = day - now;\n  diff = diff < 0 && !allowPast ? diff + 7 : diff;\n  // Get the timestamp for the desired day, negative if it has already passed\n  const nextDayTimestamp = date.getTime() + 1000 * 60 * 60 * 24 * diff;\n\n  return new Date(nextDayTimestamp);\n};\n\nexport const addDays = (date: Date, days: number) => {\n  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n};\n\nexport const isDateWeekend = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 6 || dayOfWeek === 0; // 6 = Saturday, 0 = Sunday\n};\n\nexport const isDateConsecutiveDay = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 4 || dayOfWeek === 5; // 4 = Thursday, 5 = Friday\n};\n\nconst isDateInPast = (date: Date) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return date.getTime() < today.getTime();\n};\n\nexport const convertScheduleToWeekdays = (schedule: number[], weekStart: WeekDay): WeekDay[] => {\n  let map: { found: boolean; parts: WeekDay[][] } = { found: false, parts: [[], []] };\n  map = DAYS.reduce((acc, current) => {\n    if (current === weekStart) acc.found = true;\n    acc.found ? acc.parts[1].push(current) : acc.parts[0].push(current);\n    return acc;\n  }, map);\n\n  const week = [...map.parts[1], ...map.parts[0]];\n  return schedule.map((day) => week[day]);\n};\n\nexport const getNextScheduledWeekday = (weeklySchedule: WeekDay[], previousWorkoutDate: Date): WeekDay => {\n  const previousWorkoutDay = DAYS[previousWorkoutDate.getDay()];\n  const previousWorkoutDayIndex = weeklySchedule.findIndex(\n    (item: string) => previousWorkoutDay.toLowerCase() === item.toLowerCase()\n  );\n  const nextWorkoutIndex = previousWorkoutDayIndex + 1 > weeklySchedule.length - 1 ? 0 : previousWorkoutDayIndex + 1;\n  return weeklySchedule[nextWorkoutIndex];\n};\n\nexport const getNextWorkoutDay = (weeklySchedule: number[], weekStart: WeekDay, previousWorkoutDate?: Date): Date => {\n  if (!previousWorkoutDate) {\n    let proposedDate = getDateOfWeekday(weekStart);\n    while (isDateInPast(proposedDate)) {\n      proposedDate = getNextWorkoutDay(weeklySchedule, weekStart, proposedDate);\n    }\n    return proposedDate;\n  }\n\n  const schedule = convertScheduleToWeekdays(weeklySchedule, weekStart);\n  const scheduleDay = getNextScheduledWeekday(schedule, previousWorkoutDate);\n  return getDateOfWeekday(scheduleDay, previousWorkoutDate, false);\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const kgToLbs = (kg: number): number => (kg *= 2.2);\n\nexport const lbsToKg = (lbs: number): number => (lbs /= 2.2);\n\nexport const cmToInches = (cms: number): number => Math.round(cms * 0.393701);\n\nexport const feetToCms = (feet: number): number => Math.round(feet * 30.48);\n\nexport const feetToInches = (feet: number): number => feet * 12;\n\nexport const inchesToFeet = (inches: number): number => inches / 12;\n\nexport const formatDecimalMins = (time: number): string => {\n  const min = Math.floor(time);\n  const sec = Math.floor((time * 60) % 60);\n  return (min < 10 ? '0' : '') + min + ':' + (sec < 10 ? '0' : '') + sec;\n};\n\nexport const getWeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'lbs' : 'kg';\n};\n\nexport const getHeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'feet' : 'cm';\n};\n\nexport const getCircumferenceLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'inches' : 'cm';\n};\n","import { ActivityLevel, Gender } from '../constants';\n\ninterface BmrArgs {\n  weightInLbs: number;\n  heightInInches: number;\n  age: number;\n  gender: Gender;\n  bodyFat: number;\n}\n\nconst bmrFormulas: { [key: string]: (args: BmrArgs) => number } = {\n  miffinStJeor: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age - 161;\n    }\n\n    return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age + 5;\n  },\n  harrisBenedict: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 655.1 + 4.35 * weightInLbs + 4.7 * heightInInches - 4.7 * age;\n    }\n\n    return 66.47 + 6.24 * weightInLbs + 12.7 * heightInInches - 6.755 * age;\n  },\n  katchMcArdle: ({ bodyFat, weightInLbs }: BmrArgs) => {\n    const leanMass = ((weightInLbs / 2.2) * (100 - bodyFat)) / 100;\n    return 370 + 21.6 * leanMass;\n  },\n};\n\nexport const calculateBMR = (args: BmrArgs, formula?: keyof typeof bmrFormulas): number => {\n  if (formula) {\n    return Math.round(bmrFormulas[formula](args));\n  }\n\n  const acc = Object.keys(bmrFormulas).reduce((acc, current) => {\n    return acc + bmrFormulas[current](args);\n  }, 0);\n\n  return Math.round(acc / Object.keys(bmrFormulas).length);\n};\n\nexport const calculateTDEE = (activityLevel: ActivityLevel, bmr: number): number => {\n  let tdee;\n  switch (activityLevel) {\n    case ActivityLevel.Active:\n      tdee = bmr * 1.55;\n      break;\n    case ActivityLevel.VeryActive:\n      tdee = bmr * 1.725;\n      break;\n    case ActivityLevel.Sedentary:\n    default:\n      tdee = bmr * 1.375;\n  }\n\n  return Math.floor(tdee / 10) * 10;\n};\n\nexport const calculateMinimumProteinRequirement = (bodyWeightInLbs: number, bodyFat: number): number => {\n  const grams = bodyWeightInLbs - bodyWeightInLbs * (bodyFat / 100);\n  return Math.round(grams / 5) * 5;\n};\n\nexport const calculateBMI = (weightInLbs: number, heightInInches: number) => {\n  const bmi = (weightInLbs / heightInInches ** 2) * 703;\n  return Math.round(bmi * 10) / 10;\n};\n","export enum ExerciseType {\n  Duration = 'Barbell',\n  Distance = 'Dumbbell',\n  Bodyweight = 'Bodyweight',\n  Machine = 'Machine',\n}\n\nexport enum Exercise {\n  Bench = 'Bench Press',\n  InclineBench = 'Incline Press',\n  Press = 'Press',\n  CloseGripBench = 'Close Grip Bench Press',\n  Dips = 'Dips',\n  LateralRaises = 'Lateral Raises',\n  DiamondPushUp = 'Diamond Pushups',\n\n  Deadlift = 'Deadlift',\n  RDL = 'Romanian Deadlift',\n  Squat = 'Squat',\n  FrontSquat = 'Front Squat',\n  Hyperextensions = 'Hyperextensions',\n\n  Curl = 'Curls',\n  InclineCurls = 'Incline Curls',\n  TricepExtensions = 'Tricep Extensions',\n  HammerCurl = 'Hammer Curls',\n  DBSkulls = 'Dumbbell Skullcrushers',\n\n  Row = 'Row',\n  DumbbellRow = 'Dumbbell Row',\n  Shrugs = 'Shrugs',\n\n  MultiLunge = 'Multi Directional Lunge',\n  ReverseLunge = 'Reverse Lunge',\n  WalkingLunges = 'Walking Lunges',\n  HipThrust = 'Hip Thrusts',\n  HipBand = 'Hip Bands Side Steps',\n\n  Facepull = 'Face pulls',\n  PullApart = 'Band Pull Aparts',\n  HighPulls = 'High Pulls',\n\n  Pullup = 'Pull Ups',\n  Chinup = 'Chin Ups',\n  Pushup = 'Push Ups',\n  Dip = 'Dips',\n\n  CableCrunches = 'Cable Crunches',\n  Situp = 'Weighted Sit Up',\n  LegRaises = 'Leg Raises',\n\n  PowerClean = 'Power Clean',\n  PowerSnatch = 'Power Snatch',\n\n  MileRun = 'Mile Run',\n  FiveKmRun = '5k Run',\n\n  DbCarry = 'Dumbbell Carry',\n  DbOverheadCarry = 'Dumbbell Ovehead Carry',\n}\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const ahtleanXRoutines: Program[] = [\n  {\n    id: 'AXFullBody',\n    name: 'AthleanX Perfect Total Body',\n    author: 'Jeff Cavaliere',\n    link: 'https://athleanx.com/articles/full-body-workout-plan',\n    video: 'R6gZoAzAhCg',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 8,\n    workouts: (level?: ExperienceLevel): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const mainRest = 2;\n      const secondarySets = Array(level === ExperienceLevel.Beginner ? 3 : 4);\n      const secondaryRest = 1;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Squat,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-squat.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-hip-thrust.mp4',\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-bench-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/weighted-chinup.mp4',\n              warmup: [\n                { percentage: 0, reps: 5 },\n                { percentage: 0, reps: 5 },\n              ],\n              sets: [...secondarySets].fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              video: '//athleanx.com/wp-content/uploads/2019/07/farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.5 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/banded-facepull.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-deadlift.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.ReverseLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/reverse-barbell-lunge.mp4',\n              sets: [...secondarySets].fill({ targetReps: 10 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-overhead-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-row.mp4',\n              warmup,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/dumbbell-overhead-farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.25 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.HipBand,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/hip-band-mini-ladder.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.PullApart,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/band-pull-aparts.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'AXPushPullLegs',\n  //   name: 'AthleanX Perfect Push Pull Legs',\n  //   author: 'Jeff Cavaliere',\n  //   link: 'https://athleanx.com/articles/full-body-workout-plan',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 6,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const ssRoutines: Program[] = [\n  {\n    id: 'StartingStrength',\n    author: 'Mark Rippetoe',\n    name: 'Starting Strength',\n    link: 'https://startingstrength.com/get-started/programs',\n    video: 'a9-a_8hC17M',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '37-wjE_c4NU',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              sets,\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'TexasMethod',\n    author: 'Mark Rippetoe',\n    name: 'The Texas Method',\n    link: 'https://startingstrength.com/article/the_texas_method',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 60, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 70, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const volumeSets: RoutineSet[] = [\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const progressionSets: RoutineSet[] = [{ targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '2ggG1M2gGes',\n              sets: [{ targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }],\n              rest,\n            },\n          ],\n        },\n        // @TODO think about how to deal with alternating exercises\n        {\n          name: 'Workout A2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerSnatch,\n              video: 'uyY_ySdN6OU',\n              sets: [\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n              ],\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const slRoutines: Program[] = [\n  {\n    id: 'StrongLifts',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Strong Lifts',\n    link: 'https://stronglifts.com/5x5/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          video: 'EP2g3Sj3qSw',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'ICF',\n    author: 'Jason Blaha',\n    name: 'Ice Cream Fitness 5x5',\n    video: 'oAuARgqS6aQ',\n    link: 'https://www.muscleandstrength.com/workouts/jason-blaha-ice-cream-fitness-5x5-novice-workout',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Size, Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 90,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 2;\n      const warmup = [\n        { weight: 20, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const secondaryRest = 1.5;\n      const secondarySets = [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'yS8yUgRMiy4',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              video: 'Io4Fq0SpMAY',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'm_WPH1NYPxc',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              note: '10% ligther than Workout A',\n              ignoreForTracking: true,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'V8bDeB7UPFo',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.CloseGripBench,\n              video: '8hgpyLrdWXs',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              video: 'H2T3tSbI_iQ',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'Madcow',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Madcow 5x5',\n    link: 'https://stronglifts.com/madcow-5x5/',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 87.5, reps: 5, basis: 'fiveRepMax' },\n      ];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              note: 'Lighter than monday for recovery',\n              ignoreForTracking: true,\n              warmup: [\n                { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n              ],\n              sets: [\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ targetReps: 6 }, { targetReps: 6 }, { targetReps: 6 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const vigilanteRoutines: Program[] = [\n  {\n    id: 'Vigilante3Day',\n    name: 'Vigilante Full Body Training',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMRAP: true }];\n      const mainRest = 3;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(3).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'VigilanteAdvanced3Day',\n    name: 'Vigilante Advanced Full Body Training',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 5 },\n        { percentage: 80, reps: 3 },\n      ];\n      const mainSets: RoutineSet[] = [\n        { targetReps: 5, AMRAP: true },\n        { targetReps: 8, AMRAP: true, percentage: 75 },\n      ];\n      const mainRest = 2;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: mainSets,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(4).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.FrontSquat,\n              warmup,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight: 'twelveRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.InclineBench,\n              warmup,\n              sets: Array(4).fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n              startingWeight: 'twelveRepMax',\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(4).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.DiamondPushUp,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n            {\n              exercise: Exercise.HighPulls,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.LegRaises,\n              sets: Array(3).fill({ AMRAP: true }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const wendlerRoutines: Program[] = [\n  // {\n  //   id: 'WendlerBBB',\n  //   author: 'Jim Wendler',\n  //   name: '5/3/1 Boring But Big',\n  //   link: 'https://www.t-nation.com/workouts/boring-but-big-3-month-challenge/',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size],\n  //   daysPerWeek: 4,\n  //   workoutDuration: 60,\n  // },\n  {\n    id: 'WendlerMonolith',\n    author: 'Jim Wendler',\n    name: '5/3/1 Building the Monolith',\n    link: 'https://www.jimwendler.com/blogs/jimwendler-com/101078918-building-the-monolith-5-3-1-for-size',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 75,\n    duration: 6,\n    workouts: (): Workout[] => {\n      const mainRest = 2;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'threeRepMax' },\n        { percentage: 60, reps: 5, basis: 'threeRepMax' },\n      ];\n      return [\n        {\n          name: 'Workout A - Week 1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                { percentage: 90, reps: 5, basis: 'threeRepMax' },\n                { percentage: 70, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Workout B - Week 1',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 90, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Workout C - Week 1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 70, reps: 5, basis: 'threeRepMax' },\n                { percentage: 80, reps: 5, basis: 'threeRepMax' },\n                { percentage: 90, reps: 5, basis: 'threeRepMax' },\n                { percentage: 45, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: Array(10).fill({ percentage: 70, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Workout A - Week 2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 65, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Workout B - Week 2',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 85, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Workout C - Week 2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 65, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 55, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: Array(10).fill({ percentage: 50, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Workout A - Week 3',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, reps: 5, basis: 'threeRepMax' },\n                { percentage: 75, reps: 5, basis: 'threeRepMax', AMRAP: true },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: [{ reps: 100 }],\n              bodyweight: true,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ reps: 200 }],\n              bodyweight: true,\n            },\n          ],\n        },\n        {\n          name: 'Workout B - Week 3',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(3).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                ...Array(5).fill({ percentage: 95, reps: 5, basis: 'threeRepMax' }),\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DumbbellRow,\n              warmup,\n              sets: Array(5).fill({ minReps: 10, maxReps: 20 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n        {\n          name: 'Workout C - Week 3',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: [\n                { percentage: 75, reps: 5, basis: 'threeRepMax' },\n                { percentage: 85, reps: 5, basis: 'threeRepMax' },\n                { percentage: 95, reps: 5, basis: 'threeRepMax' },\n                { percentage: 55, targetReps: 20 },\n              ],\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: Array(10).fill({ percentage: 75, reps: 5 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              warmup,\n              sets: Array(5).fill({ targetReps: 5 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [{ reps: 100 }],\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: [{ reps: 100 }],\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'WendlerBodybuilding',\n  //   author: 'Jim Wendler',\n  //   name: '5/3/1 Bodybuilding',\n  //   link: 'https://www.jimwendler.com/blogs/jimwendler-com/101075206-5-3-1-and-bodybuilding',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 4,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../constants';\nimport { Program } from './interfaces';\nimport { ahtleanXRoutines } from './routines/athleanx';\n// import { aWorkoutRoutines } from './routines/aworkoutroutine';\n// import { builtWithScienceRoutines } from './routines/builtwithschience';\n// import { greyskullRoutines } from './routines/greyskull';\n// import { gzclRoutines } from './routines/gzcl';\n// import { kinobodyRoutines } from './routines/kinobody';\n// import { leanGainsRoutines } from './routines/leangains';\n// import { oldSchoolRoutines } from './routines/oldschool';\n// import { otherRoutines } from './routines/other';\n// import { redditRoutines } from './routines/reddit';\nimport { ssRoutines } from './routines/startingstrength';\nimport { slRoutines } from './routines/stronglifts';\nimport { vigilanteRoutines } from './routines/vigilante';\nimport { wendlerRoutines } from './routines/wendler';\n\nexport const programs: Program[] = [\n  ...ssRoutines,\n  ...slRoutines,\n  ...ahtleanXRoutines,\n  // ...aWorkoutRoutines,\n  // ...builtWithScienceRoutines,\n  // ...greyskullRoutines,\n  // ...gzclRoutines,\n  // ...kinobodyRoutines,\n  // ...leanGainsRoutines,\n  // ...oldSchoolRoutines,\n  // ...otherRoutines,\n  // ...redditRoutines,\n  ...wendlerRoutines,\n  ...vigilanteRoutines,\n].sort((a, b) => {\n  return a.name > b.name ? 1 : -1;\n});\n\nexport const getProgram = (id: string): Program => programs.find((program) => program.id === id)!;\n\nexport const getProgramRecommendations = ({\n  gender,\n  strengthLevel,\n  primaryGoal,\n  secondaryGoal,\n  maxDaysPerWeek,\n  maxWorkoutDuration,\n}: {\n  gender: Gender;\n  strengthLevel: ExperienceLevel;\n  speedLevel: ExperienceLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  maxDaysPerWeek: number;\n  maxWorkoutDuration: number;\n}): { suitablePrograms: Program[]; bestMatch: string } => {\n  const suitablePrograms = programs.filter((program) => {\n    const isLevelAppropriate = program.level.includes(strengthLevel);\n    const isGenderAppropriate = program.gender.includes(gender);\n    const meetsPrimaryGoal = program.goal.includes(primaryGoal);\n    const meetsSecondaryGoal = program.goal.includes(secondaryGoal);\n    const isSuitableSchedule = program.daysPerWeek <= maxDaysPerWeek && program.workoutDuration <= maxWorkoutDuration;\n    return isLevelAppropriate && isGenderAppropriate && meetsPrimaryGoal && meetsSecondaryGoal && isSuitableSchedule;\n  });\n  const bestMatch: string = suitablePrograms.reduce<string>((acc, program) => {\n    if (program.name.toLowerCase().includes('vigilante')) {\n      return program.id;\n    }\n    return acc;\n  }, '');\n\n  return { suitablePrograms, bestMatch };\n};\n","import { ExperienceLevel, Gender } from '../constants';\n\nexport interface SpeedMetrics {\n  mileRun: number;\n  fiveKmRun: number;\n}\n\nconst speedStandards: {\n  [key in Gender]: {\n    [key in ExperienceLevel]: SpeedMetrics;\n  };\n} = {\n  [Gender.Male]: {\n    [ExperienceLevel.Beginner]: { mileRun: 9.5, fiveKmRun: 31.5 },\n    [ExperienceLevel.Novice]: { mileRun: 7.75, fiveKmRun: 26.33 },\n    [ExperienceLevel.Intermediate]: { mileRun: 6.5, fiveKmRun: 22.5 },\n    [ExperienceLevel.Advanced]: { mileRun: 5.75, fiveKmRun: 19.75 },\n    [ExperienceLevel.Vigilante]: { mileRun: 5.15, fiveKmRun: 17.75 },\n  },\n  [Gender.Female]: {\n    [ExperienceLevel.Beginner]: { mileRun: 10.75, fiveKmRun: 35.5 },\n    [ExperienceLevel.Novice]: { mileRun: 9, fiveKmRun: 30 },\n    [ExperienceLevel.Intermediate]: { mileRun: 7.75, fiveKmRun: 26.15 },\n    [ExperienceLevel.Advanced]: { mileRun: 6.8, fiveKmRun: 23 },\n    [ExperienceLevel.Vigilante]: { mileRun: 6.15, fiveKmRun: 20.75 },\n  },\n};\n\nexport const getSpeedStandards = (gender: Gender): { [key in ExperienceLevel]?: SpeedMetrics } => {\n  return speedStandards[gender];\n};\n\nexport const getSpeedLevel = (gender: Gender, mileRunTime: number, fiveKmRun: number) => {\n  const runStandards = getSpeedStandards(gender);\n  return Object.keys(runStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n    const levelStandards = runStandards[<ExperienceLevel>current]!;\n\n    const meetsMileRunStandard = mileRunTime <= levelStandards.mileRun;\n    const meetsFiveKmStandard = fiveKmRun <= levelStandards.fiveKmRun;\n\n    if (meetsMileRunStandard && meetsFiveKmStandard) {\n      return <ExperienceLevel>current;\n    }\n\n    return acc;\n  }, ExperienceLevel.Beginner);\n};\n","import { lbsToKg } from '../../utils/measurements';\nimport { ExperienceLevel, Gender, UnitsType } from '../constants';\nimport { Exercise } from '../exercises';\n\nexport const standardExercises = [\n  Exercise.Bench,\n  Exercise.Squat,\n  Exercise.Press,\n  Exercise.Deadlift,\n  Exercise.Row,\n  Exercise.InclineBench,\n  Exercise.Curl,\n];\nexport interface LiftMetrics {\n  oneRepMax?: number;\n  threeRepMax?: number;\n  fiveRepMax?: number;\n  eightRepMax?: number;\n  tenRepMax?: number;\n  twelveRepMax?: number;\n  fithteenRepMax?: number;\n  twentyRepMax?: number;\n  ratio?: number;\n  reps?: number;\n}\n\nexport type StrengthMetrics = {\n  [key in Exercise]?: LiftMetrics;\n};\n\nconst strengthStandards: {\n  [key in Gender]: {\n    [key in Exercise]?: {\n      [key in ExperienceLevel]: LiftMetrics;\n    };\n  };\n} = {\n  [Gender.Male]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Novice]: { ratio: 1.25, oneRepMax: 93 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.5, oneRepMax: 130 },\n      [ExperienceLevel.Advanced]: { ratio: 2.25, oneRepMax: 173 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.75, oneRepMax: 219 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 1, oneRepMax: 78 },\n      [ExperienceLevel.Novice]: { ratio: 1.5, oneRepMax: 112 },\n      [ExperienceLevel.Intermediate]: { ratio: 2, oneRepMax: 152 },\n      [ExperienceLevel.Advanced]: { ratio: 2.5, oneRepMax: 200 },\n      [ExperienceLevel.Vigilante]: { ratio: 3, oneRepMax: 250 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 47 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 70 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 98 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 132 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 169 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 44 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 89 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 118 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 149 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.4, oneRepMax: 31 },\n      [ExperienceLevel.Novice]: { ratio: 0.55, oneRepMax: 46 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.8, oneRepMax: 64 },\n      [ExperienceLevel.Advanced]: { ratio: 1.05, oneRepMax: 86 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.35, oneRepMax: 109 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 41 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 85 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 115 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 147 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 30 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.6, oneRepMax: 37 },\n      [ExperienceLevel.Advanced]: { ratio: 0.85, oneRepMax: 68 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.15, oneRepMax: 91 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -13 },\n      [ExperienceLevel.Novice]: { reps: 5, oneRepMax: +8 },\n      [ExperienceLevel.Intermediate]: { reps: 15, oneRepMax: +34 },\n      [ExperienceLevel.Advanced]: { reps: 25, oneRepMax: +63 },\n      [ExperienceLevel.Vigilante]: { reps: 37, oneRepMax: +93 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -8 },\n      [ExperienceLevel.Novice]: { reps: 8, oneRepMax: +18 },\n      [ExperienceLevel.Intermediate]: { reps: 20, oneRepMax: +50 },\n      [ExperienceLevel.Advanced]: { reps: 34, oneRepMax: +86 },\n      [ExperienceLevel.Vigilante]: { reps: 49, oneRepMax: +125 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 18 },\n      [ExperienceLevel.Intermediate]: { reps: 41 },\n      [ExperienceLevel.Advanced]: { reps: 68 },\n      [ExperienceLevel.Vigilante]: { reps: 99 },\n    },\n  },\n  [Gender.Female]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 30 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 73 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 103 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 136 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 38 },\n      [ExperienceLevel.Novice]: { ratio: 1, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 87 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 120 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.5, oneRepMax: 157 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.5, oneRepMax: 31 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.75, oneRepMax: 51 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 74 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.5, oneRepMax: 101 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 13 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 44 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 67 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.4, oneRepMax: 93 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Novice]: { ratio: 0.35, oneRepMax: 23 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.55, oneRepMax: 34 },\n      [ExperienceLevel.Advanced]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Vigilante]: { ratio: 1, oneRepMax: 64 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 15 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 41 },\n      [ExperienceLevel.Advanced]: { ratio: 0.9, oneRepMax: 59 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.2, oneRepMax: 79 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.1, oneRepMax: 6 },\n      [ExperienceLevel.Novice]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.4, oneRepMax: 25 },\n      [ExperienceLevel.Advanced]: { ratio: 0.6, oneRepMax: 39 },\n      [ExperienceLevel.Vigilante]: { ratio: 0.85, oneRepMax: 55 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -22 },\n      [ExperienceLevel.Novice]: { reps: 3, oneRepMax: -8 },\n      [ExperienceLevel.Intermediate]: { reps: 6, oneRepMax: 10 },\n      [ExperienceLevel.Advanced]: { reps: 15, oneRepMax: 30 },\n      [ExperienceLevel.Vigilante]: { reps: 26, oneRepMax: 51 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -20 },\n      [ExperienceLevel.Novice]: { reps: 1, oneRepMax: -5 },\n      [ExperienceLevel.Intermediate]: { reps: 10, oneRepMax: +19 },\n      [ExperienceLevel.Advanced]: { reps: 22, oneRepMax: +45 },\n      [ExperienceLevel.Vigilante]: { reps: 35, oneRepMax: +72 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 5 },\n      [ExperienceLevel.Intermediate]: { reps: 19 },\n      [ExperienceLevel.Advanced]: { reps: 37 },\n      [ExperienceLevel.Vigilante]: { reps: 56 },\n    },\n  },\n};\n\nexport const getLiftStandards = (gender: Gender, exercise: Exercise): { [key in ExperienceLevel]?: LiftMetrics } => {\n  const genderStandards = strengthStandards[gender];\n  const liftStandards = genderStandards[exercise]!;\n  return liftStandards;\n};\n\nexport const getLiftLevel = (\n  gender: Gender,\n  lift: Exercise,\n  { oneRepMax, ratio, reps }: LiftMetrics,\n  unitsType = UnitsType.Metric\n): ExperienceLevel => {\n  const liftStandards = getLiftStandards(gender, lift);\n  return (\n    liftStandards &&\n    Object.keys(liftStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n      const levelStandards = liftStandards[<ExperienceLevel>current]!;\n\n      const oneRepMaxForComparison = oneRepMax && unitsType === UnitsType.Metric ? oneRepMax : lbsToKg(oneRepMax!);\n      const meetsOneRepMaxBasedStandard = levelStandards.oneRepMax && oneRepMaxForComparison >= levelStandards.oneRepMax;\n      const meetsRatioBasedStandard = ratio && levelStandards.ratio && ratio >= levelStandards.ratio;\n\n      const meetsWeightBasedStandard = meetsRatioBasedStandard || meetsOneRepMaxBasedStandard;\n      const meetsRepBasedStandard = reps && levelStandards.reps && reps >= levelStandards.reps;\n\n      if (meetsWeightBasedStandard || meetsRepBasedStandard) {\n        return <ExperienceLevel>current;\n      }\n\n      return acc;\n    }, ExperienceLevel.Beginner)\n  );\n};\n\nexport const getStrengthLevel = (gender: Gender, everLifted: boolean, strengthStandards: StrengthMetrics): ExperienceLevel => {\n  if (!everLifted) {\n    return ExperienceLevel.Beginner;\n  }\n\n  const level = standardExercises.reduce<ExperienceLevel | undefined>((accLevel, lift) => {\n    const liftStandards = strengthStandards[lift as keyof StrengthMetrics]!;\n    const liftLevel = getLiftLevel(Gender[gender], lift as Exercise, {\n      oneRepMax: liftStandards.oneRepMax,\n      ratio: liftStandards.ratio,\n      reps: liftStandards.reps,\n    });\n    const isLowerStandard =\n      accLevel && Object.values(ExperienceLevel).indexOf(liftLevel) < Object.values(ExperienceLevel).indexOf(accLevel);\n\n    if (liftLevel && (!accLevel || isLowerStandard)) {\n      return liftLevel;\n    }\n\n    return accLevel;\n  }, undefined);\n\n  return level ?? ExperienceLevel.Beginner;\n};\n","import { LiftMetrics, StrengthMetrics, standardExercises } from './strength';\nimport { Lifts } from '../trainee';\n\nconst formulas: { [key: string]: (weight: number, reps: number) => number } = {\n  epley: (weight, reps) => weight * (1 + reps / 30),\n  brzycki: (weight, reps) => weight * (36 / (37 - reps)),\n  oconner: (weight, reps) => weight * (1 + 0.025 * reps),\n  lombardi: (weight, reps) => weight * reps ** 0.1,\n  wathan: (weight, reps) => (weight * 100) / (48.8 + 53.8 * Math.exp(-1 * (reps * 0.075))),\n  mayhem: (weight, reps) => (weight * 100) / (52.2 + 41.9 * Math.exp(-1 * (reps * 0.055))),\n  lander: (weight, reps) => (weight * 100) / (101.3 - 2.67123 * reps),\n};\n\nexport const calculate1RepMax = (weight: number, reps: number, formula?: keyof typeof formulas): number => {\n  if (reps == 0 || weight == 0) {\n    return 0;\n  }\n\n  if (reps == 1) {\n    return weight;\n  }\n\n  if (formula) {\n    return formulas[formula](weight, reps);\n  }\n\n  const acc = Object.keys(formulas).reduce((acc, current) => {\n    return acc + formulas[current](weight, reps);\n  }, 0);\n\n  return Math.floor(acc / Object.keys(formulas).length);\n};\n\nconst calculatRepMax = (oneRepMax: number, multiplier: number) => {\n  if (oneRepMax < 0) {\n    return Math.floor((Math.abs(oneRepMax) * (1 - multiplier) + Math.abs(oneRepMax)) * -1);\n  }\n\n  return Math.floor(oneRepMax * multiplier);\n};\n\nexport const calculateThreeRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.93);\n\nexport const calculateFiveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.88);\n\nexport const calculateEightRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.8);\n\nexport const calculateTenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.74);\n\nexport const calculateTwelveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.7);\n\nexport const calculateFithteenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.66);\n\nexport const calculateTwentyRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.59);\n\nexport const calculateRepMaxes = (weight: number, reps: number, formula?: keyof typeof formulas): LiftMetrics => {\n  const oneRepMax = calculate1RepMax(weight, reps, formula);\n  return {\n    oneRepMax,\n    threeRepMax: calculateThreeRepMax(oneRepMax),\n    fiveRepMax: calculateFiveRepMax(oneRepMax),\n    eightRepMax: calculateEightRepMax(oneRepMax),\n    tenRepMax: calculateTenRepMax(oneRepMax),\n    twelveRepMax: calculateTwelveRepMax(oneRepMax),\n    fithteenRepMax: calculateFithteenRepMax(oneRepMax),\n    twentyRepMax: calculateTwentyRepMax(oneRepMax),\n  };\n};\n\nexport const calculateStrengthStandards = (weight: number, lifts: Lifts): StrengthMetrics =>\n  standardExercises.reduce((acc, key: string) => {\n    const lift = lifts[key as keyof Lifts];\n    if (!lift) return acc;\n\n    const repMaxes = calculateRepMaxes(lift.weight, lift.reps);\n    return {\n      ...acc,\n      [key]: {\n        ...repMaxes,\n        ratio: Math.round((repMaxes.oneRepMax! / weight) * 100) / 100,\n      },\n    };\n  }, {});\n","import { ActivityLevel, DietType, ExperienceLevel, Gender, Goal, UnitsType, WeekDay } from '../constants';\nimport { Exercise } from '../exercises';\nimport { getNutritionRecommendation, NutritionType } from '../nutrition';\nimport { getProgramRecommendations } from '../programs';\nimport { calculateStrengthStandards, getSpeedLevel, getStrengthLevel, SpeedMetrics, StrengthMetrics } from '../standards';\nimport { getNextLiftTargets, getNextSpeedTargets } from './targets';\n\nexport interface Trainee {\n  preferredUnitsType: keyof typeof UnitsType;\n\n  gender: keyof typeof Gender;\n  age: number;\n  weight: number;\n  height: number;\n  waist: number;\n  bodyFat: number;\n\n  bestMileRunTime: number;\n  bestfiveKmRunTime: number;\n  maxPushUps: number;\n  maxPullUps: number;\n  hasLifted: boolean;\n  currentLifts: Lifts;\n\n  activityLevel: keyof typeof ActivityLevel;\n  primaryGoal: keyof typeof Goal;\n  secondaryGoal: keyof typeof Goal;\n\n  preferredDietType: keyof typeof DietType;\n  preferredWeekStart: keyof typeof WeekDay;\n  preferredNumberOfWorkoutsPerWeek: number;\n  preferredWorkoutDuration: number;\n  preferredWorkoutDays: Array<keyof typeof WeekDay>;\n  prefersProgramHoping: boolean;\n  prefersMinimalLegs: boolean;\n\n  needsMetabolicReset: boolean;\n  prefersCycledNutrition: boolean;\n  prefersHigherCaloriesOnWeekends: boolean;\n  prefersAggressiveCut: boolean;\n\n  preferredBarbellIncrement: number;\n  preferredBarbellDecrement: number;\n  preferredDumbbellIncrement: number;\n  preferredDumbbellDecrement: number;\n}\n\nexport type LiftAttempt = { weight: number; reps: number; targetReps?: number; fails?: number };\n\nexport type Lifts = {\n  [key in Exercise]?: LiftAttempt;\n};\n\nexport interface TraineeMetrics {\n  strengthMetrics: StrengthMetrics;\n  strengthLevel: ExperienceLevel;\n  speedMetrics: SpeedMetrics;\n  speedLevel: ExperienceLevel;\n}\n\nexport const getTraineeMetrics = (trainee: Trainee): TraineeMetrics => {\n  const { gender, weight, currentLifts, hasLifted, bestMileRunTime, bestfiveKmRunTime } = trainee;\n\n  const strengthMetrics = calculateStrengthStandards(weight, currentLifts);\n  const strengthLevel = getStrengthLevel(Gender[gender], hasLifted, strengthMetrics);\n\n  const speedMetrics: SpeedMetrics = { mileRun: bestMileRunTime, fiveKmRun: bestfiveKmRunTime };\n  const speedLevel = getSpeedLevel(Gender[gender], bestMileRunTime, bestfiveKmRunTime);\n\n  return { strengthMetrics, strengthLevel, speedLevel, speedMetrics };\n};\n\nexport const getTraineeRecommendations = (trainee: Trainee, traineeMetrics: TraineeMetrics) => {\n  const {\n    gender,\n    primaryGoal,\n    secondaryGoal,\n    preferredNumberOfWorkoutsPerWeek,\n    preferredWorkoutDuration,\n    bodyFat,\n    preferredUnitsType,\n    weight,\n    height,\n    age,\n    activityLevel,\n    needsMetabolicReset,\n    prefersHigherCaloriesOnWeekends,\n    prefersCycledNutrition,\n    prefersAggressiveCut,\n  } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n\n  const recommendedPrograms = getProgramRecommendations({\n    gender: Gender[gender],\n    strengthLevel: strengthLevel!,\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    maxDaysPerWeek: preferredNumberOfWorkoutsPerWeek,\n    maxWorkoutDuration: preferredWorkoutDuration,\n    speedLevel: speedLevel!,\n  });\n\n  const recommendedNutrition = getNutritionRecommendation({\n    gender: Gender[gender],\n    weight: weight,\n    height: height,\n    age: age,\n    unitsType: UnitsType[preferredUnitsType],\n    bodyFat: bodyFat,\n    activityLevel: ActivityLevel[activityLevel],\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    needsMetabolicReset: needsMetabolicReset,\n    higherCaloriesOnWeekends: prefersHigherCaloriesOnWeekends,\n    cycleNutrition: prefersCycledNutrition,\n    numberOfWorkoutDays: preferredNumberOfWorkoutsPerWeek, // @TODO should be the selected program\n    preferAggressiveCut: prefersAggressiveCut,\n  });\n\n  const speedTargets = speedMetrics && getNextSpeedTargets(Gender[gender], speedMetrics);\n\n  const liftTargets = getNextLiftTargets(Gender[gender], strengthMetrics, weight);\n\n  const bodyFatTarget =\n    bodyFat > 10 && recommendedNutrition && [NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type)\n      ? bodyFat - 5\n      : undefined;\n\n  return { bodyFatTarget, liftTargets, speedTargets, recommendedNutrition, recommendedPrograms };\n};\n","import { ExperienceLevel, Gender } from '../constants';\nimport { Exercise } from '../exercises';\nimport {\n  calculateFiveRepMax,\n  getLiftStandards,\n  getSpeedStandards,\n  LiftMetrics,\n  SpeedMetrics,\n  StrengthMetrics,\n} from '../standards';\n\nexport const getNextSpeedTargets = (gender: Gender, speedMetrics: SpeedMetrics): SpeedMetrics => {\n  const standards = getSpeedStandards(gender);\n  const mileRun = speedMetrics.mileRun ? speedMetrics.mileRun - 0.5 : standards[ExperienceLevel.Beginner]!.mileRun;\n  const fiveKmRun = speedMetrics.fiveKmRun ? speedMetrics.fiveKmRun - 1.5 : standards[ExperienceLevel.Beginner]!.fiveKmRun;\n\n  return { mileRun, fiveKmRun };\n};\n\nexport const getNextLiftTargets = (gender: Gender, lifterStandards: StrengthMetrics, weight: number): StrengthMetrics => {\n  const getLiftTarget = (exercise: Exercise) => {\n    const standards = getLiftStandards(gender, exercise);\n    const currentLift = lifterStandards[exercise];\n\n    if (!currentLift) {\n      const levelStandard = standards[ExperienceLevel.Beginner]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (levelRatio < levelOneRepMax) {\n        return { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n      } else {\n        return { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n      }\n    }\n\n    let target: LiftMetrics = {\n      oneRepMax: currentLift.oneRepMax! + 10,\n      fiveRepMax: calculateFiveRepMax(currentLift.oneRepMax! + 10),\n    };\n\n    const levels = Object.keys(standards);\n    for (const level of levels) {\n      const levelStandard = standards[level as keyof typeof standards]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (\n        levelOneRepMax < levelRatio &&\n        levelOneRepMax > currentLift.oneRepMax! &&\n        levelOneRepMax - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n        break;\n      } else if (\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n        break;\n      }\n    }\n\n    return target;\n  };\n\n  return {\n    [Exercise.Bench]: getLiftTarget(Exercise.Bench),\n    [Exercise.Squat]: getLiftTarget(Exercise.Squat),\n    [Exercise.Deadlift]: getLiftTarget(Exercise.Deadlift),\n    [Exercise.Press]: getLiftTarget(Exercise.Press),\n    [Exercise.Row]: getLiftTarget(Exercise.Row),\n  };\n};\n","import dayjs from 'dayjs';\n\nimport { getDateOfWeekday, getNextWorkoutDay } from '../../utils/calendar';\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { Program, Workout } from '../programs/interfaces';\n\nexport interface ScheduledWorkout extends Workout {\n  id: number;\n  date: Date;\n  status?: 'pending' | 'done' | 'in progress';\n}\n\nexport type ScheduleAction =\n  | 'create'\n  | 'start_workout'\n  | 'end_workout'\n  | 'change_set_weight'\n  | 'change_set_reps'\n  | 'complete_set';\n\ntype CreateSchedulePayload = { program: Program; experienceLevel: ExperienceLevel; weekStart: WeekDay };\ntype UpdateScheduleWorkoutPayload = { id: number; exerciseId: number; setId: number; value: number };\ntype CompleteSetPayload = UpdateScheduleWorkoutPayload & { isWarmup: boolean; recommendedWeight: number };\n\nexport const scheduleReducer = (\n  schedule: ScheduledWorkout[],\n  action: {\n    type: ScheduleAction;\n    payload: CreateSchedulePayload | UpdateScheduleWorkoutPayload | CompleteSetPayload;\n  }\n) => {\n  const { type, payload } = action;\n\n  if (type === 'create') {\n    const { program, experienceLevel, weekStart } = <CreateSchedulePayload>payload;\n    return createSchedule(program, experienceLevel, weekStart);\n  }\n\n  const newSchedule = [...schedule];\n  const { id, exerciseId, setId, value } = <UpdateScheduleWorkoutPayload>payload;\n\n  switch (type) {\n    case 'start_workout':\n      newSchedule[id].status = 'in progress';\n      return newSchedule;\n    case 'end_workout':\n      markAllSetsAsComplete(schedule, id);\n      newSchedule[id].status = 'done';\n      return newSchedule;\n    case 'change_set_weight':\n      newSchedule[id].routine[exerciseId].sets[setId].weight = value;\n      return newSchedule;\n    case 'change_set_reps':\n      newSchedule[id].routine[exerciseId].sets[setId].reps = value;\n      return newSchedule;\n    case 'complete_set':\n      const { isWarmup, recommendedWeight } = <CompleteSetPayload>payload;\n      updateWorkoutWithCompletedSet(newSchedule, id, exerciseId, setId, isWarmup, recommendedWeight);\n      return newSchedule;\n    default:\n      throw new Error();\n  }\n};\n\nexport const createSchedule = (program: Program, experienceLevel: ExperienceLevel, weekStart: WeekDay = WeekDay.Monday) => {\n  // @TODO configurable per program, A/B splits should can be false\n  const firstWorkoutMustBeOnWeekStart = false;\n  const workouts = program.workouts(experienceLevel);\n  let totalWorkouts: number = program.daysPerWeek * program.duration;\n  let workoutWeeklyIndex = 0;\n  let date: Date | undefined = firstWorkoutMustBeOnWeekStart\n    ? getDateOfWeekday(weekStart, new Date(), false)\n    : getNextWorkoutDay(program.weeklySchedule, weekStart);\n\n  const schedule: ScheduledWorkout[] = [];\n  while (totalWorkouts > 0) {\n    schedule.push({\n      id: schedule.length,\n      date,\n      status: 'pending',\n      ...workouts[workoutWeeklyIndex],\n    });\n    date = getNextWorkoutDay(program.weeklySchedule, weekStart, date);\n    totalWorkouts--;\n    workoutWeeklyIndex++;\n    if (workoutWeeklyIndex === workouts.length) {\n      workoutWeeklyIndex = 0;\n    }\n  }\n\n  return schedule;\n};\n\nexport const getTodaysWorkout = (schedule: ScheduledWorkout[]): ScheduledWorkout | undefined => {\n  return schedule.find((item) => new Date(item.date).setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));\n};\n\nexport const getScheduledForThisWeek = (schedule: ScheduledWorkout[]): ScheduledWorkout[] => {\n  return schedule.filter((entry) => dayjs().isSame(entry.date, 'week')) || [];\n};\n\nexport const markAllSetsAsComplete = (schedule: ScheduledWorkout[], workoutId: number): void => {\n  schedule[workoutId].routine.forEach((exercise, exerciseId) => {\n    exercise.warmup?.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, true));\n    exercise.sets.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, false));\n  });\n};\n\nexport const updateWorkoutWithCompletedSet = (\n  schedule: ScheduledWorkout[],\n  workoutId: number,\n  exerciseId: number,\n  setId: number,\n  isWarmup: boolean,\n  recommendedWeight?: number\n): void => {\n  if (isWarmup) {\n    const warmup = schedule[workoutId].routine[exerciseId].warmup![setId];\n    if (!warmup.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].warmup![setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].warmup![setId].status = 'done';\n  } else {\n    const set = schedule[workoutId].routine[exerciseId].sets[setId];\n    if (!set.reps) {\n      schedule[workoutId].routine[exerciseId].sets[setId].reps = set.maxReps ?? set.targetReps;\n    }\n    if (!set.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].sets[setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].sets[setId].status = 'done';\n  }\n};\n","import { useStoredReducer, useStoredState } from 'react-native-use-stored-state';\n\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { getProgram } from '../programs';\nimport { getTodaysWorkout, ScheduleAction, ScheduledWorkout, scheduleReducer } from './schedule';\n\nimport { Trainee } from './trainee';\n\nexport type UpdateTraineeFn = <K extends keyof Trainee>(field: K, value: Trainee[K]) => void;\n\nexport type TraineeReducerAction = 'set_data';\n\nexport const traineeReducer = (\n  formData: Trainee,\n  action: { type: TraineeReducerAction; payload: { field: keyof Trainee; value: string | number | boolean } }\n) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'set_data':\n      const { field, value } = payload;\n      return { ...formData, [field]: value };\n    default:\n      throw new Error();\n  }\n};\n\nconst defaultTrainee = <Trainee>{\n  preferredUnitsType: 'Metric',\n  gender: 'Male',\n  activityLevel: 'Sedentary',\n  bodyFat: 20,\n  primaryGoal: 'Lean',\n  secondaryGoal: 'Strength',\n  preferredDietType: 'Balanced',\n  preferredWeekStart: 'Monday',\n  preferredNumberOfWorkoutsPerWeek: 3,\n  preferredWorkoutDuration: 60,\n  preferredWorkoutDays: ['Monday', 'Wednesday', 'Friday'],\n  prefersProgramHoping: false,\n  prefersMinimalLegs: false,\n  prefersCycledNutrition: false,\n  prefersHigherCaloriesOnWeekends: false,\n  prefersAggressiveCut: false,\n  preferredBarbellIncrement: 2.5,\n  preferredBarbellDecrement: 10,\n  preferredDumbbellIncrement: 2,\n  preferredDumbbellDecrement: 15,\n};\n\nexport const useTrainee = () => {\n  const [trainee, dispatch, traineeLoaded, resetTrainee] = useStoredReducer<Trainee, TraineeReducerAction>(\n    'TRAINEE_1.0.1',\n    traineeReducer,\n    defaultTrainee\n  );\n\n  const updateTrainee: UpdateTraineeFn = (field, value) => {\n    dispatch({ type: 'set_data', payload: { field, value } });\n  };\n\n  return { trainee, updateTrainee, traineeLoaded, resetTrainee };\n};\n\nexport const useActiveProgram = () => {\n  const [activeProgram, setActiveProgram, activeProgramLoaded, unsetIsActive] = useStoredState<string>('ACTIVE_PROGRAM_1.0.0');\n  const [schedule, updateSchedule, scheduleLoaded, unsetSchedule] = useStoredReducer<ScheduledWorkout[], ScheduleAction>(\n    'ACTIVE_SCHEDULE_1.0.0',\n    scheduleReducer\n  );\n\n  const program = activeProgram ? getProgram(activeProgram) : undefined;\n  const todaysWorkout = schedule ? getTodaysWorkout(schedule) : undefined;\n\n  const initialiseProgram = (id: string, experienceLevel: ExperienceLevel, weekStart: WeekDay) => {\n    updateSchedule({ type: 'create', payload: { program: getProgram(id), experienceLevel, weekStart } });\n    setActiveProgram(id);\n  };\n\n  const resetProgram = () => {\n    unsetIsActive();\n    unsetSchedule();\n  };\n\n  return {\n    activeProgramLoaded: scheduleLoaded && activeProgramLoaded,\n    active: !!program,\n    schedule,\n    updateSchedule,\n    program,\n    initialiseProgram,\n    todaysWorkout,\n    resetProgram,\n  };\n};\n","import { useStoredState } from 'react-native-use-stored-state';\n\nimport { ScheduledWorkout } from './schedule';\n\nexport interface LoggedWorkout extends ScheduledWorkout {\n  datePerformed: Date;\n  program: string;\n}\n\nexport const useLog = () => {\n  const [workoutLog = [], setWorkoutLog, workoutLogLoaded, removeWorkoutLog] = useStoredState<LoggedWorkout[]>('LOG_WORKOUTS');\n\n  const logWorkout = (workout: ScheduledWorkout, program: string) => {\n    setWorkoutLog([\n      { ...workout, datePerformed: new Date(), program },\n      // spread at the end to force reverse order\n      ...(workoutLog ?? []),\n    ]);\n  };\n\n  const resetLog = () => {\n    removeWorkoutLog();\n  };\n\n  return {\n    logLoaded: workoutLogLoaded,\n    workoutLog,\n    logWorkout,\n    resetLog,\n  };\n};\n","import { Box, HStack, Heading, Text, useTheme } from 'native-base';\n\nexport const DashboardHeading = ({ heading }: { heading: string }) => (\n  <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n    {heading}\n  </Heading>\n);\n\nexport const DashboardCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  const { colors } = useTheme();\n  return (\n    <Box marginY={2}>\n      {heading && <DashboardHeading heading={heading} />}\n      <Box padding={3} rounded={'lg'} backgroundColor={colors.white}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport const DashboardLabel = ({ children }: { children: React.ReactNode }) => <Text bold>{children}</Text>;\n\nexport const DashboardDetail = ({ label, value }: { label: string; value: string | number }) => (\n  <HStack paddingY={1} justifyContent={'space-between'} alignItems={'center'}>\n    <DashboardLabel>{label}:</DashboardLabel>\n    <Text>{value}</Text>\n  </HStack>\n);\n","import { Checkbox, HStack, Icon, Text } from 'native-base';\nimport RNPickerSelect from 'react-native-picker-select';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\ntype StringEnum = { [key: string]: string };\n\nexport const Select = ({\n  onValueChange,\n  selectedValue,\n  items,\n  width = 200,\n  textAlign = 'right',\n  border = false,\n}: {\n  onValueChange: (value: string) => void;\n  selectedValue: string | number | symbol;\n  items: { label: string; value: string | number }[];\n  width?: number | string;\n  textAlign?: 'right' | 'left' | 'center';\n  border?: boolean;\n}) => {\n  return (\n    <RNPickerSelect\n      style={{\n        inputWeb: { fontSize: 11, padding: 4, paddingRight: 10, borderWidth: border ? 1 : 0, textAlign },\n        inputIOS: {\n          width,\n          fontSize: 11,\n          padding: 6,\n          paddingRight: 20,\n          borderWidth: border ? 1 : 0,\n          borderColor: 'lightgray',\n          borderRadius: 3,\n          textAlign,\n        },\n        inputAndroid: { fontSize: 11, padding: 4, paddingRight: 20, textAlign },\n        iconContainer: {\n          paddingTop: 4,\n          paddingRight: 2,\n        },\n      }}\n      fixAndroidTouchableBug={true}\n      onValueChange={(value) => onValueChange(value)}\n      value={selectedValue || ''}\n      items={items}\n      // @ts-expect-error ignore\n      Icon={() => <Icon as={MaterialCommunityIcons} name={'chevron-down'} size={'sm'} />}\n    />\n  );\n};\n\nexport const EnumSelect = <E extends StringEnum>({\n  Enum,\n  selectedValue,\n  onValueChange,\n}: {\n  Enum: E;\n  selectedValue: keyof E | undefined;\n  onValueChange: (newValue: keyof E) => void;\n}) => {\n  const items = Object.keys(Enum).map((key) => ({ label: Enum[key], value: key }));\n  return (\n    <Select\n      onValueChange={(value: string) => onValueChange(value as keyof E)}\n      selectedValue={selectedValue ?? ''}\n      items={items}\n    />\n  );\n};\n\nexport const EnumMultiSelect = <E extends StringEnum>({\n  Enum,\n  selectedValues,\n  onChange,\n  accessibilityLabel,\n}: {\n  Enum: E;\n  selectedValues: Array<keyof E>;\n  onChange: (newValues: Array<keyof E>) => void;\n  accessibilityLabel: string;\n}) => (\n  <Checkbox.Group\n    defaultValue={(selectedValues ?? []) as string[]}\n    accessibilityLabel={accessibilityLabel ?? ''}\n    onChange={(values) => {\n      onChange((values || []) as Array<keyof E>);\n    }}\n  >\n    <HStack space={2} flexWrap={'wrap'}>\n      {Object.keys(Enum).map((key: string) => (\n        <Checkbox key={key} value={key} my=\"1\" size={'sm'}>\n          <Text fontSize={'xs'}>{Enum[key]}</Text>\n        </Checkbox>\n      ))}\n    </HStack>\n  </Checkbox.Group>\n);\n","import { Box, HStack, VStack } from 'native-base';\n\nimport { DashboardCard } from '../Dashboards';\n\nexport * from './Select';\n\nexport const FormCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  return <DashboardCard heading={heading}>{children}</DashboardCard>;\n};\n\nexport const InlineField = ({ children, allowWrap = false }: { children: React.ReactNode; allowWrap?: boolean }) => (\n  <HStack paddingBottom={1} justifyContent={'space-between'} alignItems={'center'} flexWrap={allowWrap ? 'wrap' : 'nowrap'}>\n    {children}\n  </HStack>\n);\n\nexport const StackedField = ({ children }: { children: React.ReactNode }) => <VStack paddingBottom={1}>{children}</VStack>;\n\nexport const BottomButtonsBox = ({ children }: { children: React.ReactNode }) => (\n  <Box marginTop={'auto'} marginBottom={2}>\n    {children}\n  </Box>\n);\n","import { HStack, Image, Radio, VStack } from 'native-base';\nimport { ImageSourcePropType } from 'react-native';\nimport { Gender } from '../../../domain/constants';\n\nconst BodyFatImageMap: {\n  [key in Gender]: { [key: number]: ImageSourcePropType };\n} = {\n  [Gender.Male]: {\n    10: require('./Male10.png'),\n    15: require('./Male15.png'),\n    20: require('./Male20.png'),\n    25: require('./Male25.png'),\n    30: require('./Male30.png'),\n  },\n  [Gender.Female]: {\n    10: require('./Female10.png'),\n    15: require('./Female15.png'),\n    20: require('./Female20.png'),\n    25: require('./Female25.png'),\n    30: require('./Female30.png'),\n  },\n};\n\nexport const BodyFatSelector = ({\n  gender,\n  bodyFat,\n  setBodyFat,\n}: {\n  gender: keyof typeof Gender;\n  bodyFat: number;\n  setBodyFat: (newvalue: number) => void;\n}) => {\n  return (\n    <Radio.Group\n      name=\"bodyFat\"\n      accessibilityLabel=\"select your approximate bodyfat percentage\"\n      value={bodyFat?.toString()}\n      onChange={(value) => {\n        setBodyFat(Number(value));\n      }}\n    >\n      {gender && (\n        <HStack alignItems={'center'} space={1}>\n          {['10', '15', '20', '25', '30'].map((percent) => (\n            <VStack key={`${gender}-${percent}`}>\n              <Image\n                size={'sm'}\n                resizeMode={'contain'}\n                alt={'Welcome'}\n                source={BodyFatImageMap[gender as keyof typeof Gender][Number(percent)]}\n              />\n              <Radio value={percent} my={1} size={'sm'}>\n                {`${percent}%`}\n              </Radio>\n            </VStack>\n          ))}\n        </HStack>\n      )}\n    </Radio.Group>\n  );\n};\n","import { HStack, Input, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { UnitsType } from '../../../domain/constants';\nimport { feetToInches, inchesToFeet } from '../../../utils/measurements';\n\nexport const HeightInput = ({\n  height,\n  unitsType,\n  setHeight,\n}: {\n  height: number;\n  unitsType: UnitsType;\n  setHeight: (newvalue: number) => void;\n}) => {\n  return (\n    <>\n      {unitsType === UnitsType.Imperial ? (\n        <ImperialHeightInput height={height} setHeight={setHeight} />\n      ) : (\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={height?.toString() || ''}\n          onChangeText={(value: string) => setHeight(Number(value))}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ImperialHeightInput = ({ height, setHeight }: { height: number; setHeight: (newvalue: number) => void }) => {\n  const [feet, setFeet] = useState<number>();\n  const [inches, setInches] = useState<number>();\n\n  const onSetHeight = () => {\n    if (feet && inches) {\n      const heightInInches = feetToInches(feet) + inches;\n      setHeight(heightInInches);\n    }\n  };\n\n  useEffect(() => {\n    if (height) {\n      const converted = inchesToFeet(height);\n      const feet = Math.floor(converted);\n      const inches = Math.round(feetToInches(converted - feet));\n      setFeet(feet);\n      setInches(inches);\n    }\n  }, []);\n\n  useEffect(() => {\n    onSetHeight();\n  }, [feet, inches]);\n\n  return (\n    <HStack alignItems={'center'}>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={feet?.toString()}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setFeet(Number(value));\n        }}\n      />\n      <Text>{'ft'}</Text>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={inches?.toString()}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setInches(Number(value));\n        }}\n      />\n      <Text>{'in'}</Text>\n    </HStack>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { BodyFatSelector } from '../../components/Forms/BodyFatSelector';\nimport { HeightInput } from '../../components/Forms/HeightInput';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getCircumferenceLabel, getHeightLabel, getWeightLabel } from '../../utils/measurements';\n\nexport const AboutYou = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { age, weight, height, waist, gender, bodyFat, preferredUnitsType } = trainee;\n  const unitsType = UnitsType[preferredUnitsType];\n  return (\n    <FormCard heading={t('About You')}>\n      <InlineField>\n        <Text>{t('Gender')}</Text>\n        <EnumSelect\n          Enum={Gender}\n          selectedValue={gender}\n          onValueChange={(value: keyof typeof Gender) => updateTrainee('gender', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your age')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={age?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('age', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your height ({{unitLabel}})', { unitLabel: getHeightLabel(unitsType) })}</Text>\n        <HeightInput unitsType={unitsType} height={height} setHeight={(value: number) => updateTrainee('height', value)} />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your current weight ({{unitLabel}})', { unitLabel: getWeightLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={weight?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('weight', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your waist circumference ({{unitLabel}})', { unitLabel: getCircumferenceLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={waist?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('waist', Number(value))}\n        />\n      </InlineField>\n      <InlineField allowWrap>\n        <Text>{t('Bodyfat (%)')}</Text>\n        <BodyFatSelector\n          gender={gender}\n          bodyFat={bodyFat}\n          setBodyFat={(value: number) => updateTrainee('bodyFat', Number(value))}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Box, ScrollView, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { ExperienceLevel, Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { getLiftStandards, getSpeedStandards, LiftMetrics, SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { formatDecimalMins, getWeightLabel } from '../../utils/measurements';\nimport { Table, TableHeader, TableRow } from '../Content';\n\nexport const StrengthStandardsComparison = ({\n  gender,\n  standards,\n  unitsType,\n}: {\n  gender: Gender;\n  standards: StrengthMetrics;\n  unitsType: UnitsType;\n}) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={700}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Exercice', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            {Object.keys(standards).map((exercise) => {\n              const lift: LiftMetrics = standards[exercise as keyof typeof standards]!;\n              const liftStandards = getLiftStandards(gender, exercise as Exercise);\n\n              if (!liftStandards) {\n                return;\n              }\n\n              const getCellContent = ({ oneRepMax, ratio, reps }: LiftMetrics, isStandard = false) => {\n                if (isStandard) {\n                  if (reps) {\n                    return `${reps} reps`;\n                  }\n                  return `${oneRepMax}${weightLabel} or ${ratio}x`;\n                }\n\n                if (reps) {\n                  return `${reps} reps`;\n                }\n                return oneRepMax ? `${oneRepMax}${weightLabel}/${ratio}x` : '-';\n              };\n\n              return (\n                <TableRow\n                  key={exercise}\n                  values={[\n                    { content: exercise, sideBorder: true },\n                    { content: getCellContent(lift), textAlign: 'center', sideBorder: true },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Beginner]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Novice]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Intermediate]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Advanced]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Vigilante]!, true),\n                      textAlign: 'center',\n                    },\n                  ]}\n                />\n              );\n            })}\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          'Note: Weights are calculated 1 Rep Maxes (using the average of multiple formulas - Epley, O&apos;Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight. Standards are sourced from strengthlevel.com'\n        )}\n      </Text>\n    </>\n  );\n};\n\nexport const SpeedtandardsComparison = ({ gender, standards }: { gender: Gender; standards: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  const genderStandards = getSpeedStandards(gender);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={575}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Distance', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: 'Mile Run', sideBorder: true },\n                {\n                  content: standards.mileRun ? formatDecimalMins(standards.mileRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.mileRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: '5k Run', sideBorder: true },\n                {\n                  content: standards.fiveKmRun ? formatDecimalMins(standards.fiveKmRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.fiveKmRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t('Note: Standards are sourced from runninglevel.com')}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { calculateStrengthStandards, LiftMetrics, standardExercises } from '../../domain/standards';\nimport { LiftAttempt, Lifts } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { Table, TableCell, TableHeader, TableRow } from '../Content';\n\nexport const LiftingStandardsCalculator = ({\n  unitsType,\n  weight,\n  lifts = {},\n  setLifts,\n}: {\n  unitsType: UnitsType;\n  weight: number;\n  lifts: Lifts;\n  setLifts: (newLifts: Lifts) => void;\n}) => {\n  const { t } = useTranslation();\n\n  const standards = useMemo(() => weight && lifts && calculateStrengthStandards(weight, lifts), [lifts, weight]);\n\n  const onChange = (lift: Exercise, attr: keyof LiftAttempt, value: number) => {\n    setLifts({\n      ...lifts,\n      [lift]: { ...lifts[lift as Exercise], [attr]: value },\n    });\n  };\n\n  const weightLabel = getWeightLabel(unitsType);\n  const headings = [\n    { content: 'Exercise', textAlign: 'left' },\n    { content: `Weight (${weightLabel})` },\n    { content: 'Reps' },\n    { content: '1RM', textAlign: 'right' },\n    { content: 'Ratio', textAlign: 'right' },\n  ];\n  const cellWidth = `${100 / headings.length}%`;\n\n  return (\n    <>\n      <Table>\n        <TableHeader headings={headings} />\n        {standardExercises.map((lift) => {\n          const calculated: LiftMetrics = standards?.[lift as keyof typeof standards];\n          return (\n            <TableRow key={lift}>\n              <TableCell width={cellWidth} content={lift} />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'decimal-pad'}\n                    value={lifts?.[lift as Exercise]?.weight?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'weight', Number(value))}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'number-pad'}\n                    value={lifts?.[lift as Exercise]?.reps?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'reps', Number(value))}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.oneRepMax ? `${calculated.oneRepMax}${weightLabel}` : ''}\n              />\n              <TableCell width={cellWidth} textAlign={'right'} content={calculated?.ratio ? `${calculated.ratio}x` : ''} />\n            </TableRow>\n          );\n        })}\n      </Table>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          \"Rep Maxes are calculated using the average of multiple formulas (Epley, O'Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight\"\n        )}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingStandardsCalculator } from '../../components/Standards';\nimport { ActivityLevel, UnitsType } from '../../domain/constants';\nimport { Lifts, Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Activity = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const {\n    activityLevel,\n    bestMileRunTime,\n    bestfiveKmRunTime,\n    maxPushUps,\n    maxPullUps,\n    hasLifted,\n    preferredUnitsType,\n    currentLifts,\n    weight,\n  } = trainee;\n  return (\n    <FormCard heading={t('Your current activity')}>\n      <InlineField>\n        <Text>{t('General daily activity')}</Text>\n        <EnumSelect\n          Enum={ActivityLevel}\n          selectedValue={activityLevel}\n          onValueChange={(value: keyof typeof ActivityLevel) => updateTrainee('activityLevel', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Mile run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestMileRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestMileRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('5k run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestfiveKmRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestfiveKmRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many push ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPushUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPushUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many pull ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPullUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPullUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Ever done barbell lifting?')}</Text>\n        <Select\n          selectedValue={hasLifted ? 'yes' : 'no'}\n          onValueChange={(value: string) => updateTrainee('hasLifted', value === 'yes')}\n          items={[\n            { value: 'yes', label: 'yes' },\n            { value: 'no', label: 'no' },\n          ]}\n        />\n      </InlineField>\n      {hasLifted && (\n        <LiftingStandardsCalculator\n          unitsType={UnitsType[preferredUnitsType]}\n          lifts={currentLifts}\n          weight={weight}\n          setLifts={(newLifts: Lifts) => {\n            updateTrainee('currentLifts', newLifts);\n          }}\n        />\n      )}\n    </FormCard>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Configuration = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredUnitsType } = trainee;\n  return (\n    <FormCard heading={t('Configuration')}>\n      <InlineField>\n        <Text>{t('Units')}</Text>\n        <EnumSelect\n          Enum={UnitsType}\n          selectedValue={preferredUnitsType}\n          onValueChange={(value: keyof typeof UnitsType) => updateTrainee('preferredUnitsType', value)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { DietType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Nutrition = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredDietType, prefersHigherCaloriesOnWeekends, prefersCycledNutrition, needsMetabolicReset } = trainee;\n  return (\n    <FormCard heading={t('Your current nutrition and preferences')}>\n      <InlineField>\n        <Text>{'Eating style'}</Text>\n        <EnumSelect\n          Enum={DietType}\n          selectedValue={preferredDietType}\n          onValueChange={(value: keyof typeof DietType) => updateTrainee('preferredDietType', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>{t('Have you been \"dieting\" on low calories for a long time without results?')}</Text>\n        <Switch\n          size=\"sm\"\n          isChecked={needsMetabolicReset}\n          onValueChange={(checked: boolean) => updateTrainee('needsMetabolicReset', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { Goal } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Preferences = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { primaryGoal, secondaryGoal, prefersMinimalLegs, prefersProgramHoping } = trainee;\n  return (\n    <FormCard heading={t('Your goals and preferences')}>\n      <InlineField>\n        <Text>{t('Primary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={primaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('primaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Secondary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={secondaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('secondaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Mix it up often:')}</Text>{' '}\n          {t('If you get bored easily, this will cycle you through appropriate programs more often')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersProgramHoping}\n          onValueChange={(checked: boolean) => updateTrainee('prefersProgramHoping', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Minimal legs:')}</Text>{' '}\n          {t(\n            'For those not keen on squatting heavy and often, or those who just do not want big legs and rather keep them strong and athletic'\n          )}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersMinimalLegs}\n          onValueChange={(checked: boolean) => updateTrainee('prefersMinimalLegs', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Alert, ArrowDownIcon, ArrowUpIcon, Box, HStack, Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumMultiSelect, EnumSelect, FormCard, InlineField, Select, StackedField } from '../../components/Forms';\nimport { UnitsType, WeekDay } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\n\nexport const Scheduling = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferredWeekStart, preferredNumberOfWorkoutsPerWeek, preferredWorkoutDuration, preferredWorkoutDays } = trainee;\n\n  const weightUnitLabel = getWeightLabel(UnitsType[trainee.preferredUnitsType]);\n  const percentLabel = '%';\n\n  return (\n    <FormCard heading={t('Scheduling & Progression')}>\n      <Alert status={'info'} colorScheme={'info'} marginBottom={2}>\n        <HStack flexShrink={1} space={2}>\n          <Text>\n            {t(\n              'It is important you commit to something sustainable, more is not always better. Success comes from long term consistency.'\n            )}\n          </Text>\n        </HStack>\n      </Alert>\n      <InlineField>\n        <Text>{t('Workouts per week')}</Text>\n        <Select\n          selectedValue={preferredNumberOfWorkoutsPerWeek}\n          onValueChange={(value: string) => updateTrainee('preferredNumberOfWorkoutsPerWeek', Number(value))}\n          items={[\n            { label: '2 at most', value: 2 },\n            { label: '3 at most', value: 3 },\n            { label: '4 at most', value: 4 },\n            { label: '5 at most', value: 5 },\n            { label: '6 at most', value: 6 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Workout duration')}</Text>\n        <Select\n          selectedValue={preferredWorkoutDuration}\n          onValueChange={(value: string) => updateTrainee('preferredWorkoutDuration', Number(value))}\n          items={[\n            { label: '30 min at most', value: 30 },\n            { label: '45 min at most', value: 45 },\n            { label: '60 min at most', value: 60 },\n            { label: '75 min at most', value: 75 },\n            { label: '90 min at most', value: 90 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Start week on')}</Text>\n        <EnumSelect\n          Enum={WeekDay}\n          selectedValue={preferredWeekStart}\n          onValueChange={(value: keyof typeof WeekDay) => updateTrainee('preferredWeekStart', value)}\n        />\n      </InlineField>\n      <StackedField>\n        <Text>{t('Days you can train')}</Text>\n        <EnumMultiSelect\n          Enum={WeekDay}\n          accessibilityLabel={t('Select days you can train')}\n          selectedValues={preferredWorkoutDays}\n          onChange={(newValues: Array<keyof typeof WeekDay>) => updateTrainee('preferredWorkoutDays', newValues)}\n        />\n      </StackedField>\n      <Box paddingTop={5}>\n        <Text>\n          {t('On Success')} <ArrowUpIcon />\n        </Text>\n        <InlineField>\n          <Text>{t('Barbell Increment')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={trainee.preferredBarbellIncrement?.toString() || ''}\n              onChangeText={(value: string) => updateTrainee('preferredBarbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>{t('Dumbbell Increment')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={trainee.preferredDumbbellIncrement?.toString() || ''}\n              onChangeText={(value: string) => updateTrainee('preferredDumbbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n      <Box paddingY={1}>\n        <Text>\n          {t('On Failure')} <ArrowDownIcon />\n        </Text>\n        <InlineField>\n          <Text>{t('Barbell Decrement')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={trainee.preferredBarbellDecrement?.toString()}\n              onChangeText={(value: string) => updateTrainee('preferredBarbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>{t('Dumbbell Decrement')}</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={trainee.preferredDumbbellDecrement?.toString()}\n              onChangeText={(value: string) => updateTrainee('preferredDumbbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n    </FormCard>\n  );\n};\n","import { Button } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nimport { AboutYou } from './AboutYou';\nimport { Activity } from './Activity';\nimport { Configuration } from './Configuration';\nimport { Nutrition } from './Nutrition';\nimport { Preferences } from './Preferences';\nimport { Scheduling } from './Scheduling';\n\nexport default function GetStarted() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { age, weight, height, bodyFat, primaryGoal, secondaryGoal } = trainee!;\n  const enableContinueButton = !!age && !!bodyFat && !!weight && !!height && !!primaryGoal && !!secondaryGoal;\n\n  return (\n    <DefaultLayout>\n      <Configuration trainee={trainee!} updateTrainee={updateTrainee} />\n      <AboutYou trainee={trainee!} updateTrainee={updateTrainee} />\n      <Nutrition trainee={trainee!} updateTrainee={updateTrainee} />\n      <Activity trainee={trainee!} updateTrainee={updateTrainee} />\n      <Preferences trainee={trainee!} updateTrainee={updateTrainee} />\n      <Scheduling trainee={trainee!} updateTrainee={updateTrainee} />\n      {enableContinueButton ? (\n        <RoutingButton to={Destination.ProgramSelection}>{t('Continue')}</RoutingButton>\n      ) : (\n        <Button colorScheme=\"secondary\" disabled>\n          {t('Continue')}\n        </Button>\n      )}\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard } from '../../components/Forms';\nimport { SpeedtandardsComparison, StrengthStandardsComparison } from '../../components/Standards';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const Comparison = ({ trainee, traineeMetrics }: { trainee: Trainee; traineeMetrics: TraineeMetrics }) => {\n  const { t } = useTranslation();\n  const { gender, maxPullUps, maxPushUps, preferredUnitsType } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n  return (\n    <>\n      <FormCard heading={t('Strength')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{strengthLevel}</Text>\n        </Text>\n        <StrengthStandardsComparison\n          gender={Gender[gender]}\n          standards={{\n            ...strengthMetrics,\n            [Exercise.Pullup]: { reps: maxPullUps },\n            [Exercise.Pushup]: { reps: maxPushUps },\n          }}\n          unitsType={UnitsType[preferredUnitsType]}\n        />\n      </FormCard>\n      <FormCard heading={t('Speed')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{speedLevel}</Text>\n        </Text>\n        <SpeedtandardsComparison gender={Gender[gender]} standards={speedMetrics} />\n      </FormCard>\n    </>\n  );\n};\n","import { Box, Divider, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\n\nimport { DashboardDetail } from '../Dashboards';\n\nexport const NutritionInfo = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { note, bmr, tdee } = protocol;\n  return (\n    <>\n      {note && <Text fontSize={'xs'}>{note}</Text>}\n      <Box marginY={2}>\n        <DashboardDetail label={t('BMR (Base Metabolic Rate)')} value={`${bmr}`} />\n        <Divider />\n        <DashboardDetail label={t('TDEE (Total Daily Energy Expenditure)')} value={`${tdee}`} />\n        <Divider />\n        <NutritionRecommendations protocol={protocol} />\n        <Box marginY={2}>\n          <Text fontSize={'2xs'} italic>\n            {t(\n              'NOTE: BMR was calculated using the average of Miffin St Jeor, Harris Benedict and Katch McArdle formulas. TDEE was calculated using your BMR and given activity level (lightly active=x1.375, active=x1.55 and very active=x1.725). Minimum protein to consume was calculated using your body fat % (1 gram per pound of lean bodyweight)'\n            )}\n          </Text>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport const NutritionRecommendations = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { targetCalories, type, higherCaloriesOnWeekends, cycleNutrition, targetProtein } = protocol;\n  return (\n    <Box>\n      <DashboardDetail\n        label={`Recommended Target Average ${type === NutritionType.Bulk ? 'Surplus' : 'Deficit'}`}\n        value={`${targetCalories.energyExpenditureModifier}`}\n      />\n      <Divider />\n      <DashboardDetail label={t('Target Average Daily Calories')} value={`${targetCalories.average}`} />\n      <Divider />\n      {higherCaloriesOnWeekends && !cycleNutrition && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && !higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekday Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      <DashboardDetail label={t('Minimum Grams of Protein')} value={`${targetProtein}`} />\n      <Divider />\n    </Box>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard, InlineField } from '../../components/Forms';\nimport { NutritionInfo } from '../../components/Nutrition';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const NutritionRecommendation = ({\n  trainee,\n  updateTrainee,\n  recommendedNutrition,\n}: {\n  trainee: Trainee;\n  updateTrainee: UpdateTraineeFn;\n  recommendedNutrition: NutritionProtocol;\n}) => {\n  const { t } = useTranslation();\n  const { prefersAggressiveCut, prefersHigherCaloriesOnWeekends, prefersCycledNutrition } = trainee;\n  return (\n    <FormCard heading={'Nutritional Recommendation'}>\n      <NutritionInfo protocol={recommendedNutrition} />\n      {[NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type) && (\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('More aggresive cut:')}</Text>{' '}\n            {t('for those who want to drop weight quicker and can handle lower calories.')}\n          </Text>\n          <Switch\n            size=\"sm\"\n            isChecked={prefersAggressiveCut}\n            onValueChange={(checked: boolean) => updateTrainee('prefersAggressiveCut', checked)}\n          />\n        </InlineField>\n      )}\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const toNearestIncrement = ({\n  weight,\n  unitsType,\n  increment,\n}: {\n  weight: number;\n  unitsType?: UnitsType;\n  increment?: number;\n}) => {\n  const inc = increment ?? unitsType === UnitsType.Metric ? 2.5 : 5;\n  return Math.round(weight / inc) * inc;\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { UnitsType } from '../../domain/constants';\nimport { LiftMetrics, StrengthMetrics } from '../../domain/standards';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { toNearestIncrement } from '../../utils/weight';\nimport { BulletPoint } from '../Content';\n\nexport const LiftingTargets = ({ liftTargets, unitsType }: { liftTargets: StrengthMetrics; unitsType: UnitsType }) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      {Object.keys(liftTargets).map((lift) => {\n        const { oneRepMax, fiveRepMax, reps } = liftTargets[lift as keyof typeof liftTargets] as LiftMetrics;\n        const roundedFiveReps = fiveRepMax && toNearestIncrement({ weight: fiveRepMax, unitsType });\n\n        return (\n          <BulletPoint key={lift}>\n            <Text fontSize={'xs'}>\n              {oneRepMax ? (\n                <>\n                  {t('Get your {{lift}} 1RM to {{oneRepMax}}{{weightLabel}}', { lift, oneRepMax, weightLabel })}\n                  {roundedFiveReps && (\n                    <Text>{t(` (that's {{weight}}{{weightLabel}} for 5 reps)`, { weight: roundedFiveReps, weightLabel })}</Text>\n                  )}\n                </>\n              ) : (\n                <>{t('Get your number of {{lift}} to {{reps}}', { lift, reps })}</>\n              )}\n            </Text>\n          </BulletPoint>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { SpeedMetrics } from '../../domain/standards';\nimport { formatDecimalMins } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const SpeedTargets = ({ speedTargets }: { speedTargets: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <BulletPoint>\n        <Text fontSize={'xs'}>\n          {t('Get your Mile Run run down to {{time}}', { time: formatDecimalMins(speedTargets.mileRun) })}\n        </Text>\n      </BulletPoint>\n      <BulletPoint>\n        <Text fontSize={'xs'}>\n          {t('Get your 5k Run run down to {{time}}', { time: formatDecimalMins(speedTargets.fiveKmRun) })}\n        </Text>\n      </BulletPoint>\n    </>\n  );\n};\n","import { Box, Center, Divider, Heading, HStack, ScrollView, Text } from 'native-base';\nimport { RoutineEntry, RoutineSet, Workout } from '../../domain/programs';\nimport { Video } from '../Content';\n\nexport const getExerciseRepLabel = (item: RoutineEntry): string => {\n  const sets = item.sets.length > 0 ? item.sets : item.warmup;\n\n  const reps = sets!\n    .reduce<string[]>((acc, set: RoutineSet) => {\n      let targetReps = `${set.reps || set.targetReps || ''}`;\n      if (set.minReps) {\n        targetReps = `${set.minReps}-${set.maxReps}`;\n      }\n      if (set.AMRAP) {\n        targetReps = targetReps ? `${targetReps}+` : 'f';\n      }\n      if (set.percentage) {\n        targetReps = `${targetReps}@${set.percentage}%`;\n      }\n\n      return [...acc, targetReps];\n    }, [])\n    .reduce((acc, current, currentIndex, array) => {\n      let str = `1x${current}`;\n      if (array[currentIndex] === array[currentIndex + 1] || array[currentIndex] === array[currentIndex - 1]) {\n        str = `${array.filter((item) => item === current).length}x${current}`;\n      }\n      if (acc.includes(str)) return acc;\n\n      return [...acc, str];\n    }, []);\n\n  return reps.join(', ');\n};\n\nexport const WorkoutRoutinesHScroll = ({ workouts, showVideos }: { workouts: Workout[]; showVideos?: boolean }) => {\n  return (\n    <ScrollView horizontal={true}>\n      <HStack>\n        {workouts.map((workout: Workout, idx) => {\n          const wid = `workout-${workout.name}`;\n          const hasDivider = idx < workouts.length - 1;\n          return (\n            <HStack key={wid}>\n              <Box width={240}>\n                <Heading fontSize={'md'} fontWeight={300} paddingBottom={2}>\n                  {workout.name}\n                </Heading>\n                {workout.routine.map((item: RoutineEntry) => (\n                  <Box key={`${wid}-${item.exercise}`} paddingBottom={1}>\n                    <Text bold>{item.exercise}</Text>\n                    <Text>{getExerciseRepLabel(item)}</Text>\n                  </Box>\n                ))}\n                {workout.video && showVideos && (\n                  <Center paddingTop={2}>\n                    <Video video={workout.video} width={260} />\n                  </Center>\n                )}\n              </Box>\n              {hasDivider && <Divider marginX={4} orientation={'vertical'} />}\n            </HStack>\n          );\n        })}\n      </HStack>\n    </ScrollView>\n  );\n};\n","import { Box, Button, Container, Switch, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint } from '../../components/Content';\nimport { FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingTargets, SpeedTargets } from '../../components/Targets';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { UnitsType } from '../../domain/constants';\nimport { getProgram, Program, programs } from '../../domain/programs';\nimport { SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const ProgramRecommendation = ({\n  trainee,\n  recommendedPrograms,\n  speedTargets,\n  liftTargets,\n  bodyFatTarget,\n  program,\n  setProgram,\n  traineeMetrics,\n}: {\n  trainee: Trainee;\n  recommendedPrograms: { suitablePrograms: Program[]; bestMatch: string };\n  speedTargets: SpeedMetrics;\n  liftTargets: StrengthMetrics;\n  bodyFatTarget?: number;\n  program: string;\n  setProgram: (value: string) => void;\n  traineeMetrics: TraineeMetrics;\n}) => {\n  const { t } = useTranslation();\n  const [showAllPrograms, setShowAllPrograms] = useState(false);\n\n  const { preferredUnitsType } = trainee;\n  const selectedProgram = getProgram(program);\n  const selectedProgramWorkouts = selectedProgram?.workouts(traineeMetrics.strengthLevel);\n  const selectedValue = program || recommendedPrograms.bestMatch;\n\n  const programList = showAllPrograms ? programs : recommendedPrograms.suitablePrograms;\n\n  useEffect(() => {\n    setProgram(selectedValue);\n  }, [program, recommendedPrograms]);\n\n  return (\n    <FormCard heading={'Training Recommendation'}>\n      <Box marginBottom={3}>\n        <Text>{t('You should focus on getting stronger and faster aiming for the following short term goals:')}</Text>\n        {liftTargets && <LiftingTargets liftTargets={liftTargets} unitsType={UnitsType[preferredUnitsType]} />}\n        {speedTargets && <SpeedTargets speedTargets={speedTargets} />}\n        {bodyFatTarget && (\n          <BulletPoint>\n            <Text fontSize={'xs'}>{t('Get your body fat down to {{bodyFatTarget}}%', { bodyFatTarget })}</Text>\n          </BulletPoint>\n        )}\n      </Box>\n\n      <Text fontSize={'xs'} italic>\n        {t(\n          'The most recommended program to achieve the above is selected, but you can also chose one of the other programs that match your level of strength and preferences and you will still see good results.'\n        )}\n      </Text>\n      <Box marginTop={3} marginBottom={6}>\n        <Select\n          border\n          selectedValue={selectedValue}\n          onValueChange={(value: string) => setProgram(value)}\n          width={'100%'}\n          textAlign={'left'}\n          items={programList.map((program) => ({\n            label: `${program.name}${program.id === recommendedPrograms.bestMatch ? ` (recommended)` : ''}`,\n            value: program.id,\n          }))}\n        />\n        <Container marginTop={2}>\n          {!showAllPrograms ? (\n            <Button size=\"xs\" onPress={() => setShowAllPrograms(true)}>\n              {t('Show all programs')}\n            </Button>\n          ) : (\n            <Button size=\"xs\" onPress={() => setShowAllPrograms(false)}>\n              {t('Hide non recommended programs')}\n            </Button>\n          )}\n        </Container>\n      </Box>\n\n      {selectedProgramWorkouts && <WorkoutRoutinesHScroll workouts={selectedProgramWorkouts} />}\n      <Box marginTop={5}>\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('End workouts with a speed or endurance finisher.')}</Text>{' '}\n            {t(\n              'In true vigilante fashion, workouts will randomly end with a bodyweight exercise for reps and/or time, some sort of carry for distance and/or time or a 1 mile or 5k run for time.'\n            )}\n          </Text>\n          <Switch size=\"sm\" isChecked />\n        </InlineField>\n      </Box>\n    </FormCard>\n  );\n};\n","import { useState } from 'react';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WeekDay } from '../../domain/constants';\nimport { getTraineeMetrics, getTraineeRecommendations, useActiveProgram, useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { Comparison } from './Comparison';\nimport { NutritionRecommendation } from './NutritionRecommendation';\nimport { ProgramRecommendation } from './ProgramRecommendation';\n\nexport default function ProgramSelection() {\n  const [program, setProgram] = useState<string>();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { initialiseProgram } = useActiveProgram();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition, recommendedPrograms, speedTargets, liftTargets, bodyFatTarget } = getTraineeRecommendations(\n    trainee!,\n    traineeMetrics\n  );\n\n  return (\n    <DefaultLayout>\n      <Comparison trainee={trainee!} traineeMetrics={traineeMetrics} />\n      <NutritionRecommendation trainee={trainee!} updateTrainee={updateTrainee} recommendedNutrition={recommendedNutrition} />\n      <ProgramRecommendation\n        trainee={trainee!}\n        traineeMetrics={traineeMetrics}\n        recommendedPrograms={recommendedPrograms}\n        speedTargets={speedTargets}\n        liftTargets={liftTargets}\n        bodyFatTarget={bodyFatTarget}\n        program={program!}\n        setProgram={setProgram}\n      />\n      <RoutingButton\n        to={Destination.Dashboard}\n        onPress={() => initialiseProgram(program!, traineeMetrics.strengthLevel, WeekDay[trainee!.preferredWeekStart])}\n      >\n        {'Lets Go!'}\n      </RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { Paragraph } from '../../components/Content';\nimport { DashboardCard } from '../../components/Dashboards';\nimport { getTodaysCalories, NutritionProtocol } from '../../domain/nutrition';\nimport { ScheduledWorkout } from '../../domain/trainee';\nimport { RoutingButton } from '../../utils/routing';\n\nexport default function Today({\n  recommendedNutrition,\n  workout,\n  startWorkout,\n}: {\n  recommendedNutrition: NutritionProtocol;\n  workout: ScheduledWorkout | undefined;\n  startWorkout: () => void;\n}) {\n  const { t } = useTranslation();\n\n  const calories = getTodaysCalories(recommendedNutrition, !!workout);\n  const protein = recommendedNutrition.targetProtein;\n  const link = `/Workout/${workout?.id}`;\n\n  return (\n    <DashboardCard heading={t('Today')}>\n      {workout ? (\n        <Paragraph>\n          <Text paddingRight={3}>\n            {t('Today you are scheduled to perform:')} <Text bold>{workout.name}</Text>\n          </Text>\n          {workout.status === 'in progress' && <RoutingButton to={link}>{t('Continue Workout')}</RoutingButton>}\n          {workout.status === 'pending' && (\n            <RoutingButton to={link} onPress={startWorkout}>\n              {t('Start Workout')}\n            </RoutingButton>\n          )}\n        </Paragraph>\n      ) : (\n        <Paragraph>{t('Today is an active recovery day. Go for a run, do some stretching and/or some mobility work.')}</Paragraph>\n      )}\n\n      <Paragraph>\n        <Trans t={t} calories={calories} protein={protein}>\n          You should consume <Text bold>{{ calories }} calories</Text> and at least{' '}\n          <Text bold>{{ protein }} grams of protein</Text>. Calories can be split between fat and carbs to preference,\n          recommendation is that 20-30% come from healthy fats to maintain hormonal balance.\n        </Trans>\n      </Paragraph>\n    </DashboardCard>\n  );\n}\n","import { Box, Divider, HStack, Icon, Text } from 'native-base';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { goToWorkout, useNavigate } from '../../utils/routing';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport const WorkoutList = ({ workouts, dateFormat = 'date' }: { workouts: ScheduledWorkout[]; dateFormat?: 'day' | 'date' }) => {\n  const navigate = useNavigate();\n  return (\n    <>\n      {workouts.map((item, idx) => {\n        const isDone = item.status === 'done';\n        return (\n          <Box key={`workout-${idx}`}>\n            <HStack>\n              <Icon\n                color={isDone ? 'green.500' : 'amber.500'}\n                mb={1}\n                as={MaterialIcons}\n                name={isDone ? 'done' : 'schedule'}\n                size={'md'}\n                marginRight={1}\n              />\n              <Text>\n                {dateFormat === 'date'\n                  ? new Date(item.date).toLocaleDateString('en-GB', {\n                      weekday: 'short',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : new Date(item.date).toLocaleDateString('en-GB', { weekday: 'long' })}\n              </Text>\n              <Text bold>{` ${item.name}`}</Text>\n              <Icon\n                as={MaterialCommunityIcons}\n                name={'eye'}\n                size={'md'}\n                marginLeft={'auto'}\n                onPress={() => goToWorkout(navigate)(idx)}\n              />\n            </HStack>\n            <Divider marginY={2} />\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutList } from '../../components/Workouts';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport default function ThisWeek({ workouts }: { workouts: ScheduledWorkout[] }) {\n  const { t } = useTranslation();\n\n  return (\n    <DashboardCard heading={'This Week'}>\n      {workouts.length ? <WorkoutList workouts={workouts} dateFormat={'day'} /> : <Text>{t('No workouts scheduled.')}</Text>}\n    </DashboardCard>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport Today from './Today';\nimport {\n  getScheduledForThisWeek,\n  getTraineeMetrics,\n  getTraineeRecommendations,\n  useActiveProgram,\n  useTrainee,\n} from '../../domain/trainee';\nimport ThisWeek from './ThisWeek';\n\nexport default function Dashboard() {\n  const { t } = useTranslation();\n  const { traineeLoaded, trainee } = useTrainee();\n  const { schedule, activeProgramLoaded, todaysWorkout, updateSchedule } = useActiveProgram();\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition } = getTraineeRecommendations(trainee!, traineeMetrics);\n  const thisWeeksWorkouts = getScheduledForThisWeek(schedule!);\n\n  const startWorkout = () => {\n    todaysWorkout && updateSchedule({ type: 'start_workout', payload: { id: todaysWorkout.id } });\n  };\n\n  return (\n    <HeadedLayout showNav heading={t('Dashboard')}>\n      <Today recommendedNutrition={recommendedNutrition!} workout={todaysWorkout} startWorkout={startWorkout} />\n      <ThisWeek workouts={thisWeeksWorkouts} />\n    </HeadedLayout>\n  );\n}\n","import { Center, Text } from 'native-base';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Video } from '../../components/Content';\nimport { DashboardCard, DashboardDetail } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WorkoutList } from '../../components/Workouts';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { getTraineeMetrics, useActiveProgram, useTrainee } from '../../domain/trainee';\n\nexport default function Program() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded } = useTrainee();\n  const { activeProgramLoaded, program, schedule } = useActiveProgram();\n\n  if (!activeProgramLoaded || !traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { strengthLevel } = getTraineeMetrics(trainee!);\n  const completedCount = schedule!.filter((item) => item.status === 'done').length;\n\n  return (\n    <HeadedLayout showNav heading={t('Program')}>\n      <DashboardCard heading={t('Active Program')}>\n        <DashboardDetail label={t('Name')} value={program!.name} />\n        <DashboardDetail label={t('Author')} value={program!.author} />\n        {program!.link && <DashboardDetail label={t('Sourced from')} value={program!.link} />}\n        <DashboardDetail label={t('Duration')} value={`${program!.duration} weeks`} />\n        <DashboardDetail label={t('Workouts per week')} value={program!.daysPerWeek} />\n        <DashboardDetail label={t('Workout duration')} value={`${program!.workoutDuration} min`} />\n        {program?.video && (\n          <Center paddingTop={2}>\n            <Video video={program.video} />\n          </Center>\n        )}\n      </DashboardCard>\n      <DashboardCard heading={t('Workouts')}>\n        <WorkoutRoutinesHScroll workouts={program!.workouts(strengthLevel)} showVideos />\n      </DashboardCard>\n      <DashboardCard heading={t('Schedule')}>\n        <WorkoutList workouts={schedule!} />\n        <Text italic textAlign={'right'}>\n          {t('{{completedCount}}/{{total}} workouts complete', { completedCount, total: schedule!.length })}\n        </Text>\n      </DashboardCard>\n    </HeadedLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport { BottomButtonsBox } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram, useLog } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nexport default function Settings() {\n  const { t } = useTranslation();\n  const { activeProgramLoaded, resetProgram } = useActiveProgram();\n  const { resetLog } = useLog();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Settings')}>\n      <BottomButtonsBox>\n        <RoutingButton to={Destination.Log} onPress={resetLog} colorScheme=\"secondary\" marginY={1}>\n          {t('Reset Log')}\n        </RoutingButton>\n        <RoutingButton to={Destination.GetStarted} onPress={resetProgram}>\n          {t('Reset/Change Program')}\n        </RoutingButton>\n      </BottomButtonsBox>\n    </HeadedLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\n\nexport default function Vault() {\n  const { t } = useTranslation();\n\n  return (\n    <HeadedLayout showNav heading={t('Vault')}>\n      <Text>{t('Coming Soon')}</Text>\n    </HeadedLayout>\n  );\n}\n","import { Box, Divider, HStack, Text, VStack } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { RoutineEntry } from '../../domain/programs';\nimport { useLog } from '../../domain/trainee';\n\nexport default function Log() {\n  const { t } = useTranslation();\n  const { workoutLog, logLoaded } = useLog();\n\n  if (!logLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Log')}>\n      {(!workoutLog || !workoutLog.length) && <Text>{t('No workouts logged.')}</Text>}\n      {workoutLog?.map((workout) => {\n        const key = `${workout.datePerformed}-${workout.name}`;\n        return (\n          <DashboardCard key={key}>\n            <VStack space={1}>\n              <Text bold fontSize={'xs'}>\n                {new Date(workout.datePerformed).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              </Text>\n              <Text fontSize={'xs'}>\n                {t('{{workoutName}}, {{program}}', { workoutName: workout.name, program: workout.program })}\n              </Text>\n              <Divider />\n              {workout.routine.map((item: RoutineEntry) => (\n                <Box key={`${key}-${item.exercise}`}>\n                  {item.sets.length > 0 && (\n                    <Box>\n                      <Text bold fontSize={'xs'}>\n                        {item.exercise}\n                      </Text>\n                      <HStack>\n                        {item.sets.map((set, setId) => (\n                          <Text fontSize={'xs'} key={`${key}-${item.exercise}set-${setId}`} marginRight={2}>\n                            {!!set.weight && !!set.reps && `${set.weight}x${set.reps}`}\n                            {!set.weight && !!set.reps && `${set.reps}reps`}\n                          </Text>\n                        ))}\n                      </HStack>\n                    </Box>\n                  )}\n                </Box>\n              ))}\n            </VStack>\n          </DashboardCard>\n        );\n      })}\n    </HeadedLayout>\n  );\n}\n","import { toNearestIncrement } from '../../utils/weight';\nimport { RoutineEntry, RoutineSet } from '../programs';\nimport { StrengthMetrics } from '../standards';\nimport { LiftAttempt, Lifts, ScheduledWorkout } from '../trainee';\n\nexport const getWorkoutById = (schedule: ScheduledWorkout[]) => (id: number) => schedule.find((entry) => entry.id === id);\n\nexport const getWorkoutTotalSetCount = (workout: ScheduledWorkout): number =>\n  workout.routine.reduce((acc, current) => {\n    if (current.warmup) acc = acc + current.warmup.length;\n    if (current.sets) acc = acc + current.sets.length;\n    return acc;\n  }, 0);\n\nexport const getCompleteSetCount = (workout: ScheduledWorkout): number => {\n  return workout.routine.reduce((acc: number, curr: RoutineEntry) => {\n    let count = acc;\n    [...(curr.warmup ? curr.warmup : []), ...(curr.sets ? curr.sets : [])].forEach((curr) => {\n      if (curr.status === 'done') count = count + 1;\n    });\n\n    return count;\n  }, 0);\n};\n\nexport const getPreviousWorkoutOfType = (schedule: ScheduledWorkout[]) => (workoutId: number) => {\n  const workout = schedule[workoutId];\n  let previous;\n  for (let i = workoutId - 1; i >= 0; i--) {\n    if (schedule[i].name === workout.name) {\n      previous = schedule[i];\n      break;\n    }\n  }\n  return previous;\n};\n\nexport const getPreviousLift =\n  (schedule: ScheduledWorkout[], workoutId: number, currentLifts?: Lifts) =>\n  (exerciseId: number, setId: number, warmup = false): { weight: number | undefined; reps: number } | undefined => {\n    // @TODO track and handle warmup history\n    if (warmup) return;\n\n    const previousWorkout = getPreviousWorkoutOfType(schedule!)(workoutId);\n    const previousSet = previousWorkout?.routine[exerciseId].sets[setId];\n\n    let previous = previousSet ? { weight: previousSet.weight, reps: previousSet.reps! } : undefined;\n\n    // if no previous and it is not a warmup\n    if (!previous && setId === 0 && currentLifts) {\n      previous = currentLifts[schedule[workoutId].routine[exerciseId].exercise as keyof typeof currentLifts];\n    }\n\n    return previous;\n  };\n\nexport const getRecommendedWeight =\n  ({\n    schedule,\n    workoutId,\n    barbellIncrement,\n    barbellDecrement,\n    dumbbellIncrement,\n    dumbbellDecrement,\n    strengthStandards,\n    bodyweight,\n    currentLifts,\n  }: {\n    schedule: ScheduledWorkout[];\n    workoutId: number;\n    barbellIncrement: number;\n    barbellDecrement: number;\n    dumbbellIncrement: number;\n    dumbbellDecrement: number;\n    strengthStandards: StrengthMetrics;\n    bodyweight: number;\n    currentLifts: Lifts;\n  }) =>\n  (exerciseId: number, setId: number, warmup = false): number | undefined => {\n    const entry = schedule[workoutId].routine[exerciseId];\n    const currentLift = currentLifts[entry.exercise as keyof typeof currentLifts];\n    const liftStandards = strengthStandards[entry.exercise as keyof typeof strengthStandards];\n    const set = warmup ? entry.warmup?.[setId] : entry.sets[setId];\n\n    // @TODO by exercise type\n    const smallestIncrement = barbellIncrement;\n    const deloadDecrement = barbellDecrement;\n\n    let weight;\n    if (set?.weight) {\n      weight = set.weight;\n    } else if (set?.percentage && liftStandards) {\n      weight = liftStandards[set.basis ?? 'oneRepMax']! * (set.percentage / 100);\n    } else if (set?.ratio) {\n      weight = bodyweight * set.ratio;\n    } else if (!warmup && currentLift) {\n      const needsDeload = currentLift.fails && currentLift.fails >= 3;\n      const passedLastAttempt = currentLift.targetReps && currentLift.reps >= currentLift.targetReps;\n      const needsToRepeatPrevious = currentLift.targetReps && currentLift.reps < currentLift.targetReps;\n      if (needsDeload) {\n        weight = Number(currentLift.weight) - Number(currentLift.weight) * (deloadDecrement / 100);\n      } else if (passedLastAttempt) {\n        weight = Number(currentLift.weight) + Number(smallestIncrement);\n      } else if (needsToRepeatPrevious) {\n        weight = Number(currentLift.weight);\n      } else if (liftStandards) {\n        // @TODO should be configurable?\n        weight = liftStandards['fiveRepMax'];\n      }\n    } else if (liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      weight = Number(currentLift.weight);\n    }\n\n    return weight && toNearestIncrement({ weight, increment: smallestIncrement });\n  };\n\nconst getBestAttemptFromSets = (sets: RoutineSet[]): LiftAttempt =>\n  sets.reduce(\n    (acc, set) => {\n      if (!set.weight && !set.reps) return acc;\n\n      if (set.weight && set.weight >= acc.weight) {\n        acc.weight = Number(set.weight);\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      } else if ((set.weight == acc.weight || !set.weight) && set.reps! > acc.reps) {\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      }\n      return acc;\n    },\n    <LiftAttempt>{ weight: 0, reps: 0, targetReps: 0 }\n  );\n\nexport const updateCurrentLifts = (\n  currentLifts: Lifts,\n  workout: ScheduledWorkout,\n  setCurrentLifts: (newLifts: Lifts) => void\n) => {\n  setCurrentLifts({\n    ...currentLifts,\n    ...workout?.routine.reduce((acc, curr: RoutineEntry) => {\n      if (curr.ignoreForTracking) return acc;\n\n      const { weight, reps, targetReps } = getBestAttemptFromSets(curr.sets);\n      const currentFails = currentLifts[curr.exercise as keyof typeof currentLifts]?.fails ?? 0;\n      const isFail = targetReps && reps < targetReps;\n\n      return { ...acc, [curr.exercise as string]: { weight, reps, targetReps, fails: isFail ? currentFails + 1 : 0 } };\n    }, {}),\n  });\n};\n","import { Icon, Modal, Pressable } from 'native-base';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useState } from 'react';\n\nimport { RoutineEntry } from '../../../../domain/programs';\nimport { Video } from '../../../../components/Content';\n\nexport const ExerciseInfo = ({ item }: { item: RoutineEntry }) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n  const { video } = item;\n  return (\n    <>\n      <Modal\n        isOpen={modalVisible}\n        onClose={() => {\n          setModalVisible(false);\n        }}\n      >\n        <Modal.CloseButton />\n        {video && <Video video={video} />}\n      </Modal>\n      {video && (\n        <Pressable\n          onPress={() => {\n            setModalVisible(true);\n          }}\n        >\n          <Icon as={MaterialCommunityIcons} name={'information-outline'} size={'sm'} />\n        </Pressable>\n      )}\n    </>\n  );\n};\n","import { Box, Text } from 'native-base';\n\nexport const SetIdentifier = ({ warmup, setId }: { warmup?: boolean; setId: number }) => (\n  <Box width={25} borderRadius={10} background={warmup ? 'primary.50' : 'primary.200'} padding={0.5}>\n    <Text textAlign={'center'} fontSize={'xs'}>\n      {setId + 1}\n    </Text>\n  </Box>\n);\n","import { RoutineSet } from '../../../domain/programs';\n\nexport const getTargetRepsPlaceholder = (entry: RoutineSet): string => {\n  let placeholder = '';\n  if (entry.minReps) {\n    placeholder = `${entry.minReps}-${entry.maxReps}`;\n  } else if (entry.targetReps) {\n    placeholder = `${entry.targetReps}`;\n  } else if (entry.reps) {\n    placeholder = `${entry.reps}`;\n  }\n\n  if (entry.AMRAP) placeholder = `${placeholder}+`;\n\n  return placeholder;\n};\n\nexport const getPreviousLabel =\n  (\n    getPreviousLift: (\n      exerciseId: number,\n      setId: number,\n      isWarmup: boolean\n    ) => { weight: number | undefined; reps: number } | undefined\n  ) =>\n  (exerciseId: number, setId: number, isWarmup = false) => {\n    const prev = getPreviousLift(exerciseId, setId, isWarmup);\n    if (prev && prev.weight) {\n      return `${prev?.weight}x${prev?.reps}`;\n    } else if (prev && prev.reps) {\n      return `${prev?.reps}`;\n    }\n    return '-';\n  };\n","import { Checkbox, Input, Text } from 'native-base';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel, getTargetRepsPlaceholder } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Sets = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const { t } = useTranslation();\n  const [sets, setSets] = useState<RoutineSet[]>(routine.sets);\n  const onUpdate = (setId: number, attr: 'weight' | 'reps', value: any) => {\n    const newSets = [...sets];\n    newSets[setId][attr] = value;\n    setSets(newSets);\n  };\n  return (\n    <>\n      {sets.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-set-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId), textAlign: 'center' },\n            ...(!routine.bodyweight\n              ? [\n                  {\n                    content: (\n                      <Input\n                        keyboardType={'decimal-pad'}\n                        value={entry.weight?.toString() || ''}\n                        textAlign={'center'}\n                        onChangeText={(value: string) => onUpdate(setId, 'weight', value)}\n                        placeholder={getRecommendedWeight(exerciseId, setId)?.toString()}\n                        marginX={1}\n                      />\n                    ),\n                    textAlign: 'center',\n                  },\n                ]\n              : []),\n            {\n              content: (\n                <Input\n                  keyboardType={'number-pad'}\n                  value={entry.reps?.toString() || ''}\n                  textAlign={'center'}\n                  onChangeText={(value: string) => onUpdate(setId, 'reps', Number(value))}\n                  placeholder={getTargetRepsPlaceholder(entry)}\n                  marginX={1}\n                />\n              ),\n              textAlign: 'center',\n            },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, false)}\n                >\n                  <Text display={'none'}>{t('Done')}</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Checkbox, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Warmups = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {routine.warmup?.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-warmup-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier warmup setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId, true), textAlign: 'center' },\n            ...(!routine.bodyweight ? [{ content: getRecommendedWeight(exerciseId, setId, true), textAlign: 'center' }] : []),\n            { content: entry.reps, textAlign: 'center' },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, true)}\n                >\n                  <Text display={'none'}>{t('Done')}</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Box, Heading, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { Table, TableHeader } from '../../../components/Content';\nimport { RoutineEntry } from '../../../domain/programs';\nimport { ScheduledWorkout } from '../../../domain/trainee';\nimport { ExerciseInfo } from './components/ExerciseInfo';\nimport { SetProps } from './interfaces';\nimport { Sets } from './Sets';\nimport { Warmups } from './Warmups';\n\nexport const WorkoutSheet = ({\n  workout,\n  ...rest\n}: {\n  workout: ScheduledWorkout;\n} & SetProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      {workout.routine.map((item: RoutineEntry, exerciseId: number) => {\n        return (\n          <Box key={`workout-${item.exercise}`} marginBottom={10}>\n            <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n              {item.optional && <Text italic>{t('(Optional)')} </Text>}\n              {item.exercise} <ExerciseInfo item={item} />\n            </Heading>\n            {item.note && (\n              <Text>\n                {t('Note:')} {item.note}\n              </Text>\n            )}\n            <Table>\n              <TableHeader\n                headings={[\n                  { content: t('Set'), textAlign: 'left', width: 10 },\n                  { content: t('Previous') },\n                  ...(!item.bodyweight ? [{ content: t('Weight') }] : []),\n                  { content: t('Reps') },\n                  { content: '' },\n                ]}\n              />\n              <Warmups exerciseId={exerciseId} routine={item} {...rest} />\n              <Sets exerciseId={exerciseId} routine={item} {...rest} />\n            </Table>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\nimport { CountdownCircleTimer, TimeProps } from 'react-native-countdown-circle-timer';\n\nimport { FormCard } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { getTraineeMetrics, Lifts, useActiveProgram, useLog, useTrainee } from '../../domain/trainee';\nimport {\n  getCompleteSetCount,\n  getPreviousLift,\n  getRecommendedWeight,\n  getWorkoutById,\n  getWorkoutTotalSetCount,\n  updateCurrentLifts,\n} from '../../domain/workout';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { WorkoutSheet } from './WorkoutSheet';\nimport { Box, Progress, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\n\nexport default function Workout() {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { program, schedule, activeProgramLoaded, updateSchedule } = useActiveProgram();\n  const { logWorkout } = useLog();\n\n  const [setsDone, setSetsDone] = useState<number>(0);\n  const [nextRestDuration, setNextRestDuration] = useState<number>(0);\n  const [remainingTime, setRemainingTime] = useState<number>(0);\n\n  const workout = schedule && getWorkoutById(schedule)(Number(id));\n\n  useEffect(() => {\n    schedule && workout && setSetsDone(getCompleteSetCount(workout));\n  }, [id, schedule, setSetsDone, workout]);\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const { strengthMetrics } = getTraineeMetrics(trainee!);\n  const totalSets = workout ? getWorkoutTotalSetCount(workout) : 0;\n\n  const getSetRecommendedWeight = getRecommendedWeight({\n    schedule: schedule!,\n    workoutId: Number(id),\n    barbellIncrement: 5,\n    barbellDecrement: 10,\n    dumbbellIncrement: 2,\n    dumbbellDecrement: 15,\n    strengthStandards: strengthMetrics,\n    bodyweight: trainee!.weight,\n    currentLifts: trainee!.currentLifts,\n  });\n\n  const onChangeSetWeight = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_weight', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onChangeSetReps = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_reps', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onSetComplete = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    setSetsDone((previous: number) => previous + 1);\n    updateSchedule({\n      type: 'complete_set',\n      payload: { id, exerciseId, setId, isWarmup, recommendedWeight: getSetRecommendedWeight(exerciseId, setId, isWarmup) },\n    });\n    // trigger rest timer\n    const restTime = isWarmup ? 60 : (schedule![Number(id!)].routine[exerciseId].rest ?? 1) * 60;\n    setNextRestDuration(restTime);\n    setRemainingTime(restTime);\n  };\n\n  const finishWorkout = () => {\n    updateCurrentLifts(trainee!.currentLifts, workout!, (newLifts: Lifts) => updateTrainee('currentLifts', newLifts));\n    updateSchedule({ type: 'end_workout', payload: { id } });\n    logWorkout(workout!, program!.name);\n  };\n\n  return (\n    <HeadedLayout\n      showNav\n      heading={workout!.name}\n      headerElements={\n        <>\n          <Progress w=\"70%\" colorScheme=\"primary\" value={(setsDone / totalSets) * 100} marginY={1} />\n          {nextRestDuration > 0 && remainingTime > 0 && (\n            <Box paddingY={2}>\n              <CountdownCircleTimer\n                size={90}\n                strokeWidth={8}\n                key={setsDone}\n                isPlaying\n                duration={nextRestDuration}\n                colors={'#FF8533'}\n              >\n                {({ remainingTime }: TimeProps) => {\n                  setRemainingTime(remainingTime);\n                  return <Text color={'white'} fontSize={'xs'}>{`${~~(remainingTime / 60)}min ${remainingTime % 60}sec`}</Text>;\n                }}\n              </CountdownCircleTimer>\n            </Box>\n          )}\n        </>\n      }\n    >\n      <FormCard>\n        <WorkoutSheet\n          workout={workout!}\n          getRecommendedWeight={getSetRecommendedWeight}\n          onChangeSetReps={onChangeSetReps}\n          onChangeSetWeight={onChangeSetWeight}\n          onSetComplete={onSetComplete}\n          getPreviousLift={getPreviousLift(schedule!, Number(id), trainee!.currentLifts)}\n        />\n        {workout?.status !== 'done' && (\n          <RoutingButton to={Destination.Dashboard} onPress={finishWorkout}>\n            {t('Finish Workout')}\n          </RoutingButton>\n        )}\n      </FormCard>\n    </HeadedLayout>\n  );\n}\n","import { Route, Routes } from 'react-router';\nimport { NativeBaseProvider } from 'native-base';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { nativeBaseTheme } from './theme';\nimport { Destination, Router } from './utils/routing';\nimport { Loader } from './components/Loader';\n\nimport About from './screens/About';\nimport Welcome from './screens/Welcome';\nimport GetStarted from './screens/GetStarted';\nimport ProgramSelection from './screens/ProgramSelection';\nimport Dashboard from './screens/Dashboard';\nimport Program from './screens/Program';\nimport Settings from './screens/Settings';\nimport Vault from './screens/Vault';\nimport Log from './screens/Log';\nimport Workout from './screens/Workout';\n\ni18n.use(initReactI18next).init({\n  resources: {},\n  lng: 'en',\n  fallbackLng: 'en',\n});\n\nexport default function App() {\n  const activeProgramLoaded = true;\n\n  return (\n    <NativeBaseProvider theme={nativeBaseTheme}>\n      {!activeProgramLoaded ? (\n        <Loader />\n      ) : (\n        <Router>\n          <Routes>\n            <Route path={Destination.Home} element={<Welcome />} />\n            <Route path={Destination.About} element={<About />} />\n            <Route path={Destination.Dashboard} element={<Dashboard />} />\n            <Route path={Destination.GetStarted} element={<GetStarted />} />\n            <Route path={Destination.ProgramSelection} element={<ProgramSelection />} />\n            <Route path={Destination.Program} element={<Program />} />\n            <Route path={Destination.Settings} element={<Settings />} />\n            <Route path={Destination.Vault} element={<Vault />} />\n            <Route path={Destination.Log} element={<Log />} />\n            <Route path={Destination.Workout} element={<Workout />} />\n          </Routes>\n        </Router>\n      )}\n    </NativeBaseProvider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.19683717.png\";","module.exports = __webpack_public_path__ + \"static/media/go.077d9926.png\";","module.exports = __webpack_public_path__ + \"static/media/welcome2.bd841836.png\";","module.exports = __webpack_public_path__ + \"static/media/Male10.f23d08d5.png\";","module.exports = __webpack_public_path__ + \"static/media/Male15.293ba6ba.png\";","module.exports = __webpack_public_path__ + \"static/media/Male20.4ad2a421.png\";","module.exports = __webpack_public_path__ + \"static/media/Male25.a2cbf1de.png\";","module.exports = __webpack_public_path__ + \"static/media/Male30.c81ae86e.png\";","module.exports = __webpack_public_path__ + \"static/media/Female10.0c2955e8.png\";","module.exports = __webpack_public_path__ + \"static/media/Female15.6d965ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/Female20.14ba5dd7.png\";","module.exports = __webpack_public_path__ + \"static/media/Female25.91e6a499.png\";","module.exports = __webpack_public_path__ + \"static/media/Female30.fd170a69.png\";"],"sourceRoot":""}