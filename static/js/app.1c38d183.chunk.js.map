{"version":3,"sources":["utils/routing.tsx","theme/index.ts","theme/components/Select.ts","components/Loader/index.tsx","components/Logo/index.tsx","components/Layouts/Navigations.tsx","components/Layouts/index.tsx","screens/Welcome/index.tsx","components/Content/Tables.tsx","domain/constants/index.ts","domain/exercises/exercises.ts","components/Content/Typography.tsx","components/Content/Video.tsx","components/FitnessComponents/index.tsx","domain/programs/routines/athleanx.ts","domain/programs/routines/startingstrength.ts","domain/programs/routines/stronglifts.ts","domain/programs/routines/vigilante.ts","domain/programs/programs.ts","screens/About/index.tsx","domain/nutrition/nutrition.ts","utils/calendar.ts","utils/measurements.ts","domain/nutrition/calculators.ts","domain/standards/speed.ts","domain/standards/strength.ts","domain/standards/calculators.ts","domain/trainee/trainee.ts","domain/trainee/targets.ts","components/Dashboards/index.tsx","components/Forms/EnumSelect/index.tsx","components/Forms/index.tsx","components/Standards/StandardsComparison.tsx","components/Standards/LiftingStandardsCalculator.tsx","screens/GetStarted/components/NutritionPreferences.tsx","screens/GetStarted/components/ProgressionPreferences.tsx","screens/GetStarted/components/SchedulingPreferences.tsx","components/Forms/BodyFatSelector/index.tsx","components/Forms/ImperialHeightInput/index.tsx","screens/GetStarted/components/CurrentBodyMetrics.tsx","screens/GetStarted/GetStarted.tsx","components/Nutrition/index.tsx","utils/weight.ts","components/Targets/LiftingTargets.tsx","components/Targets/SpeedTargets.tsx","domain/schedule/helpers.ts","domain/schedule/index.ts","domain/programs/activeProgram.ts","screens/GetStarted/ProgramSelection.tsx","domain/log/index.ts","domain/workout/helpers.ts","domain/workout/index.tsx","screens/Dashboard/Today.tsx","components/Workouts/WorkoutsList.tsx","screens/Dashboard/ThisWeek.tsx","screens/Dashboard/index.tsx","components/Workouts/WorkoutSheet/components/ExerciseInfo.tsx","components/Workouts/WorkoutSheet/components/SetIdentifier.tsx","components/Workouts/WorkoutSheet/helpers.ts","components/Workouts/WorkoutSheet/Sets.tsx","components/Workouts/WorkoutSheet/Warmups.tsx","components/Workouts/WorkoutSheet/index.tsx","screens/Workout/index.tsx","screens/Log/index.tsx","screens/Settings/index.tsx","screens/Program/Schedule.tsx","screens/Program/Workouts.tsx","screens/Program/index.tsx","screens/Vault/index.tsx","App.tsx","components/Logo/logo.png","components/Layouts/go.png","screens/Welcome/welcome2.png","components/FitnessComponents/strength-icon.png","components/FitnessComponents/cardio-icon.png","components/FitnessComponents/speed-icon.png","assets/comics/comic1.png","assets/comics/comic2.png","assets/comics/comic3.jpeg","components/Forms/BodyFatSelector/Male10.png","components/Forms/BodyFatSelector/Male15.png","components/Forms/BodyFatSelector/Male20.png","components/Forms/BodyFatSelector/Male25.png","components/Forms/BodyFatSelector/Male30.png","components/Forms/BodyFatSelector/Female10.png","components/Forms/BodyFatSelector/Female15.png","components/Forms/BodyFatSelector/Female20.png","components/Forms/BodyFatSelector/Female25.png","components/Forms/BodyFatSelector/Female30.png"],"names":["Destination","nativeBaseTheme","extendTheme","fontSizes","xs","sm","md","lg","xl","colors","primary","secondary","components","Select","baseStyle","borderWidth","textAlign","paddingTop","Router","children","Platform","OS","basename","useNavigate","useNavigateDom","linkStyle","color","Link","to","label","style","textDecoration","Text","ExternalLink","text","onPress","Linking","openURL","RoutingButton","rest","navigate","Button","Loader","Center","height","Spinner","accessibilityLabel","Logo","size","Image","marginBottom","width","alt","resizeMode","source","require","tabs","icon","action","Program","Log","image","Dashboard","Vault","Settings","Navigation","location","useLocation","useStoredState","selectedTab","setSelectedTab","selectedTabLoaded","useEffect","pathname","includes","forEach","tab","idx","HStack","bg","alignItems","safeAreaBottom","shadow","position","bottom","left","map","id","Pressable","opacity","py","flex","Icon","mb","as","MaterialCommunityIcons","name","DefaultLayout","showLogo","showNav","backgroundColor","Box","safeArea","maxWidth","marginX","paddingY","ScrollView","HeadedLayout","heading","headerElements","safeAreaTop","top","zIndex","bold","paddingBottom","marginTop","Headline","fontSize","fontWeight","Welcome","marginY","Container","paddingLeft","About","GetStarted","Goal","ExperienceLevel","Gender","UnitsType","ActivityLevel","DietType","WeekDay","ExerciseType","Exercise","Table","VStack","TableHeader","headings","justifyContent","borderBottomWidth","borderBottomColor","length","sideBorder","content","TableCell","bottomBorder","borderRightWidth","borderRightColor","TableRow","values","item","Paragraph","BulletPoint","marginLeft","marginRight","Video","video","alignSelf","uri","useNativeControls","videoId","FitnessComponents","ahtleanXRoutines","author","link","level","Beginner","Novice","Intermediate","gender","Male","Female","goal","Strength","Size","Lean","Speed","daysPerWeek","weeklySchedule","workoutDuration","duration","workouts","warmup","percentage","reps","mainSets","targetReps","secondarySets","Array","routine","exercise","MultiLunge","sets","Squat","startingWeight","HipThrust","fill","minReps","maxReps","Bench","Chinup","DbCarry","ratio","Facepull","Deadlift","ReverseLunge","Press","Row","DbOverheadCarry","HipBand","PullApart","ssRoutines","PowerClean","optional","Advanced","basis","volumeSets","progressionSets","ignoreForTracking","bodyweight","AMRAP","Hyperextensions","PowerSnatch","slRoutines","Dips","weight","Shrugs","TricepExtensions","Curls","CableCrunches","note","CloseGripBench","InclineCurls","Situp","vigilanteRoutines","AMARAP","RDL","WalkingLunges","Pullup","LateralRaises","InclineBench","Dip","HighPulls","programs","sort","a","b","getProgram","find","program","Heading","NutritionType","DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getDateOfWeekday","dayName","date","Date","allowPast","now","getDay","day","findIndex","toLowerCase","diff","nextDayTimestamp","getTime","isDateInPast","today","setHours","getNextWorkoutDay","weekStart","previousWorkoutDate","proposedDate","scheduleDay","previousWorkoutDay","previousWorkoutDayIndex","getNextScheduledWeekday","schedule","found","parts","reduce","acc","current","push","week","convertScheduleToWeekdays","lbsToKg","lbs","feetToInches","feet","formatDecimalMins","time","min","Math","floor","sec","getWeightLabel","unitsType","Imperial","getHeightLabel","getCircumferenceLabel","bmrFormulas","miffinStJeor","weightInLbs","heightInInches","age","harrisBenedict","katchMcArdle","bodyFat","getTargetCalories","tdee","cycleNutrition","numberOfWorkoutDays","higherCaloriesOnWeekends","preferAggressiveCut","isCut","Cut","AggressiveCut","modifier","Bulk","Maintain","getEnergyExpenditureModifier","average","workoutdaysTarget","restdaysTarget","weekendTarget","abs","trainingDay","restDay","weekend","energyExpenditureModifier","getNutritionRecommendation","cms","activityLevel","primaryGoal","secondaryGoal","needsMetabolicReset","currentCalories","calcWeight","Metric","calcHeight","round","bmi","calculateBMI","bmr","args","formula","Object","keys","calculateBMR","Active","VeryActive","Sedentary","calculateTDEE","targetProtein","bodyWeightInLbs","grams","calculateMinimumProteinRequirement","largeDeficitDueToBodyfatMessage","type","reason","getNutritionTypeRecommendation","targetCalories","getTodaysCalories","recommendedNutrition","isWorkoutDay","dayOfWeek","isDateWeekend","speedStandards","mileRun","fiveKmRun","Vigilante","getSpeedStandards","strengthStandards","oneRepMax","Pushup","getLiftStandards","getStrengthLevel","everLifted","accLevel","lift","liftStandards","liftLevel","levelStandards","oneRepMaxForComparison","meetsOneRepMaxBasedStandard","meetsWeightBasedStandard","meetsRepBasedStandard","getLiftLevel","isLowerStandard","indexOf","undefined","formulas","epley","brzycki","oconner","lombardi","wathan","exp","mayhem","lander","calculatRepMax","multiplier","calculateThreeRepMax","calculateFiveRepMax","calculateEightRepMax","calculateTenRepMax","calculateTwelveRepMax","calculateFithteenRepMax","calculateTwentyRepMax","calculateRepMaxes","calculate1RepMax","threeRepMax","fiveRepMax","eightRepMax","tenRepMax","twelveRepMax","fithteenRepMax","twentyRepMax","defaultStats","waist","dietType","currentLifts","defaultPreferences","barbellIncrement","barbellDecrement","dumbbellIncrement","dumbbellDecrement","traineeStatsReducer","stats","payload","newStats","traineePreferencesReducer","preferences","newPrefs","useTrainee","useStoredReducer","updateStats","statsLoaded","unsetStats","updatePreferences","preferencesLoaded","unsetPreferences","useMemo","lifts","key","repMaxes","strengthLevel","speedLevel","mileRunTime","runStandards","meetsMileRunStandard","meetsFiveKmStandard","getSpeedLevel","recommendedPrograms","maxDaysPerWeek","maxWorkoutDuration","suitablePrograms","filter","isLevelAppropriate","isGenderAppropriate","meetsPrimaryGoal","meetsSecondaryGoal","isSuitableSchedule","bestMatch","getProgramRecommendations","speedTargets","speedMetrics","standards","getNextSpeedTargets","liftTargets","lifterStandards","getLiftTarget","currentLift","levelStandard","levelOneRepMax","levelRatio","target","getNextLiftTargets","bodyFatTarget","traineeLoaded","setStat","stat","value","setPreference","preference","resetTrainee","DashboardHeading","DashboardCard","useTheme","padding","rounded","white","DashboardLabel","DashboardDetail","EnumSelect","Enum","selectedValue","onValueChange","placeholder","toString","minWidth","Item","EnumMultiSelect","selectedValues","onChange","Checkbox","Group","defaultValue","space","flexWrap","my","FormCard","InlineField","allowWrap","StackedField","BottomButtonsBox","StrengthStandardsComparison","weightLabel","horizontal","showsHorizontalScrollIndicator","getCellContent","isStandard","italic","SpeedtandardsComparison","genderStandards","LiftingStandardsCalculator","setLifts","cellWidth","calculated","Input","keyboardType","onChangeText","Number","NutritionPreferences","Switch","isChecked","checked","ProgressionPreferences","weightUnitLabel","Arrow","SchedulingPreferences","workoutDays","newValues","BodyFatImageMap","10","15","20","25","30","BodyFatSelector","setBodyFat","Radio","percent","ImperialHeightInput","setHeight","useState","setFeet","inches","setInches","converted","inchesToFeet","onSetHeight","CurrentBodyMetrics","newValue","enableContinueButton","pushUps","pullUps","newLifts","cycleProgramsOften","minimalLegs","Alert","status","colorScheme","flexShrink","ProgramSelection","disabled","NutritionInfo","protocol","Divider","NutritionRecommendations","toNearestIncrement","increment","LiftingTargets","roundedFiveReps","SpeedTargets","updateWorkoutWithCompletedSet","workoutId","exerciseId","setId","isWarmup","recommendedWeight","set","scheduleReducer","newSchedule","createSchedule","experienceLevel","markAllSetsAsComplete","Error","firstWorkoutMustBeOnWeekStart","totalWorkouts","workoutWeeklyIndex","useActiveProgram","activeProgram","setActiveProgram","activeProgramLoaded","unsetIsActive","updateSchedule","scheduleLoaded","unsetSchedule","todaysWorkout","getTodaysWorkout","thisWeeksWorkouts","entry","dayjs","isSame","getScheduledForThisWeek","active","initialiseProgram","resetProgram","setProgram","useLog","workoutLog","setWorkoutLog","workoutLogLoaded","removeWorkoutLog","logLoaded","logWorkout","workout","datePerformed","resetLog","getPreviousWorkoutOfType","previous","i","getPreviousLift","previousWorkout","previousSet","updateCurrentLifts","setCurrentLifts","curr","currentFails","fails","isFail","useWorkout","setsDone","setSetsDone","getWorkoutById","totalSets","getWorkoutTotalSetCount","count","getCompleteSetCount","getSetRecommendedWeight","smallestIncrement","deloadDecrement","needsDeload","passedLastAttempt","needsToRepeatPrevious","getRecommendedWeight","startWorkout","finishWorkout","onChangeSetWeight","onChangeSetReps","onSetComplete","getRestTime","Today","calories","paddingRight","WorkoutList","dateFormat","isDone","MaterialIcons","toLocaleDateString","weekday","month","goToWorkout","ThisWeek","ExerciseInfo","modalVisible","setModalVisible","Modal","isOpen","onClose","CloseButton","SetIdentifier","borderRadius","background","getTargetRepsPlaceholder","getPreviousLabel","prev","Sets","setSets","onUpdate","attr","newSets","display","Warmups","WorkoutSheet","Workout","useParams","baseOnSetComplete","nextRestDuration","setNextRestDuration","remainingTime","setRemainingTime","Progress","w","strokeWidth","isPlaying","restTime","year","Schedule","completedCount","getExerciseRepLabel","numberOfSets","Workouts","wid","hasDivider","orientation","App","NativeBaseProvider","theme","path","element","module","exports"],"mappings":"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","file":"static/js/app.1c38d183.chunk.js","sourcesContent":["import { Button, IButtonProps, Text } from 'native-base';\nimport { Linking, Platform } from 'react-native';\nimport { BrowserRouter, Link as DomLink, useNavigate as useNavigateDom } from 'react-router-dom';\nimport { NativeRouter, NavigateFunction, Link as NativeLink, useNavigate as useNavigateNative } from 'react-router-native';\n\nexport enum Destination {\n  About = '/About',\n  Dashboard = '/Dashboard',\n  GetStarted = '/GetStarted',\n  Program = '/Program',\n  ProgramSelection = '/ProgramSelection',\n  Log = '/Log',\n  Settings = '/Settings',\n  Vault = '/Vault',\n  Welcome = '/',\n}\n\nexport const Router = ({ children }: { children: React.ReactNode }) =>\n  Platform.OS === 'web' ? (\n    <BrowserRouter basename=\"/workoutapp\">{children}</BrowserRouter>\n  ) : (\n    <NativeRouter>{children}</NativeRouter>\n  );\n\nexport const useNavigate = () => (Platform.OS === 'web' ? useNavigateDom() : useNavigateNative());\n\nconst linkStyle = { color: '#FF8533' };\n\nexport const Link = ({ to, label }: { to: Destination; label: string }) => {\n  return Platform.OS === 'web' ? (\n    <DomLink to={to} style={{ textDecoration: 'none' }}>\n      <Text style={linkStyle}>{label}</Text>\n    </DomLink>\n  ) : (\n    <NativeLink to={to}>\n      <Text style={linkStyle}>{label}</Text>\n    </NativeLink>\n  );\n};\n\nexport const ExternalLink = ({ to, text }: { to: string; text: string }) => {\n  return (\n    <Text\n      style={linkStyle}\n      onPress={() => {\n        Linking.openURL(to);\n      }}\n    >\n      {text}\n    </Text>\n  );\n};\n\nexport const RoutingButton = ({\n  children,\n  to,\n  onPress,\n  ...rest\n}: {\n  children: React.ReactNode;\n  to: Destination | string;\n  secondary?: boolean;\n  onPress?: () => void;\n} & IButtonProps) => {\n  const navigate = useNavigate();\n  return (\n    <Button\n      {...rest}\n      onPress={() => {\n        onPress && onPress();\n        navigate(to);\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const goToStart = (navigate: NavigateFunction) => navigate(Destination.GetStarted);\n\nexport const goToAbout = (navigate: NavigateFunction) => navigate(Destination.About);\n\nexport const goToProgram = (navigate: NavigateFunction) => navigate(Destination.Program);\n\nexport const goToSettings = (navigate: NavigateFunction) => navigate(Destination.Settings);\n\nexport const goToDashboard = (navigate: NavigateFunction) => navigate(Destination.Dashboard);\n\nexport const goToLog = (navigate: NavigateFunction) => navigate(Destination.Log);\n\nexport const goToVault = (navigate: NavigateFunction) => navigate(Destination.Vault);\n\nexport const goToProgramSelection = (navigate: NavigateFunction) => navigate(Destination.ProgramSelection);\n\nexport const goToWorkout = (navigate: NavigateFunction) => (id: number) => navigate(`/Workout/${id}`);\n","import { extendTheme } from 'native-base';\n\nimport { Select } from './components/Select';\n\nexport const nativeBaseTheme = extendTheme({\n  fontSizes: {\n    xs: 11,\n    sm: 13,\n    md: 15,\n    lg: 18,\n    xl: 28,\n  },\n  colors: {\n    primary: {\n      '50': '#FFF3EB',\n      '100': '#FFE7D6',\n      '200': '#FFCEAD',\n      '300': '#FFB685',\n      '400': '#FF9D5C',\n      '500': '#FF8533',\n      '600': '#F56200',\n      '700': '#B84900',\n      '800': '#7A3100',\n      '900': '#3D1800',\n    },\n    secondary: {\n      '50': '#f9f9f8',\n      '100': '#e0e0de',\n      '200': '#a5a5a5',\n      '300': '#808080',\n      '400': '#656565',\n      '500': '#4a4a4a',\n      '600': '#434343',\n      '700': '#3a3a3a',\n      '800': '#323232',\n      '900': '#222222',\n    },\n  },\n  components: {\n    Select,\n  },\n});\n","export const Select = {\n  baseStyle: {\n    borderWidth: 0,\n    textAlign: 'right',\n    paddingTop: 0,\n  },\n};\n\n","import { Center, Spinner } from 'native-base';\n\nexport const Loader = () => (\n  <Center height={'100%'}>\n    <Spinner accessibilityLabel=\"Loading\" />\n  </Center>\n);\n","import { Image } from 'native-base';\n\ntype LogoSize = 'sm' | 'md';\n\nconst Logo = ({ size }: { size?: LogoSize }) => {\n  let height = 268; // actual image height\n  switch (size) {\n    case 'sm':\n      height = height / 10;\n      break;\n    case 'md':\n      height = height / 4;\n      break;\n  }\n  return (\n    <Image marginBottom={1} width={'100%'} height={height} alt={'logo'} resizeMode={'contain'} source={require(`./logo.png`)} />\n  );\n};\n\nexport default Logo;\n","import { Center, HStack, Icon, Image, Pressable, Text } from 'native-base';\nimport { NavigateFunction, useNavigate, useLocation } from 'react-router-native';\nimport { ImageSourcePropType, Platform } from 'react-native';\nimport { useStoredState } from 'react-native-use-stored-state';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { goToDashboard, goToLog, goToProgram, goToSettings, goToVault } from '../../utils/routing';\n\nimport { Loader } from '../Loader';\nimport { ReactElement, useEffect } from 'react';\n\ninterface Tab {\n  label?: string;\n  icon?: string;\n  image?: ImageSourcePropType;\n  action: (navigate: NavigateFunction) => void;\n}\n\nconst tabs: Tab[] = [\n  {\n    label: 'Program',\n    icon: 'dumbbell',\n    action: goToProgram,\n  },\n  {\n    label: 'Log',\n    icon: 'calendar',\n    action: goToLog,\n  },\n  {\n    image: require('./go.png'),\n    action: goToDashboard,\n  },\n  {\n    label: 'Vault',\n    icon: 'video',\n    action: goToVault,\n  },\n  {\n    label: 'Settings',\n    icon: 'cog',\n    action: goToSettings,\n  },\n];\n\nexport const Navigation = (): ReactElement => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab, selectedTabLoaded] = useStoredState<number>('ACTIVE_NAV_TAB', 2);\n\n  useEffect(() => {\n    if (location.pathname.includes('Dashboard')) {\n      setSelectedTab(2);\n    } else {\n      tabs.forEach((tab, idx) => {\n        if (tab.label && location.pathname.includes(tab.label)) {\n          setSelectedTab(idx);\n        }\n      });\n    }\n  }, [location]);\n\n  if (!selectedTabLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HStack\n      bg={'secondary.100'}\n      alignItems={'center'}\n      safeAreaBottom\n      shadow={5}\n      paddingTop={2}\n      //@ts-expect-error forced web styles for sticky nav\n      style={Platform.OS === 'web' ? { position: 'fixed', bottom: 0, left: 0, width: '100%' } : {}}\n    >\n      {tabs.map((tab, id) => (\n        <Pressable\n          key={`nav-tab-${id}`}\n          opacity={selectedTab === id ? 1 : 0.5}\n          py={2}\n          flex={1}\n          onPress={() => {\n            setSelectedTab(id);\n            tab.action(navigate);\n          }}\n        >\n          <Center>\n            {tab.icon && <Icon mb={1} as={MaterialCommunityIcons} name={tab.icon} size={'md'} />}\n            {tab.label && <Text>{tab.label}</Text>}\n            {tab.image && <Image width={10} height={10} alt={'Next Workout'} resizeMode={'contain'} source={tab.image} />}\n          </Center>\n        </Pressable>\n      ))}\n    </HStack>\n  );\n};\n","import { Platform, ScrollView } from 'react-native';\nimport { Box, Center, Text } from 'native-base';\n\nimport Logo from '../Logo';\nimport { Navigation } from './Navigations';\n\nexport const DefaultLayout = ({\n  showLogo,\n  children,\n  showNav,\n  backgroundColor = 'secondary.50',\n}: {\n  showLogo?: boolean;\n  showNav?: boolean;\n  children: React.ReactNode;\n  backgroundColor?: 'secondary.100' | 'secondary.50';\n}) => {\n  return (\n    <>\n      <Box flex={1} backgroundColor={backgroundColor}>\n        <Box safeArea flex={1} maxWidth={600} width={'95%'} marginX={'auto'} paddingY={5}>\n          <ScrollView>\n            <>\n              {showLogo && (\n                <Center paddingY={5}>\n                  <Logo size={'md'} />\n                </Center>\n              )}\n              {children}\n            </>\n          </ScrollView>\n        </Box>\n      </Box>\n      {showNav && <Navigation />}\n    </>\n  );\n};\n\nexport const HeadedLayout = ({\n  showNav,\n  children,\n  backgroundColor = 'secondary.50',\n  heading,\n  headerElements,\n}: {\n  showNav?: boolean;\n  children: React.ReactNode;\n  heading?: string;\n  headerElements?: React.ReactNode;\n  backgroundColor?: string;\n}) => {\n  return (\n    <Box flex={1} backgroundColor={backgroundColor}>\n      <Box flex={1} maxWidth={600} width={'100%'} marginX={'auto'}>\n        <Box\n          safeAreaTop\n          bg={'secondary.500'}\n          paddingY={2}\n          //@ts-expect-error forced web styles for sticky top\n          style={Platform.OS === 'web' ? { position: 'fixed', top: 0, left: 0, width: '100%', zIndex: 100 } : {}}\n        >\n          <Center>\n            <Logo size={'sm'} />\n            {heading && (\n              <Text bold color={'white'}>\n                {heading}\n              </Text>\n            )}\n            {headerElements && <>{headerElements}</>}\n          </Center>\n        </Box>\n        <ScrollView\n          flex={1}\n          width={'96%'}\n          marginX={'auto'}\n          paddingBottom={20}\n          style={Platform.OS === 'web' ? { marginTop: '75px' } : {}}\n        >\n          <>{children}</>\n        </ScrollView>\n        {showNav && <Navigation />}\n      </Box>\n    </Box>\n  );\n};\n","import { Center, Container, Image, Text } from 'native-base';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nconst Headline = ({ text }: { text: string }) => (\n  <Text fontSize={'2xl'} marginBottom={2} fontWeight={500}>\n    {text}\n  </Text>\n);\n\nexport default function Welcome() {\n  return (\n    <DefaultLayout showLogo backgroundColor={'secondary.100'}>\n      <Center paddingTop={5}>\n        <Text textAlign={'center'} fontSize={'lg'} marginBottom={5}>\n          The simple, enjoyable and sustainable approach to training.\n        </Text>\n        <Headline text={'Get Stronger,'} />\n        <Headline text={'Get Faster,'} />\n        <Headline text={'Get Leaner.'} />\n      </Center>\n      <Center paddingY={5}>\n        <Image width={'100%'} height={320} resizeMode={'contain'} alt={'Welcome'} source={require(`./welcome2.png`)} />\n      </Center>\n      <Center marginY={5}>\n        <Text textAlign={'center'}>\n          This app matches your current level of strength and fitness to tried and tested training and nutrition regimes that are\n          sustainable for your lifestyle and preferences. It sets you short term goals and as you progress the programming updates\n          with new targets and appropriate routines. It keeps you progressing in the most optimal way possible and you will see\n          your physique and performance transform to that of a vigilante...\n          <Container paddingLeft={1}>\n            <Link to={Destination.About} label={'Tell me more'} />\n          </Container>\n        </Text>\n      </Center>\n      <RoutingButton to={Destination.GetStarted}>Get Started</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import React from 'react';\nimport { Box, HStack, Text, VStack } from 'native-base';\n\ninterface Cell {\n  content?: string | number | React.ReactNode;\n  fontWeight?: number | string;\n  textAlign?: string;\n  width?: string | number;\n  sideBorder?: boolean;\n  bottomBorder?: boolean;\n}\n\nexport const Table = ({ children }: { children: React.ReactNode }) => <VStack>{children}</VStack>;\n\nexport const TableHeader = ({ headings }: { headings: Cell[] }) => {\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'space-between'}\n      borderBottomWidth={1}\n      borderBottomColor={'secondary.100'}\n      marginBottom={1}\n    >\n      {headings.map((heading, id) => (\n        <TableCell\n          key={`${id}-${heading.content}`}\n          width={`${100 / headings.length}%`}\n          textAlign={heading.textAlign ?? 'center'}\n          fontWeight={500}\n          sideBorder={heading.sideBorder}\n          {...heading}\n        />\n      ))}\n    </HStack>\n  );\n};\n\nexport const TableCell = ({ width, textAlign, sideBorder, bottomBorder, content, fontWeight }: Cell) => {\n  return (\n    <>\n      {typeof content === 'object' ? (\n        <Box width={width}>{content}</Box>\n      ) : (\n        <Text\n          fontSize={'xs'}\n          fontWeight={fontWeight}\n          width={width}\n          // @ts-expect-error force text align string\n          textAlign={textAlign}\n          borderRightWidth={sideBorder ? 1 : 0}\n          borderBottomWidth={bottomBorder ? 1 : 0}\n          borderRightColor={'secondary.100'}\n        >\n          {content}\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport const TableRow = ({ children, values }: { children?: React.ReactNode; values?: Cell[] }) => {\n  return (\n    <HStack alignItems={'center'} justifyContent={'space-between'} marginBottom={1}>\n      {values?.map((item: Cell, id: number) => (\n        <TableCell key={`cell-${id}`} width={item.width ?? `${100 / values.length}%`} {...item} />\n      ))}\n      {children}\n    </HStack>\n  );\n};\n","export enum Goal {\n  Strength = 'Strength',\n  Size = 'Size',\n  Lean = 'Leanness',\n  Speed = 'Speed',\n}\n\nexport enum ExperienceLevel {\n  Beginner = 'Average Joe',\n  Novice = 'Novice',\n  Intermediate = 'Intermediate',\n  Advanced = 'Advanced',\n  Vigilante = 'Vigilante',\n}\n\nexport enum Gender {\n  Male = 'Male',\n  Female = 'Female',\n}\n\nexport enum UnitsType {\n  Metric = 'Metric (kg/cm)',\n  Imperial = 'Imperial (lbs/inches)',\n}\n\nexport enum ActivityLevel {\n  Sedentary = 'Lightly Active (sedentary job/under 10k steps per day)',\n  Active = 'Active (light moving job/over 10k steps per day)',\n  VeryActive = 'Very Active (physical job/over 20k steps per day)',\n}\n\nexport enum DietType {\n  Balanced = 'Balanced',\n  Keto = 'Keto',\n  Carnivore = 'Carnivore',\n  Pescatarian = 'Pescatarian',\n  Vegetarian = 'Vegetarian',\n  Vegan = 'Vegan',\n}\n\nexport enum WeekDay {\n  Monday = 'Monday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday',\n  Thursday = 'Thursday',\n  Friday = 'Friday',\n  Saturday = 'Saturday',\n  Sunday = 'Sunday',\n}\n","export enum ExerciseType {\n  Duration = 'Barbell',\n  Distance = 'Dumbbell',\n  Bodyweight = 'Bodyweight',\n  Machine = 'Machine',\n}\n\nexport type LiftAttempt = { weight: number; reps: number; targetReps?: number; fails?: number };\n\nexport type Lifts = {\n  [key in Exercise]?: LiftAttempt;\n};\n\nexport enum Exercise {\n  Bench = 'Bench Press',\n  InclineBench = 'Incline Press',\n  Press = 'Press',\n  CloseGripBench = 'Close Grip Bench Press',\n  Dips = 'Dips',\n  LateralRaises = 'Lateral Raises',\n\n  Deadlift = 'Deadlift',\n  RDL = 'Romanian Deadlift',\n  Squat = 'Squat',\n  Hyperextensions = 'Hyperextensions',\n\n  Curls = 'Curls',\n  InclineCurls = 'Incline Curls',\n  TricepExtensions = ' Tricep Extensions',\n\n  Row = 'Row',\n  DumbbellRow = 'Dumbbell Row',\n  Shrugs = 'Shrugs',\n\n  MultiLunge = 'Multi Directional Lunge',\n  ReverseLunge = 'Reverse Lunge',\n  WalkingLunges = 'Walking Lunges',\n  HipThrust = 'Hip Thrusts',\n  HipBand = 'Hip Bands Side Steps',\n\n  Facepull = 'Face pulls',\n  PullApart = 'Band Pull Aparts',\n  HighPulls = 'High Pulls',\n\n  Pullup = 'Pull Ups',\n  Chinup = 'Chin Ups',\n  Pushup = 'Push Ups',\n  Dip = 'Dips',\n\n  CableCrunches = 'Cable Crunches',\n  Situp = 'Weighted Sit Up',\n\n  PowerClean = 'Power Clean',\n  PowerSnatch = 'Power Snatch',\n\n  MileRun = 'Mile Run',\n  FiveKmRun = '5k Run',\n\n  DbCarry = 'Dumbbell Carry',\n  DbOverheadCarry = 'Dumbbell Ovehead Carry',\n}\n","import { HStack, Text } from 'native-base';\n\nexport const Paragraph = ({ children }: { children: React.ReactNode }) => <Text marginBottom={4}>{children}</Text>;\n\nexport const BulletPoint = ({ children }: { children: React.ReactNode }) => (\n  <HStack marginY={1} marginLeft={3}>\n    <Text marginRight={2}>{'\\u{29BF}'}</Text>\n    <Text>{children}</Text>\n  </HStack>\n);\n","import YoutubePlayer from 'react-native-youtube-iframe';\nimport { Video as ExpoVideo } from 'expo-av';\n\nexport const Video = ({ video, width = 320 }: { video: string; width?: number }) => {\n  const height = width * (9 / 16);\n  if (video.includes('http')) {\n    return (\n      <ExpoVideo\n        style={{\n          alignSelf: 'center',\n          width,\n          height,\n        }}\n        source={{\n          uri: video,\n        }}\n        useNativeControls\n      />\n    );\n  }\n\n  return <YoutubePlayer width={width} height={height} videoId={video} />;\n};\n","import { Text, HStack, Image, VStack } from 'native-base';\n\nexport const FitnessComponents = () => (\n  <VStack>\n    <HStack marginBottom={3} alignItems={'center'}>\n      <Image\n        marginRight={3}\n        width={50}\n        height={50}\n        resizeMode={'contain'}\n        alt={'strength'}\n        source={require('./strength-icon.png')}\n      />\n      <Text>\n        <Text fontSize={'xs'} bold>\n          Strength:{' '}\n        </Text>\n        <Text fontSize={'xs'}>\n          This is the “power” essential for vigilantes fighting crime! Without muscular strength, your body would be weak and\n          unable to lift or carry heavy objects. The way to increase strength is to train with heavy weights, working in the 3 - 6\n          and the 8 - 12 rep ranges. We measure and track your strength by calculating your bodyweight to weight lifted ratio and\n          one rep max (1RM).\n        </Text>\n      </Text>\n    </HStack>\n    <HStack marginBottom={3} alignItems={'center'}>\n      <Image\n        marginRight={3}\n        width={50}\n        height={50}\n        resizeMode={'contain'}\n        alt={'endurance'}\n        source={require('./cardio-icon.png')}\n      />\n      <Text>\n        <Text fontSize={'xs'} bold>\n          Endurance:{' '}\n        </Text>\n        <Text fontSize={'xs'}>\n          Endurance is critical for those long battles! It is the ability of your muscles and cardiovascular system to perform for\n          extended periods of time. The way to increase endurance is to train in high rep ranges and improve sustaining physical\n          exertion for extended periods of time. We measure and track your endurance through the number of push ups, pull ups and\n          squat jumps you can do, the distance you can carry heavy objects and your 5k run time.\n        </Text>\n      </Text>\n    </HStack>\n    <HStack marginBottom={3} alignItems={'center'}>\n      <Image marginRight={3} width={50} height={50} resizeMode={'contain'} alt={'speed'} source={require('./speed-icon.png')} />\n      <Text>\n        <Text fontSize={'xs'} bold>\n          Speed:{' '}\n        </Text>\n        <Text fontSize={'xs'}>\n          Can&apos;t let those villains get away! Speed is all about how fast you can move. We measure and track your speed by\n          practicing and testing your mile run time.\n        </Text>\n      </Text>\n    </HStack>\n  </VStack>\n);\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const ahtleanXRoutines: Program[] = [\n  {\n    id: 'AXFullBody',\n    name: 'AthleanX Perfect Total Body',\n    author: 'Jeff Cavaliere',\n    link: 'https://athleanx.com/articles/full-body-workout-plan',\n    video: 'R6gZoAzAhCg',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 8,\n    workouts: (level?: ExperienceLevel): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const mainRest = 2;\n      const secondarySets = Array(level === ExperienceLevel.Beginner ? 3 : 4);\n      const secondaryRest = 1;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Squat,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-squat.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-hip-thrust.mp4',\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-bench-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/weighted-chinup.mp4',\n              warmup: [\n                { percentage: 0, reps: 5 },\n                { percentage: 0, reps: 5 },\n              ],\n              sets: [...secondarySets].fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              video: '//athleanx.com/wp-content/uploads/2019/07/farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.5 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/banded-facepull.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-deadlift.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.ReverseLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/reverse-barbell-lunge.mp4',\n              sets: [...secondarySets].fill({ targetReps: 10 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-overhead-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-row.mp4',\n              warmup,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/dumbbell-overhead-farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.25 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.HipBand,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/hip-band-mini-ladder.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.PullApart,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/band-pull-aparts.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'AXPushPullLegs',\n  //   name: 'AthleanX Perfect Push Pull Legs',\n  //   author: 'Jeff Cavaliere',\n  //   link: 'https://athleanx.com/articles/full-body-workout-plan',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 6,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const ssRoutines: Program[] = [\n  {\n    id: 'StartingStrength',\n    author: 'Mark Rippetoe',\n    name: 'Starting Strength',\n    link: 'https://startingstrength.com/get-started/programs',\n    video: 'a9-a_8hC17M',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '37-wjE_c4NU',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              sets,\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'TexasMethod',\n    author: 'Mark Rippetoe',\n    name: 'The Texas Method',\n    link: 'https://startingstrength.com/article/the_texas_method',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 60, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 70, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const volumeSets: RoutineSet[] = [\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const progressionSets: RoutineSet[] = [{ targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '2ggG1M2gGes',\n              sets: [{ targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }],\n              rest,\n            },\n          ],\n        },\n        // @TODO think about how to deal with alternating exercises\n        {\n          name: 'Workout A2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerSnatch,\n              video: 'uyY_ySdN6OU',\n              sets: [\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n              ],\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const slRoutines: Program[] = [\n  {\n    id: 'StrongLifts',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Strong Lifts',\n    link: 'https://stronglifts.com/5x5/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          video: 'EP2g3Sj3qSw',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'ICF',\n    author: 'Jason Blaha',\n    name: 'Ice Cream Fitness 5x5',\n    video: 'oAuARgqS6aQ',\n    link: 'https://www.muscleandstrength.com/workouts/jason-blaha-ice-cream-fitness-5x5-novice-workout',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Size, Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 90,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 2;\n      const warmup = [\n        { weight: 20, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const secondaryRest = 1.5;\n      const secondarySets = [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'yS8yUgRMiy4',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              video: 'Io4Fq0SpMAY',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Curls,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'm_WPH1NYPxc',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              note: '10% ligther than Workout A',\n              ignoreForTracking: true,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'V8bDeB7UPFo',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.CloseGripBench,\n              video: '8hgpyLrdWXs',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              video: 'H2T3tSbI_iQ',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'Madcow',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Madcow 5x5',\n    link: 'https://stronglifts.com/madcow-5x5/',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 87.5, reps: 5, basis: 'fiveRepMax' },\n      ];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              note: 'Lighter than monday for recovery',\n              ignoreForTracking: true,\n              warmup: [\n                { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n              ],\n              sets: [\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ targetReps: 6 }, { targetReps: 6 }, { targetReps: 6 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curls,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const vigilanteRoutines: Program[] = [\n  {\n    id: 'VigilanteBeginner3Day',\n    name: 'Vigilante Training Beginners Full Body',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMARAP: true }];\n      const mainRest = 3;\n      const secondarySets = Array(3);\n      const secondaryRest = 1.5;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Curls,\n              sets: [...secondarySets].fill({ minReps: 8, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [...secondarySets].fill({ targetReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: [...secondarySets].fill({ targetReps: 50 }),\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: [...secondarySets].fill({ minReps: 12, maxReps: 15 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [...secondarySets].fill({ minReps: 8, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: [...secondarySets].fill({ targetReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: [...secondarySets].fill({ targetReps: 50 }),\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'VigilanteIntermediate3Day',\n    name: 'Vigilante Training Intermediate Full Body',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n        { percentage: 70, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5, AMRAP: true }];\n      const mainRest = 2;\n      const secondarySets = Array(4);\n      const secondaryRest = 1;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.InclineBench,\n              sets: [...mainSets, { percentage: 80, targetReps: 8, AMRAP: true, basis: 'fiveRepMax' }],\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [...secondarySets].fill({ minReps: 8, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Curls,\n              sets: [...secondarySets].fill({ minReps: 8, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: [...secondarySets].fill({ targetReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: [...secondarySets].fill({ targetReps: 50 }),\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: [...secondarySets].fill({ minReps: 12, maxReps: 15 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: [...mainSets, { percentage: 80, targetReps: 8, AMRAP: true, basis: 'fiveRepMax' }],\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: [...secondarySets].fill({ targetReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.HighPulls,\n              sets: [...secondarySets].fill({ targetReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: [...secondarySets].fill({ targetReps: 50 }),\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../constants';\nimport { Program } from './interfaces';\nimport { ahtleanXRoutines } from './routines/athleanx';\n// import { aWorkoutRoutines } from './routines/aworkoutroutine';\n// import { builtWithScienceRoutines } from './routines/builtwithschience';\n// import { greyskullRoutines } from './routines/greyskull';\n// import { gzclRoutines } from './routines/gzcl';\n// import { kinobodyRoutines } from './routines/kinobody';\n// import { leanGainsRoutines } from './routines/leangains';\n// import { oldSchoolRoutines } from './routines/oldschool';\n// import { otherRoutines } from './routines/other';\n// import { redditRoutines } from './routines/reddit';\nimport { ssRoutines } from './routines/startingstrength';\nimport { slRoutines } from './routines/stronglifts';\nimport { vigilanteRoutines } from './routines/vigilante';\n// import { wendlerRoutines } from './routines/wendler';\n\nexport const programs: Program[] = [\n  ...ssRoutines,\n  ...slRoutines,\n  ...ahtleanXRoutines,\n  // ...aWorkoutRoutines,\n  // ...builtWithScienceRoutines,\n  // ...greyskullRoutines,\n  // ...gzclRoutines,\n  // ...kinobodyRoutines,\n  // ...leanGainsRoutines,\n  // ...oldSchoolRoutines,\n  // ...otherRoutines,\n  // ...redditRoutines,\n  // ...wendlerRoutines,\n  ...vigilanteRoutines,\n].sort((a, b) => {\n  return a.name > b.name ? 1 : -1;\n});\n\nexport const getProgram = (id: string): Program => programs.find((program) => program.id === id)!;\n\nexport const getProgramRecommendations = ({\n  gender,\n  strengthLevel,\n  primaryGoal,\n  secondaryGoal,\n  maxDaysPerWeek,\n  maxWorkoutDuration,\n}: {\n  gender: Gender;\n  strengthLevel: ExperienceLevel;\n  speedLevel: ExperienceLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  maxDaysPerWeek: number;\n  maxWorkoutDuration: number;\n}): { suitablePrograms: Program[]; bestMatch: string } => {\n  const suitablePrograms = programs.filter((program) => {\n    const isLevelAppropriate = program.level.includes(strengthLevel);\n    const isGenderAppropriate = program.gender.includes(gender);\n    const meetsPrimaryGoal = program.goal.includes(primaryGoal);\n    const meetsSecondaryGoal = program.goal.includes(secondaryGoal);\n    const isSuitableSchedule = program.daysPerWeek <= maxDaysPerWeek && program.workoutDuration <= maxWorkoutDuration;\n    return isLevelAppropriate && isGenderAppropriate && meetsPrimaryGoal && meetsSecondaryGoal && isSuitableSchedule;\n  });\n  // @TODO\n  const bestMatch = 'VigilanteIntermediate3Day';\n\n  return { suitablePrograms, bestMatch };\n};\n","import { Center, Heading, HStack, Image, Text } from 'native-base';\n\nimport { BulletPoint, Paragraph } from '../../components/Content';\nimport { FitnessComponents } from '../../components/FitnessComponents';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { programs } from '../../domain/programs';\nimport { Destination, ExternalLink, RoutingButton } from '../../utils/routing';\n\nexport default function About() {\n  return (\n    <DefaultLayout showLogo>\n      <Paragraph>\n        The internet is polluted with good and bad training advice, it is overwhelming and hard to know how to get started and how\n        to advance in your fitness journey. This app fixes that, it matches your current level of strength and fitness, along with\n        your lifestyle and goals, to tried and tested training and nutrition protocols focused on the main components of physical\n        fitness:\n      </Paragraph>\n      <FitnessComponents />\n      <Paragraph>\n        The app has a database of the most popular stregnth and weight lifting programs available for free on the internet that\n        have been proven to work over and over again. These include:\n      </Paragraph>\n      {programs.map(({ id, name, link }) => (\n        <BulletPoint key={id}>\n          <ExternalLink to={link} text={name} />\n        </BulletPoint>\n      ))}\n      <Paragraph>\n        The app filters them down to your level, preferences and disponibility, and maps out a journey of progression with\n        appropriate conditioning and nutrition added, taking away all the guess work and giving years worth of training to follow.\n        It will set you short term goals for strength, endurance and speed, and as you progress the programming updates and sets\n        you new and more challenging targets. It keeps you progressing in the most optimal way possible and you will see your\n        performance and physique transform to that of a vigilante...\n      </Paragraph>\n      <Center>\n        <Image\n          width={'100%'}\n          height={185}\n          resizeMode={'contain'}\n          alt={'Welcome'}\n          source={require('../../assets/comics/comic1.png')}\n        />\n      </Center>\n      <Paragraph>\n        Everything is tailored to your goals and preferences to ensure it is enjoyable and sustainable with the aim of getting you\n        stronger, faster and leaner. Sustainability and consistency is the only recipe for success no matter the program you\n        follow.\n      </Paragraph>\n      <Heading size={'sm'}>Example 1</Heading>\n      <Paragraph>\n        As a complete beginner who is overweight (200lbs/~30% BF), has never lifted before and has a sedentary job/lifestyle.\n        Willing and able to workout at most 3 days a week for an hour and is happy keeping it simple with the main goal of being\n        strong and lean, would go through a multi phase programming that cosists of:\n      </Paragraph>\n      <BulletPoint>\n        An initial goal to deadlift and squat bodyweight, bench 1 plate (60kg/135lbs) and do assisted pull ups with 50% bodyweight\n        assist (all for 5 reps). To achieve this we follow the <Text bold>Greyskull LP</Text> routine. Nutrition would be focused\n        around <Text bold>an aggresive cut</Text> (~600 calorie deficit = 2200calories) with ample protein (at least 1g per pound\n        of lean bodyweight = 140g).\n      </BulletPoint>\n      <BulletPoint>\n        With the initial goals met the programming will update and set you new targets of Bench Pressing bodyweight, Overhead\n        pressing 70% of bodyweight, Squating 2 plates (100kg/225lbs) and Deadlifting 1.5x bodyweight, as well as doing unassissted\n        pull ups. The weights will deload and the workout routine will switch to{' '}\n        <Text bold>AthleanX&apos;s Perfect Total Body</Text>. This adds some more volume and improves work capacity and endurance.\n        Nutrition would stay the same unless you have not lost any weight in over 2 weeks, at which point an{' '}\n        <Text bold>additional 200 calorie deficit</Text> is applied.\n      </BulletPoint>\n      <BulletPoint>\n        With the second set of goals met, things will start to get a bit more challenging. The new targets are now to bench press\n        2 plates (100kg/225lbs), overhead press 1 plate (60kg/135lbs) and deadlift 3 plates (140kg/315lbs). If progress is still\n        strong on the AthleanX routine you will remain on it, once you start stalling the app will suggest a deload and switching\n        back to <Text bold>Greyskull LP</Text> in order to make use of double progression focusing on improving those rep maxes on\n        previously done weights for new strength gains. Nutrition <Text bold>moves to maintenance calories</Text> to aid meeting\n        the goals and a metabolic reset from being on a deficit for an extended period of time. You should experience a\n        recomposition effect over the coming weeks.\n      </BulletPoint>\n      <BulletPoint>\n        Moving into stronger intermediate territory, the programming will once again update setting you even more challenging\n        targets along the lines of Squatting 3 plates (140kg/315lbs), Overhead Pressing your bodyweight, Bench Pressin\n        (120kg/265lbs) and Deadlifting 4 plates (180kg/405lbs). To achieve these, programming may change to{' '}\n        <Text bold>Madcow&apos;s 5x5</Text> potentially followed by various 3-day <Text bold>Jim Wendler 5/3/1</Text> templates\n        with the accessory work being tailored your goals in terms of workout duration and weakness areas you want to work on.\n        Nutrition will depend on the new body fat %. You get to chose to get leaner with a moderate 400 calorie deficit or do a\n        lean bulk with a small surplus of 300 calories. The app will usually recommend a <Text bold>moderate cut</Text> if abs are\n        still not visible and one of your goals is leanness.\n      </BulletPoint>\n      <Paragraph>\n        In all phases, each workout would end with either a mile run or a random bodyweight endurance exercise (pushups, inverted\n        rows, jump squats or muscle ups) with a random aim (could be reps for time, reps within a certain time, pyramid reps or\n        reps every minute for 10 minutes). These will also have goals set and tracked such as mile run time, max push ups in a\n        set, etc.\n      </Paragraph>\n      <Paragraph>\n        <Center>\n          <HStack width={'100%'}>\n            <Image\n              width={'50%'}\n              height={185}\n              resizeMode={'contain'}\n              alt={'Welcome'}\n              source={require('../../assets/comics/comic2.png')}\n            />\n            <Image\n              width={'50%'}\n              height={185}\n              resizeMode={'contain'}\n              alt={'Welcome'}\n              source={require('../../assets/comics/comic3.jpeg')}\n            />\n          </HStack>\n        </Center>\n      </Paragraph>\n      <Heading size={'sm'}>Example 2</Heading>\n      <Paragraph>\n        As an individual in decent shape, who has been lifting for some time and can already squat and bench their bodyweight for\n        reps and can do pull ups, looking to train 5 or 6 days a week focusing on aesthetics would go through a multi phase\n        programming cosisting of:\n      </Paragraph>\n      <BulletPoint>\n        An initial goal to Bench Press 2 plates (100kg/225lbs), Overhead Press 1 plate (60kg/135lbs) and Deadlift 3 plates\n        (140kg/315lbs). To achieve this you follow <Text bold>PHUL: Power Hypertrophy Upper Lower</Text> working out 4 days a\n        week.\n      </BulletPoint>\n\n      <RoutingButton to={Destination.GetStarted}>Get Started</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { isDateWeekend } from '../../utils/calendar';\nimport { cmToInches, kgToLbs } from '../../utils/measurements';\nimport { ActivityLevel, Gender, Goal, UnitsType } from '../constants';\nimport { calculateBMI, calculateBMR, calculateMinimumProteinRequirement, calculateTDEE } from './calculators';\n\nconst AGGRESSIVE_CUT_DEFICIT = -600;\nconst CUT_DEFICIT = -400;\nconst BULK_SURPLUS = 300;\nconst MAX_CALORIES = 2600;\nconst UNDERWEIGHT_BMI = 18.5;\n\nexport enum NutritionType {\n  AggressiveCut = 'Aggressive Cut',\n  Cut = 'Cut',\n  Bulk = 'Lean Bulk',\n  Maintain = 'Maintain',\n}\n\nexport interface NutritionProtocol {\n  type: NutritionType;\n  note?: string;\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  cycleNutrition: boolean;\n  higherCaloriesOnWeekends: boolean;\n  targetCalories: {\n    energyExpenditureModifier: number;\n    trainingDay: number;\n    restDay: number;\n    weekend: number;\n    average: number;\n  };\n  targetProtein: number;\n}\n\nconst getNutritionTypeRecommendation = ({\n  gender,\n  bodyFat,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset,\n  bmi,\n  tdee,\n  currentCalories,\n}: {\n  gender: Gender;\n  bodyFat: number;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset: boolean;\n  bmi: number;\n  tdee: number;\n  currentCalories?: number;\n}): { type: NutritionType; reason?: string } => {\n  const largeDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to handle an aggressive deficit while still making gains in strength and muscle mass.';\n  const smallDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to make gains in strength and muscle while on a small deficit.';\n  const metabolicResetMessage =\n    'Given you have been dieting on low or unknown calories for some time without results, it is essential you eat at maintenance for 2-4 weeks.';\n  const lowBMIMessage = 'You are underweight for your height and should focus on adding muscle to your frame.';\n\n  if (bmi < UNDERWEIGHT_BMI && bodyFat > 10) {\n    return { type: NutritionType.Bulk, reason: lowBMIMessage };\n  }\n\n  if (needsMetabolicReset && (!currentCalories || (currentCalories && tdee - currentCalories > 500))) {\n    return { type: NutritionType.Maintain, reason: metabolicResetMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 20) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 30) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 15) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 20) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (primaryGoal === Goal.Lean) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (secondaryGoal === Goal.Lean && bodyFat >= 15) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (\n    primaryGoal === Goal.Size ||\n    secondaryGoal === Goal.Size ||\n    primaryGoal === Goal.Strength ||\n    secondaryGoal === Goal.Strength\n  ) {\n    return { type: NutritionType.Bulk };\n  }\n\n  return { type: NutritionType.Maintain };\n};\n\nconst getEnergyExpenditureModifier = (goal: NutritionType, preferAggressiveCut: boolean) => {\n  switch (goal) {\n    case NutritionType.AggressiveCut:\n    case NutritionType.Cut:\n      if (preferAggressiveCut) {\n        return AGGRESSIVE_CUT_DEFICIT;\n      }\n      return CUT_DEFICIT;\n    case NutritionType.Bulk:\n      return BULK_SURPLUS;\n    case NutritionType.Maintain:\n    default:\n      return 0;\n  }\n};\n\nconst getTargetCalories = ({\n  tdee,\n  goal,\n  cycleNutrition,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends,\n  preferAggressiveCut,\n}: {\n  tdee: number;\n  goal: NutritionType;\n  cycleNutrition: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends: boolean;\n  preferAggressiveCut: boolean;\n}): { trainingDay: number; restDay: number; weekend: number; average: number; energyExpenditureModifier: number } => {\n  const isCut = goal === NutritionType.Cut || goal === NutritionType.AggressiveCut;\n\n  const modifier = getEnergyExpenditureModifier(goal, preferAggressiveCut);\n  const average = tdee + modifier;\n\n  let workoutdaysTarget = average;\n  let restdaysTarget = average;\n  let weekendTarget = average;\n\n  if (cycleNutrition) {\n    workoutdaysTarget = average + Math.abs(modifier);\n    restdaysTarget = average - Math.abs((modifier * numberOfWorkoutDays!) / (7 - numberOfWorkoutDays!));\n    weekendTarget = restdaysTarget;\n  }\n\n  if (higherCaloriesOnWeekends) {\n    weekendTarget = weekendTarget + 500;\n    workoutdaysTarget = workoutdaysTarget - 200;\n    restdaysTarget = restdaysTarget - 200;\n  }\n\n  if (isCut && workoutdaysTarget > MAX_CALORIES) {\n    workoutdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && restdaysTarget > MAX_CALORIES) {\n    restdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && weekendTarget > MAX_CALORIES) {\n    weekendTarget = MAX_CALORIES;\n  }\n\n  return {\n    trainingDay: workoutdaysTarget,\n    restDay: restdaysTarget,\n    weekend: weekendTarget,\n    average,\n    energyExpenditureModifier: modifier,\n  };\n};\n\nexport const getNutritionRecommendation = ({\n  gender,\n  weight,\n  height,\n  age,\n  unitsType,\n  bodyFat,\n  activityLevel,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset = false,\n  currentCalories,\n  cycleNutrition = false,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends = false,\n  preferAggressiveCut = false,\n}: {\n  gender: Gender;\n  weight: number;\n  height: number;\n  age: number;\n  unitsType: UnitsType;\n  bodyFat: number;\n  activityLevel: ActivityLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset?: boolean;\n  currentCalories?: number;\n  cycleNutrition?: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends?: boolean;\n  preferAggressiveCut?: boolean;\n}): NutritionProtocol => {\n  const calcWeight = unitsType === UnitsType.Metric ? kgToLbs(weight) : weight;\n  const calcHeight = unitsType === UnitsType.Metric ? cmToInches(height) : height;\n\n  const bmi = calculateBMI(calcWeight, calcHeight);\n  const bmr = calculateBMR({ heightInInches: calcHeight, weightInLbs: calcWeight, gender, bodyFat, age });\n  const tdee = calculateTDEE(activityLevel, bmr);\n  const targetProtein = calculateMinimumProteinRequirement(calcWeight, bodyFat);\n\n  const { type, reason } = getNutritionTypeRecommendation({\n    gender,\n    bodyFat,\n    primaryGoal,\n    secondaryGoal,\n    needsMetabolicReset,\n    bmi,\n    tdee,\n    currentCalories,\n  });\n\n  const targetCalories = getTargetCalories({\n    tdee,\n    goal: type,\n    cycleNutrition: cycleNutrition ?? false,\n    numberOfWorkoutDays,\n    higherCaloriesOnWeekends,\n    preferAggressiveCut,\n  });\n\n  return {\n    type,\n    note: reason,\n    bmi,\n    bmr,\n    tdee,\n    targetCalories,\n    targetProtein,\n    cycleNutrition,\n    higherCaloriesOnWeekends,\n  };\n};\n\nexport const getTodaysCalories = (recommendedNutrition: NutritionProtocol, isWorkoutDay: boolean) => {\n  const { targetCalories } = recommendedNutrition;\n  const isWeekend = isDateWeekend();\n  return (\n    (isWeekend ? targetCalories.weekend : isWorkoutDay ? targetCalories.trainingDay : targetCalories.restDay) ??\n    targetCalories.average\n  );\n};\n","import { WeekDay } from '../domain/constants';\n\n// Hard coded week day array as internally represented by javascript, sunday - saturday\nconst DAYS = [\n  WeekDay.Sunday,\n  WeekDay.Monday,\n  WeekDay.Tuesday,\n  WeekDay.Wednesday,\n  WeekDay.Thursday,\n  WeekDay.Friday,\n  WeekDay.Saturday,\n];\n\nexport const getDateOfWeekday = (dayName: WeekDay, date = new Date(), allowPast = true): Date => {\n  const now = date.getDay();\n  // The index for the day you want\n  const day = DAYS.findIndex((item: string) => dayName.toLowerCase() === item.toLowerCase());\n  // diff between desired day of week and now\n  let diff = day - now;\n  diff = diff < 0 && !allowPast ? diff + 7 : diff;\n  // Get the timestamp for the desired day, negative if it has already passed\n  const nextDayTimestamp = date.getTime() + 1000 * 60 * 60 * 24 * diff;\n\n  return new Date(nextDayTimestamp);\n};\n\nexport const addDays = (date: Date, days: number) => {\n  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n};\n\nexport const isDateWeekend = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 6 || dayOfWeek === 0; // 6 = Saturday, 0 = Sunday\n};\n\nexport const isDateConsecutiveDay = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 4 || dayOfWeek === 5; // 4 = Thursday, 5 = Friday\n};\n\nconst isDateInPast = (date: Date) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return date.getTime() < today.getTime();\n};\n\nexport const convertScheduleToWeekdays = (schedule: number[], weekStart: WeekDay): WeekDay[] => {\n  let map: { found: boolean; parts: WeekDay[][] } = { found: false, parts: [[], []] };\n  map = DAYS.reduce((acc, current) => {\n    if (current === weekStart) acc.found = true;\n    acc.found ? acc.parts[1].push(current) : acc.parts[0].push(current);\n    return acc;\n  }, map);\n\n  const week = [...map.parts[1], ...map.parts[0]];\n  return schedule.map((day) => week[day]);\n};\n\nexport const getNextScheduledWeekday = (weeklySchedule: WeekDay[], previousWorkoutDate: Date): WeekDay => {\n  const previousWorkoutDay = DAYS[previousWorkoutDate.getDay()];\n  const previousWorkoutDayIndex = weeklySchedule.findIndex(\n    (item: string) => previousWorkoutDay.toLowerCase() === item.toLowerCase()\n  );\n  const nextWorkoutIndex = previousWorkoutDayIndex + 1 > weeklySchedule.length - 1 ? 0 : previousWorkoutDayIndex + 1;\n  return weeklySchedule[nextWorkoutIndex];\n};\n\nexport const getNextWorkoutDay = (weeklySchedule: number[], weekStart: WeekDay, previousWorkoutDate?: Date): Date => {\n  if (!previousWorkoutDate) {\n    let proposedDate = getDateOfWeekday(weekStart);\n    while (isDateInPast(proposedDate)) {\n      proposedDate = getNextWorkoutDay(weeklySchedule, weekStart, proposedDate);\n    }\n    return proposedDate;\n  }\n\n  const schedule = convertScheduleToWeekdays(weeklySchedule, weekStart);\n  const scheduleDay = getNextScheduledWeekday(schedule, previousWorkoutDate);\n  return getDateOfWeekday(scheduleDay, previousWorkoutDate, false);\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const kgToLbs = (kg: number): number => (kg *= 2.2);\n\nexport const lbsToKg = (lbs: number): number => (lbs /= 2.2);\n\nexport const cmToInches = (cms: number): number => Math.round(cms * 0.393701);\n\nexport const feetToCms = (feet: number): number => Math.round(feet * 30.48);\n\nexport const feetToInches = (feet: number): number => feet * 12;\n\nexport const inchesToFeet = (inches: number): number => inches / 12;\n\nexport const formatDecimalMins = (time: number): string => {\n  const min = Math.floor(time);\n  const sec = Math.floor((time * 60) % 60);\n  return (min < 10 ? '0' : '') + min + ':' + (sec < 10 ? '0' : '') + sec; \n};\n\nexport const getWeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'lbs' : 'kg';\n};\n\nexport const getHeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'feet' : 'cm';\n};\n\nexport const getCircumferenceLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'inches' : 'cm';\n};\n","import { ActivityLevel, Gender } from '../constants';\n\ninterface BmrArgs {\n  weightInLbs: number;\n  heightInInches: number;\n  age: number;\n  gender: Gender;\n  bodyFat: number;\n}\n\nconst bmrFormulas: { [key: string]: (args: BmrArgs) => number } = {\n  miffinStJeor: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age - 161;\n    }\n\n    return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age + 5;\n  },\n  harrisBenedict: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 655.1 + 4.35 * weightInLbs + 4.7 * heightInInches - 4.7 * age;\n    }\n\n    return 66.47 + 6.24 * weightInLbs + 12.7 * heightInInches - 6.755 * age;\n  },\n  katchMcArdle: ({ bodyFat, weightInLbs }: BmrArgs) => {\n    const leanMass = ((weightInLbs / 2.2) * (100 - bodyFat)) / 100;\n    return 370 + 21.6 * leanMass;\n  },\n};\n\nexport const calculateBMR = (args: BmrArgs, formula?: keyof typeof bmrFormulas): number => {\n  if (formula) {\n    return Math.round(bmrFormulas[formula](args));\n  }\n\n  const acc = Object.keys(bmrFormulas).reduce((acc, current) => {\n    return acc + bmrFormulas[current](args);\n  }, 0);\n\n  return Math.round(acc / Object.keys(bmrFormulas).length);\n};\n\nexport const calculateTDEE = (activityLevel: ActivityLevel, bmr: number): number => {\n  let tdee;\n  switch (activityLevel) {\n    case ActivityLevel.Active:\n      tdee = bmr * 1.55;\n      break;\n    case ActivityLevel.VeryActive:\n      tdee = bmr * 1.725;\n      break;\n    case ActivityLevel.Sedentary:\n    default:\n      tdee = bmr * 1.375;\n  }\n\n  return Math.floor(tdee / 10) * 10;\n};\n\nexport const calculateMinimumProteinRequirement = (bodyWeightInLbs: number, bodyFat: number): number => {\n  const grams = bodyWeightInLbs - bodyWeightInLbs * (bodyFat / 100);\n  return Math.round(grams / 5) * 5;\n};\n\nexport const calculateBMI = (weightInLbs: number, heightInInches: number) => {\n  const bmi = (weightInLbs / heightInInches ** 2) * 703;\n  return Math.round(bmi * 10) / 10;\n};\n","import { ExperienceLevel, Gender } from '../constants';\n\nexport interface SpeedMetrics {\n  mileRun: number;\n  fiveKmRun: number;\n}\n\nconst speedStandards: {\n  [key in Gender]: {\n    [key in ExperienceLevel]: SpeedMetrics;\n  };\n} = {\n  [Gender.Male]: {\n    [ExperienceLevel.Beginner]: { mileRun: 9.5, fiveKmRun: 31.5 },\n    [ExperienceLevel.Novice]: { mileRun: 7.75, fiveKmRun: 26.33 },\n    [ExperienceLevel.Intermediate]: { mileRun: 6.5, fiveKmRun: 22.5 },\n    [ExperienceLevel.Advanced]: { mileRun: 5.75, fiveKmRun: 19.75 },\n    [ExperienceLevel.Vigilante]: { mileRun: 5.15, fiveKmRun: 17.75 },\n  },\n  [Gender.Female]: {\n    [ExperienceLevel.Beginner]: { mileRun: 10.75, fiveKmRun: 35.5 },\n    [ExperienceLevel.Novice]: { mileRun: 9, fiveKmRun: 30 },\n    [ExperienceLevel.Intermediate]: { mileRun: 7.75, fiveKmRun: 26.15 },\n    [ExperienceLevel.Advanced]: { mileRun: 6.8, fiveKmRun: 23 },\n    [ExperienceLevel.Vigilante]: { mileRun: 6.15, fiveKmRun: 20.75 },\n  },\n};\n\nexport const getSpeedStandards = (gender: Gender): { [key in ExperienceLevel]?: SpeedMetrics } => {\n  return speedStandards[gender];\n};\n\nexport const getSpeedLevel = (gender: Gender, mileRunTime: number, fiveKmRun: number) => {\n  const runStandards = getSpeedStandards(gender);\n  return Object.keys(runStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n    const levelStandards = runStandards[<ExperienceLevel>current]!;\n\n    const meetsMileRunStandard = mileRunTime <= levelStandards.mileRun;\n    const meetsFiveKmStandard = fiveKmRun <= levelStandards.fiveKmRun;\n\n    if (meetsMileRunStandard && meetsFiveKmStandard) {\n      return <ExperienceLevel>current;\n    }\n\n    return acc;\n  }, ExperienceLevel.Beginner);\n};\n","import { lbsToKg } from '../../utils/measurements';\nimport { ExperienceLevel, Gender, UnitsType } from '../constants';\nimport { Exercise } from '../exercises';\n\nexport interface StrengthMetrics {\n  oneRepMax?: number;\n  threeRepMax?: number;\n  fiveRepMax?: number;\n  eightRepMax?: number;\n  tenRepMax?: number;\n  twelveRepMax?: number;\n  fithteenRepMax?: number;\n  twentyRepMax?: number;\n  ratio?: number;\n  reps?: number;\n}\n\nexport type StrengthStandards = {\n  [key in Exercise]?: StrengthMetrics;\n};\n\nconst strengthStandards: {\n  [key in Gender]: {\n    [key in Exercise]?: {\n      [key in ExperienceLevel]: StrengthMetrics;\n    };\n  };\n} = {\n  [Gender.Male]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Novice]: { ratio: 1.25, oneRepMax: 93 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.5, oneRepMax: 130 },\n      [ExperienceLevel.Advanced]: { ratio: 2.25, oneRepMax: 173 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.75, oneRepMax: 219 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 1, oneRepMax: 78 },\n      [ExperienceLevel.Novice]: { ratio: 1.5, oneRepMax: 112 },\n      [ExperienceLevel.Intermediate]: { ratio: 2, oneRepMax: 152 },\n      [ExperienceLevel.Advanced]: { ratio: 2.5, oneRepMax: 200 },\n      [ExperienceLevel.Vigilante]: { ratio: 3, oneRepMax: 250 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 47 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 70 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 98 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 132 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 169 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 44 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 89 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 118 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 149 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.4, oneRepMax: 31 },\n      [ExperienceLevel.Novice]: { ratio: 0.55, oneRepMax: 46 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.8, oneRepMax: 64 },\n      [ExperienceLevel.Advanced]: { ratio: 1.05, oneRepMax: 86 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.35, oneRepMax: 109 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 41 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 85 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 115 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 147 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -13 },\n      [ExperienceLevel.Novice]: { reps: 5, oneRepMax: +8 },\n      [ExperienceLevel.Intermediate]: { reps: 15, oneRepMax: +34 },\n      [ExperienceLevel.Advanced]: { reps: 25, oneRepMax: +63 },\n      [ExperienceLevel.Vigilante]: { reps: 37, oneRepMax: +93 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -8 },\n      [ExperienceLevel.Novice]: { reps: 8, oneRepMax: +18 },\n      [ExperienceLevel.Intermediate]: { reps: 20, oneRepMax: +50 },\n      [ExperienceLevel.Advanced]: { reps: 34, oneRepMax: +86 },\n      [ExperienceLevel.Vigilante]: { reps: 49, oneRepMax: +125 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 18 },\n      [ExperienceLevel.Intermediate]: { reps: 41 },\n      [ExperienceLevel.Advanced]: { reps: 68 },\n      [ExperienceLevel.Vigilante]: { reps: 99 },\n    },\n  },\n  [Gender.Female]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 30 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 73 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 103 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 136 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 38 },\n      [ExperienceLevel.Novice]: { ratio: 1, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 87 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 120 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.5, oneRepMax: 157 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.5, oneRepMax: 31 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.75, oneRepMax: 51 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 74 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.5, oneRepMax: 101 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 13 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 44 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 67 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.4, oneRepMax: 93 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Novice]: { ratio: 0.35, oneRepMax: 23 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.55, oneRepMax: 34 },\n      [ExperienceLevel.Advanced]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Vigilante]: { ratio: 1, oneRepMax: 64 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 15 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 41 },\n      [ExperienceLevel.Advanced]: { ratio: 0.9, oneRepMax: 59 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.2, oneRepMax: 79 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -22 },\n      [ExperienceLevel.Novice]: { reps: 3, oneRepMax: -8 },\n      [ExperienceLevel.Intermediate]: { reps: 6, oneRepMax: 10 },\n      [ExperienceLevel.Advanced]: { reps: 15, oneRepMax: 30 },\n      [ExperienceLevel.Vigilante]: { reps: 26, oneRepMax: 51 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -20 },\n      [ExperienceLevel.Novice]: { reps: 1, oneRepMax: -5 },\n      [ExperienceLevel.Intermediate]: { reps: 10, oneRepMax: +19 },\n      [ExperienceLevel.Advanced]: { reps: 22, oneRepMax: +45 },\n      [ExperienceLevel.Vigilante]: { reps: 35, oneRepMax: +72 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 5 },\n      [ExperienceLevel.Intermediate]: { reps: 19 },\n      [ExperienceLevel.Advanced]: { reps: 37 },\n      [ExperienceLevel.Vigilante]: { reps: 56 },\n    },\n  },\n};\n\nexport const getLiftStandards = (gender: Gender, exercise: Exercise): { [key in ExperienceLevel]?: StrengthMetrics } => {\n  const genderStandards = strengthStandards[gender];\n  const liftStandards = genderStandards[exercise]!;\n  return liftStandards;\n};\n\nexport const getLiftLevel = (\n  gender: Gender,\n  lift: Exercise,\n  { oneRepMax, ratio, reps }: StrengthMetrics,\n  unitsType = UnitsType.Metric\n): ExperienceLevel => {\n  const liftStandards = getLiftStandards(gender, lift);\n  return (\n    liftStandards &&\n    Object.keys(liftStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n      const levelStandards = liftStandards[<ExperienceLevel>current]!;\n\n      const oneRepMaxForComparison = oneRepMax && unitsType === UnitsType.Metric ? oneRepMax : lbsToKg(oneRepMax!);\n      const meetsOneRepMaxBasedStandard = levelStandards.oneRepMax && oneRepMaxForComparison >= levelStandards.oneRepMax;\n      const meetsRatioBasedStandard = ratio && levelStandards.ratio && ratio >= levelStandards.ratio;\n\n      const meetsWeightBasedStandard = meetsRatioBasedStandard || meetsOneRepMaxBasedStandard;\n      const meetsRepBasedStandard = reps && levelStandards.reps && reps >= levelStandards.reps;\n\n      if (meetsWeightBasedStandard || meetsRepBasedStandard) {\n        return <ExperienceLevel>current;\n      }\n\n      return acc;\n    }, ExperienceLevel.Beginner)\n  );\n};\n\nexport const getStrengthLevel = (gender: Gender, everLifted: boolean, strengthStandards: StrengthStandards): ExperienceLevel => {\n  if (!everLifted) {\n    return ExperienceLevel.Beginner;\n  }\n\n  const level = Object.keys(strengthStandards).reduce<ExperienceLevel | undefined>((accLevel, lift) => {\n    const liftStandards = strengthStandards[lift as keyof StrengthStandards]!;\n    const liftLevel = getLiftLevel(Gender[gender], lift as Exercise, {\n      oneRepMax: liftStandards.oneRepMax,\n      ratio: liftStandards.ratio,\n      reps: liftStandards.reps,\n    });\n    const isLowerStandard =\n      accLevel && Object.values(ExperienceLevel).indexOf(liftLevel) < Object.values(ExperienceLevel).indexOf(accLevel);\n\n    if (liftLevel && (!accLevel || isLowerStandard)) {\n      return liftLevel;\n    }\n\n    return accLevel;\n  }, undefined);\n\n  return level ?? ExperienceLevel.Beginner;\n};\n","import { Lifts } from '../exercises';\nimport { StrengthMetrics, StrengthStandards } from '../standards';\n\nconst formulas: { [key: string]: (weight: number, reps: number) => number } = {\n  epley: (weight, reps) => weight * (1 + reps / 30),\n  brzycki: (weight, reps) => weight * (36 / (37 - reps)),\n  oconner: (weight, reps) => weight * (1 + 0.025 * reps),\n  lombardi: (weight, reps) => weight * reps ** 0.1,\n  wathan: (weight, reps) => (weight * 100) / (48.8 + 53.8 * Math.exp(-1 * (reps * 0.075))),\n  mayhem: (weight, reps) => (weight * 100) / (52.2 + 41.9 * Math.exp(-1 * (reps * 0.055))),\n  lander: (weight, reps) => (weight * 100) / (101.3 - 2.67123 * reps),\n};\n\nexport const calculate1RepMax = (weight: number, reps: number, formula?: keyof typeof formulas): number => {\n  if (reps == 0 || weight == 0) {\n    return 0;\n  }\n\n  if (reps == 1) {\n    return weight;\n  }\n\n  if (formula) {\n    return formulas[formula](weight, reps);\n  }\n\n  const acc = Object.keys(formulas).reduce((acc, current) => {\n    return acc + formulas[current](weight, reps);\n  }, 0);\n\n  return Math.floor(acc / Object.keys(formulas).length);\n};\n\nconst calculatRepMax = (oneRepMax: number, multiplier: number) => {\n  if (oneRepMax < 0) {\n    return Math.floor((Math.abs(oneRepMax) * (1 - multiplier) + Math.abs(oneRepMax)) * -1);\n  }\n\n  return Math.floor(oneRepMax * multiplier);\n};\n\nexport const calculateThreeRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.93);\n\nexport const calculateFiveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.88);\n\nexport const calculateEightRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.8);\n\nexport const calculateTenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.74);\n\nexport const calculateTwelveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.7);\n\nexport const calculateFithteenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.66);\n\nexport const calculateTwentyRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.59);\n\nexport const calculateRepMaxes = (weight: number, reps: number, formula?: keyof typeof formulas): StrengthMetrics => {\n  const oneRepMax = calculate1RepMax(weight, reps, formula);\n  return {\n    oneRepMax,\n    threeRepMax: calculateThreeRepMax(oneRepMax),\n    fiveRepMax: calculateFiveRepMax(oneRepMax),\n    eightRepMax: calculateEightRepMax(oneRepMax),\n    tenRepMax: calculateTenRepMax(oneRepMax),\n    twelveRepMax: calculateTwelveRepMax(oneRepMax),\n    fithteenRepMax: calculateFithteenRepMax(oneRepMax),\n    twentyRepMax: calculateTwentyRepMax(oneRepMax),\n  };\n};\n\nexport const calculateStrengthStandards = (weight: number, lifts: Lifts): StrengthStandards =>\n  Object.keys(lifts).reduce((acc, key: string) => {\n    const lift = lifts[key as keyof Lifts]!;\n    const repMaxes = calculateRepMaxes(lift.weight, lift.reps);\n    return {\n      ...acc,\n      [key]: {\n        ...repMaxes,\n        ratio: Math.round((repMaxes.oneRepMax! / weight) * 100) / 100,\n      },\n    };\n  }, {});\n","import { useMemo } from 'react';\nimport { useStoredReducer } from 'react-native-use-stored-state';\n\nimport { ActivityLevel, DietType, Gender, Goal, UnitsType, WeekDay } from '../constants';\nimport { Exercise, Lifts } from '../exercises';\nimport { getNutritionRecommendation, NutritionType } from '../nutrition';\nimport { getProgramRecommendations } from '../programs';\nimport { getSpeedLevel, getStrengthLevel } from '../standards';\nimport { calculateStrengthStandards } from '../standards';\nimport { getNextLiftTargets, getNextSpeedTargets } from './targets';\n\nexport interface TraineeStats {\n  gender: keyof typeof Gender;\n  age: number;\n  weight: number;\n  height: number;\n  waist: number;\n  activityLevel: keyof typeof ActivityLevel;\n  bodyFat: number;\n  everLifted: boolean;\n  currentLifts: Lifts;\n  mileRun: number;\n  fiveKmRun: number;\n  pushUps: number;\n  pullUps: number;\n  dips: number;\n  needsMetabolicReset: boolean;\n  currentCalories: number;\n  dietType: keyof typeof DietType;\n}\n\nexport interface TraineePreferences {\n  unitsType: keyof typeof UnitsType;\n  daysPerWeek: number;\n  workoutDuration: number;\n  primaryGoal: keyof typeof Goal;\n  secondaryGoal: keyof typeof Goal;\n  weekStart: keyof typeof WeekDay;\n  workoutDays: Array<keyof typeof WeekDay>;\n  cycleNutrition: boolean;\n  higherCaloriesOnWeekends: boolean;\n  preferAggressiveCut: boolean;\n  cycleProgramsOften: boolean;\n  minimalLegs: boolean;\n  barbellIncrement: number;\n  barbellDecrement: number;\n  dumbbellIncrement: number;\n  dumbbellDecrement: number;\n}\n\nconst defaultStats = <TraineeStats>{\n  gender: 'Male',\n  age: 38,\n  height: 176,\n  weight: 75,\n  bodyFat: 20,\n  waist: 80,\n  activityLevel: 'Sedentary',\n  dietType: 'Balanced',\n  currentLifts: {\n    [Exercise.Squat]: {},\n    [Exercise.Deadlift]: {},\n    [Exercise.Bench]: {},\n    [Exercise.Press]: {},\n    [Exercise.Row]: {},\n  },\n};\n\nconst defaultPreferences = <TraineePreferences>{\n  unitsType: 'Metric',\n  daysPerWeek: 3,\n  workoutDuration: 60,\n  primaryGoal: 'Lean',\n  secondaryGoal: 'Strength',\n  weekStart: 'Monday',\n  barbellIncrement: 2.5,\n  barbellDecrement: 10,\n  dumbbellIncrement: 2,\n  dumbbellDecrement: 10,\n};\n\nexport type TraineeStatsAction = keyof TraineeStats;\n\nexport const traineeStatsReducer = (stats: TraineeStats, action: { type: TraineeStatsAction; payload: any }) => {\n  const { type, payload } = action;\n  const newStats = { ...stats };\n\n  switch (type) {\n    default:\n      newStats[type] = payload;\n      return newStats;\n  }\n};\n\nexport type TraineePreferencesAction = keyof TraineePreferences;\n\nexport const traineePreferencesReducer = (\n  preferences: TraineePreferences,\n  action: { type: TraineePreferencesAction; payload: any }\n) => {\n  const { type, payload } = action;\n  const newPrefs = { ...preferences };\n\n  switch (type) {\n    default:\n      newPrefs[type] = payload;\n      return newPrefs;\n  }\n};\n\nexport const useTrainee = () => {\n  const [stats, updateStats, statsLoaded, unsetStats] = useStoredReducer<TraineeStats, TraineeStatsAction>(\n    'TRAINEE_STATS_1.0.0',\n    traineeStatsReducer,\n    defaultStats\n  );\n\n  const [preferences, updatePreferences, preferencesLoaded, unsetPreferences] = useStoredReducer<\n    TraineePreferences,\n    TraineePreferencesAction\n  >('TRAINEE_PREFS_1.0.1', traineePreferencesReducer, defaultPreferences);\n\n  const setStat = <K extends keyof TraineeStats>(stat: K, value: TraineeStats[K]) => {\n    updateStats({ type: stat, payload: value });\n  };\n\n  const setPreference = <K extends keyof TraineePreferences>(preference: K, value: TraineePreferences[K]) => {\n    updatePreferences({ type: preference, payload: value });\n  };\n\n  const resetTrainee = () => {\n    unsetPreferences();\n    unsetStats();\n  };\n\n  const strengthStandards = useMemo(() => stats && calculateStrengthStandards(stats.weight, stats.currentLifts), [stats]);\n\n  const strengthLevel = useMemo(\n    () => stats && strengthStandards && getStrengthLevel(Gender[stats.gender], stats.everLifted, strengthStandards),\n    [stats, strengthStandards]\n  );\n\n  const speedLevel = useMemo(() => stats && getSpeedLevel(Gender[stats.gender], stats.mileRun, stats.fiveKmRun), [stats]);\n\n  const recommendedPrograms = useMemo(\n    () =>\n      stats &&\n      preferences &&\n      getProgramRecommendations({\n        gender: Gender[stats.gender],\n        strengthLevel: strengthLevel!,\n        primaryGoal: Goal[preferences.primaryGoal],\n        secondaryGoal: Goal[preferences.secondaryGoal],\n        maxDaysPerWeek: preferences.daysPerWeek,\n        maxWorkoutDuration: preferences.workoutDuration,\n        speedLevel: speedLevel!,\n      }),\n    [stats, preferences, speedLevel, strengthLevel]\n  );\n\n  const recommendedNutrition = useMemo(\n    () =>\n      stats &&\n      preferences &&\n      getNutritionRecommendation({\n        gender: Gender[stats.gender],\n        weight: stats.weight,\n        height: stats.height,\n        age: stats.age,\n        unitsType: UnitsType[preferences.unitsType],\n        bodyFat: stats.bodyFat,\n        activityLevel: ActivityLevel[stats.activityLevel],\n        primaryGoal: Goal[preferences.primaryGoal],\n        secondaryGoal: Goal[preferences.secondaryGoal],\n        needsMetabolicReset: stats.needsMetabolicReset,\n        currentCalories: stats.currentCalories,\n        higherCaloriesOnWeekends: preferences.higherCaloriesOnWeekends,\n        cycleNutrition: preferences.cycleNutrition,\n        numberOfWorkoutDays: preferences.daysPerWeek, // @TODO should be the selected program\n        preferAggressiveCut: preferences.preferAggressiveCut,\n      }),\n    [stats, preferences]\n  );\n\n  const speedTargets = useMemo(\n    () => stats && getNextSpeedTargets(Gender[stats.gender], { mileRun: stats.mileRun, fiveKmRun: stats.fiveKmRun }),\n    [stats]\n  );\n\n  const liftTargets = useMemo(\n    () => stats && strengthStandards && getNextLiftTargets(Gender[stats.gender], strengthStandards, stats.weight),\n    [stats, strengthStandards]\n  );\n\n  // const bodyweightTargets = useMemo(() => {}, [stats]);\n\n  const bodyFatTarget =\n    stats &&\n    stats.bodyFat > 10 &&\n    recommendedNutrition &&\n    [NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type)\n      ? stats.bodyFat - 5\n      : undefined;\n\n  return {\n    traineeLoaded: statsLoaded && preferencesLoaded,\n    stats: stats ?? defaultStats,\n    setStat,\n    preferences: preferences ?? defaultPreferences,\n    setPreference,\n    resetTrainee,\n    strengthStandards,\n    strengthLevel,\n    speedLevel,\n    recommendedNutrition,\n    recommendedPrograms,\n    speedTargets,\n    liftTargets,\n    bodyFatTarget,\n  };\n};;;\n","import { ExperienceLevel, Gender } from '../constants';\nimport { Exercise } from '../exercises';\nimport { calculateFiveRepMax, getLiftStandards, getSpeedStandards, SpeedMetrics, StrengthStandards } from '../standards';\n\nexport const getNextSpeedTargets = (gender: Gender, speedMetrics: SpeedMetrics): SpeedMetrics => {\n  const standards = getSpeedStandards(gender);\n  const mileRun = speedMetrics.mileRun ? speedMetrics.mileRun - 0.5 : standards[ExperienceLevel.Beginner]!.mileRun;\n  const fiveKmRun = speedMetrics.fiveKmRun ? speedMetrics.fiveKmRun - 1.5 : standards[ExperienceLevel.Beginner]!.fiveKmRun;\n\n  return { mileRun, fiveKmRun };\n};\n\nexport const getNextLiftTargets = (gender: Gender, lifterStandards: StrengthStandards, weight: number): StrengthStandards => {\n  const getLiftTarget = (exercise: Exercise) => {\n    const standards = getLiftStandards(gender, exercise);\n    const currentLift = lifterStandards[exercise];\n\n    if (!currentLift) {\n      const levelStandard = standards[ExperienceLevel.Beginner]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (levelRatio < levelOneRepMax) {\n        return { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n      } else {\n        return { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n      }\n    }\n\n    let target = { oneRepMax: currentLift.oneRepMax! + 10, fiveRepMax: calculateFiveRepMax(currentLift.oneRepMax! + 10) };\n\n    const levels = Object.keys(standards);\n    for (const level of levels) {\n      const levelStandard = standards[level as keyof typeof standards]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (\n        levelOneRepMax < levelRatio &&\n        levelOneRepMax > currentLift.oneRepMax! &&\n        levelOneRepMax - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n        break;\n      } else if (\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n        break;\n      }\n    }\n\n    return target;\n  };\n\n  return {\n    [Exercise.Bench]: getLiftTarget(Exercise.Bench),\n    [Exercise.Squat]: getLiftTarget(Exercise.Squat),\n    [Exercise.Deadlift]: getLiftTarget(Exercise.Deadlift),\n    [Exercise.Press]: getLiftTarget(Exercise.Press),\n    [Exercise.Row]: getLiftTarget(Exercise.Row),\n  };\n};\n","import { Box, HStack, Heading, Text, useTheme } from 'native-base';\n\nexport const DashboardHeading = ({ heading }: { heading: string }) => (\n  <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n    {heading}\n  </Heading>\n);\n\nexport const DashboardCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  const { colors } = useTheme();\n  return (\n    <Box marginY={2}>\n      {heading && <DashboardHeading heading={heading} />}\n      <Box padding={3} rounded={'lg'} backgroundColor={colors.white}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport const DashboardLabel = ({ children }: { children: React.ReactNode }) => <Text bold>{children}</Text>;\n\nexport const DashboardDetail = ({ label, value }: { label: string; value: string | number }) => (\n  <HStack paddingY={1} justifyContent={'space-between'} alignItems={'center'}>\n    <DashboardLabel>{label}:</DashboardLabel>\n    <Text>{value}</Text>\n  </HStack>\n);\n","import { Checkbox, HStack, Select, Text } from 'native-base';\n\ntype StringEnum = { [key: string]: string };\n\nexport const EnumSelect = <E extends StringEnum>({\n  Enum,\n  selectedValue,\n  onValueChange,\n  placeholder = 'Select...',\n}: {\n  Enum: E;\n  selectedValue: keyof E | undefined;\n  onValueChange: (newValue: keyof E) => void;\n  placeholder?: string;\n}) => (\n  <Select\n    selectedValue={selectedValue?.toString()}\n    placeholder={placeholder}\n    onValueChange={(value: string) => onValueChange(value as keyof E)}\n    minWidth={220}\n  >\n    {Object.keys(Enum).map((key: string) => (\n      <Select.Item key={key} value={key} label={Enum[key]} />\n    ))}\n  </Select>\n);\n\nexport const EnumMultiSelect = <E extends StringEnum>({\n  Enum,\n  selectedValues,\n  onChange,\n  accessibilityLabel,\n}: {\n  Enum: E;\n  selectedValues: Array<keyof E>;\n  onChange: (newValues: Array<keyof E>) => void;\n  accessibilityLabel: string;\n}) => (\n  <Checkbox.Group\n    defaultValue={(selectedValues ?? []) as string[]}\n    accessibilityLabel={accessibilityLabel ?? ''}\n    onChange={(values) => {\n      onChange((values || []) as Array<keyof E>);\n    }}\n  >\n    <HStack space={2} flexWrap={'wrap'}>\n      {Object.keys(Enum).map((key: string) => (\n        <Checkbox key={key} value={key} my=\"1\" size={'sm'}>\n          <Text fontSize={'xs'}>{Enum[key]}</Text>\n        </Checkbox>\n      ))}\n    </HStack>\n  </Checkbox.Group>\n);\n","import { Box, HStack, VStack } from 'native-base';\n\nimport { DashboardCard } from '../Dashboards';\n\nexport * from './EnumSelect';\n\nexport const FormCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  return <DashboardCard heading={heading}>{children}</DashboardCard>;\n};\n\nexport const InlineField = ({ children, allowWrap = false }: { children: React.ReactNode; allowWrap?: boolean }) => (\n  <HStack paddingBottom={1} justifyContent={'space-between'} alignItems={'center'} flexWrap={allowWrap ? 'wrap' : 'nowrap'}>\n    {children}\n  </HStack>\n);\n\nexport const StackedField = ({ children }: { children: React.ReactNode }) => <VStack paddingBottom={1}>{children}</VStack>;\n\nexport const BottomButtonsBox = ({ children }: { children: React.ReactNode }) => (\n  <Box marginTop={'auto'} marginBottom={2}>\n    {children}\n  </Box>\n);\n","import { ScrollView } from 'react-native';\nimport { Box, Text } from 'native-base';\n\nimport { ExperienceLevel, Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { getLiftStandards, getSpeedStandards, SpeedMetrics, StrengthMetrics, StrengthStandards } from '../../domain/standards';\nimport { formatDecimalMins, getWeightLabel } from '../../utils/measurements';\nimport { ExternalLink } from '../../utils/routing';\nimport { Table, TableHeader, TableRow } from '../Content';\n\nexport const StrengthStandardsComparison = ({\n  gender,\n  standards,\n  unitsType,\n}: {\n  gender: Gender;\n  standards: StrengthStandards;\n  unitsType: UnitsType;\n}) => {\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={700}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Exercice', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            {Object.keys(standards).map((exercise) => {\n              const lift: StrengthMetrics = standards[exercise as keyof StrengthStandards]!;\n              const liftStandards = getLiftStandards(gender, exercise as Exercise);\n\n              if (!liftStandards) {\n                return;\n              }\n\n              const getCellContent = ({ oneRepMax, ratio, reps }: StrengthMetrics, isStandard = false) => {\n                if (isStandard) {\n                  if (reps) {\n                    return `${reps} reps`;\n                  }\n                  return `${oneRepMax}${weightLabel} or ${ratio}x`;\n                }\n\n                if (reps) {\n                  return `${reps} reps`;\n                }\n                return oneRepMax ? `${oneRepMax}${weightLabel}/${ratio}x` : '-';\n              };\n\n              return (\n                <TableRow\n                  key={exercise}\n                  values={[\n                    { content: exercise, sideBorder: true },\n                    { content: getCellContent(lift), textAlign: 'center', sideBorder: true },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Beginner]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Novice]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Intermediate]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Advanced]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Vigilante]!, true),\n                      textAlign: 'center',\n                    },\n                  ]}\n                />\n              );\n            })}\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        Note: Weights are calculated 1 Rep Maxes (using the average of multiple formulas - Epley, O&apos;Conner, Brzycki and\n        more), ratios are multiples of 1RM to bodyweight. Standards are sourced from{' '}\n        <ExternalLink to=\"https://strengthlevel.com/strength-standards\" text=\"strengthlevel.com\" />\n      </Text>\n    </>\n  );\n};\n\nexport const SpeedtandardsComparison = ({ gender, standards }: { gender: Gender; standards: SpeedMetrics }) => {\n  const genderStandards = getSpeedStandards(gender);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={575}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Distance', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: 'Mile Run', sideBorder: true },\n                {\n                  content: standards.mileRun ? formatDecimalMins(standards.mileRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.mileRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: '5k Run', sideBorder: true },\n                {\n                  content: standards.fiveKmRun ? formatDecimalMins(standards.fiveKmRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.fiveKmRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        Note: Standards are sourced from{' '}\n        <ExternalLink to=\"https://runninglevel.com/running-times/1-mile-times\" text=\"runninglevel.com\" />\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\n\nimport { UnitsType } from '../../domain/constants';\nimport { Exercise, Lifts } from '../../domain/exercises';\nimport { StrengthStandards } from '../../domain/standards';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { Table, TableCell, TableHeader, TableRow } from '../Content';\n\nexport const LiftingStandardsCalculator = ({\n  unitsType,\n  lifts,\n  setLifts,\n  standards,\n}: {\n  unitsType: UnitsType;\n  lifts: Lifts;\n  setLifts: (newLifts: Lifts) => void;\n  standards?: StrengthStandards;\n}) => {\n  const weightLabel = getWeightLabel(unitsType);\n  const headings = [\n    { content: 'Exercise', textAlign: 'left' },\n    { content: `Weight (${weightLabel})` },\n    { content: 'Reps' },\n    { content: '1RM', textAlign: 'right' },\n    { content: '5RM', textAlign: 'right' },\n    { content: 'Ratio', textAlign: 'right' },\n  ];\n  const cellWidth = `${100 / headings.length}%`;\n  return (\n    <>\n      <Table>\n        <TableHeader headings={headings} />\n        {[Exercise.Bench, Exercise.Squat, Exercise.Press, Exercise.Deadlift, Exercise.Row].map((lift) => {\n          const calculated = standards?.[lift as keyof typeof lifts];\n          return (\n            <TableRow key={lift}>\n              <TableCell width={cellWidth} content={lift} />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'decimal-pad'}\n                    value={lifts[lift as Exercise]?.weight?.toString()}\n                    onChangeText={(value: string) =>\n                      setLifts({\n                        ...lifts,\n                        [lift]: { ...lifts[lift as Exercise], weight: value },\n                      })\n                    }\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'number-pad'}\n                    value={lifts[lift as Exercise]?.reps?.toString()}\n                    onChangeText={(value: string) =>\n                      setLifts({\n                        ...lifts,\n                        [lift]: { ...lifts[lift as Exercise], reps: Number(value) },\n                      })\n                    }\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.oneRepMax ? `${calculated.oneRepMax}${weightLabel}` : ''}\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.fiveRepMax ? `${calculated.fiveRepMax}${weightLabel}` : ''}\n              />\n              <TableCell width={cellWidth} textAlign={'right'} content={calculated?.ratio ? `${calculated.ratio}x` : ''} />\n            </TableRow>\n          );\n        })}\n      </Table>\n      <Text fontSize={'2xs'} italic>\n        {`Rep Maxes are calculated using the average of multiple formulas (Epley, O'Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight`}\n      </Text>\n    </>\n  );\n};\n","import { Text, Switch } from 'native-base';\n\nimport { InlineField } from '../../../components/Forms';\nimport { TraineePreferences } from '../../../domain/trainee';\n\nexport const NutritionPreferences = ({\n  preferences,\n  setPreference,\n}: {\n  preferences: TraineePreferences;\n  setPreference: <K extends keyof TraineePreferences>(preference: K, value: TraineePreferences[K]) => void;\n}) => (\n  <>\n    <InlineField>\n      <Text maxWidth={'85%'}>\n        <Text bold>Consume higher calories on the weekends</Text>: for those who prefer to eat less during the week and indulge\n        more on the weekend and still meet their goals\n      </Text>\n      <Switch\n        size=\"sm\"\n        isChecked={preferences.higherCaloriesOnWeekends}\n        onValueChange={(checked: boolean) => setPreference('higherCaloriesOnWeekends', checked)}\n      />\n    </InlineField>\n    <InlineField>\n      <Text maxWidth={'85%'}>\n        <Text bold>Cycle calories</Text>: for those who prefer to eat more on training days and less on rest days\n      </Text>\n      <Switch\n        size=\"sm\"\n        isChecked={preferences.cycleNutrition}\n        onValueChange={(checked: boolean) => setPreference('cycleNutrition', checked)}\n      />\n    </InlineField>\n  </>\n);\n","import { ArrowDownIcon, ArrowUpIcon, Box, HStack, Input, Text } from 'native-base';\nimport { InlineField } from '../../../components/Forms';\nimport { UnitsType } from '../../../domain/constants';\nimport { TraineePreferences } from '../../../domain/trainee';\nimport { getWeightLabel } from '../../../utils/measurements';\n\nexport const ProgressionPreferences = ({\n  preferences,\n  setPreference,\n}: {\n  preferences: TraineePreferences;\n  setPreference: <K extends keyof TraineePreferences>(preference: K, value: TraineePreferences[K]) => void;\n}) => {\n  const weightUnitLabel = getWeightLabel(UnitsType[preferences.unitsType]);\n  const percentLabel = '%';\n  return (\n    <>\n      <Box paddingY={1}>\n        <Text>\n          On Success <ArrowUpIcon />\n        </Text>\n        <InlineField>\n          <Text>Barbell Increment</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={preferences.barbellIncrement?.toString()}\n              // @ts-expect-error if cast to string it doesn't let you do decimals because it casts before typing all\n              onChangeText={(value: string) => setPreference('barbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>Dumbbell Increment</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'decimal-pad'}\n              value={preferences.dumbbellIncrement?.toString()}\n              // @ts-expect-error if cast to string it doesn't let you do decimals because it casts before typing all\n              onChangeText={(value: string) => setPreference('dumbbellIncrement', value)}\n            />\n            <Text>{weightUnitLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n      <Box paddingY={1}>\n        <Text>\n          On Failure <ArrowDownIcon />\n        </Text>\n        <InlineField>\n          <Text>Barbell Decrement</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={preferences.barbellDecrement?.toString()}\n              onChangeText={(value: string) => setPreference('barbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n        <InlineField>\n          <Text>Dumbbell Decrement</Text>\n          <HStack space={1} alignItems={'center'}>\n            <Input\n              textAlign={'right'}\n              width={50}\n              keyboardType={'numeric'}\n              value={preferences.dumbbellDecrement?.toString()}\n              onChangeText={(value: string) => setPreference('dumbbellDecrement', Number(value))}\n            />\n            <Text>{percentLabel}</Text>\n          </HStack>\n        </InlineField>\n      </Box>\n    </>\n  );\n};\n","import { Select, Text } from 'native-base';\n\nimport { EnumMultiSelect, EnumSelect, InlineField, StackedField } from '../../../components/Forms';\nimport { WeekDay } from '../../../domain/constants';\nimport { TraineePreferences } from '../../../domain/trainee';\n\nexport const SchedulingPreferences = ({\n  preferences,\n  setPreference,\n}: {\n  preferences: TraineePreferences;\n  setPreference: <K extends keyof TraineePreferences>(preference: K, value: TraineePreferences[K]) => void;\n}) => {\n  return (\n    <>\n      <InlineField>\n        <Text>Workouts per week</Text>\n        <Select\n          selectedValue={preferences.daysPerWeek?.toString()}\n          placeholder={'Select...'}\n          onValueChange={(value: string) => setPreference('daysPerWeek', Number(value))}\n          minWidth={'200'}\n        >\n          <Select.Item value={'2'} label={'2 at most'} />\n          <Select.Item value={'3'} label={'3 at most'} />\n          <Select.Item value={'4'} label={'4 at most'} />\n          <Select.Item value={'5'} label={'5 at most'} />\n          <Select.Item value={'6'} label={'6 at most'} />\n        </Select>\n      </InlineField>\n      <InlineField>\n        <Text>Workout duration</Text>\n        <Select\n          selectedValue={preferences.workoutDuration?.toString()}\n          placeholder={'Select...'}\n          onValueChange={(value: string) => setPreference('workoutDuration', Number(value))}\n          minWidth={'200'}\n        >\n          <Select.Item value={'30'} label={'30 minutes at most'} />\n          <Select.Item value={'45'} label={'45 minutes at most'} />\n          <Select.Item value={'60'} label={'60 minutes at most'} />\n          <Select.Item value={'75'} label={'75 minutes at most'} />\n          <Select.Item value={'90'} label={'90 minutes at most'} />\n        </Select>\n      </InlineField>\n      <InlineField>\n        <Text>Start week on</Text>\n        <EnumSelect\n          Enum={WeekDay}\n          selectedValue={preferences.weekStart}\n          onValueChange={(value: keyof typeof WeekDay) => setPreference('weekStart', value)}\n        />\n      </InlineField>\n      <StackedField>\n        <Text>Days you can train</Text>\n        <EnumMultiSelect\n          Enum={WeekDay}\n          accessibilityLabel={'Select days you can train'}\n          selectedValues={preferences.workoutDays}\n          onChange={(newValues: Array<keyof typeof WeekDay>) => setPreference('workoutDays', newValues)}\n        />\n      </StackedField>\n    </>\n  );\n};\n","import { HStack, Image, Radio, VStack } from 'native-base';\nimport { ImageSourcePropType } from 'react-native';\nimport { Gender } from '../../../domain/constants';\n\nconst BodyFatImageMap: {\n  [key in Gender]: { [key: number]: ImageSourcePropType };\n} = {\n  [Gender.Male]: {\n    10: require('./Male10.png'),\n    15: require('./Male15.png'),\n    20: require('./Male20.png'),\n    25: require('./Male25.png'),\n    30: require('./Male30.png'),\n  },\n  [Gender.Female]: {\n    10: require('./Female10.png'),\n    15: require('./Female15.png'),\n    20: require('./Female20.png'),\n    25: require('./Female25.png'),\n    30: require('./Female30.png'),\n  },\n};\n\nexport const BodyFatSelector = ({\n  gender,\n  bodyFat,\n  setBodyFat,\n}: {\n  gender: keyof typeof Gender;\n  bodyFat: number;\n  setBodyFat: (newvalue: number) => void;\n}) => {\n  return (\n    <Radio.Group\n      name=\"bodyFat\"\n      accessibilityLabel=\"select your approximate bodyfat percentage\"\n      value={bodyFat?.toString()}\n      onChange={(value) => {\n        setBodyFat(Number(value));\n      }}\n    >\n      {gender && (\n        <HStack alignItems={'center'} space={1}>\n          {['10', '15', '20', '25', '30'].map((percent) => (\n            <VStack key={`${gender}-${percent}`}>\n              <Image\n                size={'sm'}\n                resizeMode={'contain'}\n                alt={'Welcome'}\n                source={BodyFatImageMap[gender as keyof typeof Gender][Number(percent)]}\n              />\n              <Radio value={percent} my={1} size={'sm'}>\n                {`${percent}%`}\n              </Radio>\n            </VStack>\n          ))}\n        </HStack>\n      )}\n    </Radio.Group>\n  );\n};\n","import { HStack, Input, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { feetToInches, inchesToFeet } from '../../../utils/measurements';\n\nexport const ImperialHeightInput = ({ height, setHeight }: { height: number; setHeight: (newvalue: number) => void }) => {\n  const [feet, setFeet] = useState<number>();\n  const [inches, setInches] = useState<number>();\n\n  const onSetHeight = () => {\n    if (feet && inches) {\n      const heightInInches = feetToInches(feet) + inches;\n      setHeight(heightInInches);\n    }\n  };\n\n  useEffect(() => {\n    if (height) {\n      const converted = inchesToFeet(height);\n      const feet = Math.floor(converted);\n      const inches = Math.round(feetToInches(converted - feet));\n      setFeet(feet);\n      setInches(inches);\n    }\n  }, []);\n\n  useEffect(() => {\n    onSetHeight();\n  }, [feet, inches]);\n\n  return (\n    <HStack alignItems={'center'}>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={feet?.toString()}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setFeet(Number(value));\n        }}\n      />\n      <Text>{'ft'}</Text>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={inches?.toString()}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setInches(Number(value));\n        }}\n      />\n      <Text>{'in'}</Text>\n    </HStack>\n  );\n};\n","import { Input, Text } from 'native-base';\n\nimport { InlineField } from '../../../components/Forms';\nimport { BodyFatSelector } from '../../../components/Forms/BodyFatSelector';\nimport { ImperialHeightInput } from '../../../components/Forms/ImperialHeightInput';\nimport { UnitsType } from '../../../domain/constants';\nimport { TraineeStats } from '../../../domain/trainee';\nimport { getCircumferenceLabel, getHeightLabel, getWeightLabel } from '../../../utils/measurements';\n\nexport const CurrentBodyMetrics = ({\n  unitsType,\n  stats,\n  setStat,\n}: {\n  unitsType: UnitsType;\n  stats: TraineeStats;\n  setStat: <K extends keyof TraineeStats>(preference: K, value: TraineeStats[K]) => void;\n}) => {\n  return (\n    <>\n      <InlineField>\n        <Text>{`Your current weight (${getWeightLabel(unitsType)})`}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={stats.weight?.toString()}\n          onChangeText={(value: string) => setStat('weight', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{`Your waist circumference (${getCircumferenceLabel(unitsType)})`}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={stats.waist?.toString()}\n          onChangeText={(value: string) => setStat('waist', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{`Your height (${getHeightLabel(unitsType)})`}</Text>\n        {unitsType === UnitsType.Imperial ? (\n          <ImperialHeightInput height={stats.height} setHeight={(newValue: number) => setStat('height', newValue)} />\n        ) : (\n          <Input\n            textAlign={'right'}\n            width={50}\n            keyboardType={'number-pad'}\n            value={stats.height?.toString()}\n            onChangeText={(value: string) => setStat('height', Number(value))}\n          />\n        )}\n      </InlineField>\n      <InlineField allowWrap>\n        <Text>{`Bodyfat (%)`}</Text>\n        <BodyFatSelector\n          gender={stats.gender}\n          bodyFat={stats.bodyFat}\n          setBodyFat={(value: number) => {\n            setStat('bodyFat', value);\n          }}\n        />\n      </InlineField>\n    </>\n  );\n};\n","import { Alert, Button, HStack, Input, Select, Switch, Text } from 'native-base';\n\nimport { useTrainee } from '../../domain/trainee';\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { ActivityLevel, DietType, Gender, Goal, UnitsType } from '../../domain/constants';\nimport { LiftingStandardsCalculator } from '../../components/Standards';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { NutritionPreferences } from './components/NutritionPreferences';\nimport { ProgressionPreferences } from './components/ProgressionPreferences';\nimport { SchedulingPreferences } from './components/SchedulingPreferences';\nimport { CurrentBodyMetrics } from './components/CurrentBodyMetrics';\nimport { Lifts } from '../../domain/exercises';\n\nexport default function GetStarted() {\n  const { traineeLoaded, stats, setStat, preferences, setPreference, strengthStandards } = useTrainee();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const enableContinueButton =\n    !!stats.bodyFat &&\n    !!stats.weight &&\n    !!preferences.primaryGoal &&\n    !!preferences.secondaryGoal &&\n    !!preferences.daysPerWeek &&\n    !!preferences.workoutDuration;\n\n  return (\n    <DefaultLayout>\n      <FormCard heading={'Configuration'}>\n        <InlineField>\n          <Text>Units</Text>\n          <EnumSelect\n            Enum={UnitsType}\n            selectedValue={preferences.unitsType}\n            onValueChange={(value: keyof typeof UnitsType) => setPreference('unitsType', value)}\n          />\n        </InlineField>\n      </FormCard>\n\n      <FormCard heading={'About You'}>\n        <InlineField>\n          <Text>Gender</Text>\n          <EnumSelect\n            Enum={Gender}\n            selectedValue={stats.gender}\n            onValueChange={(value: keyof typeof Gender) => setStat('gender', value)}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>{`Your age`}</Text>\n          <Input\n            textAlign={'right'}\n            width={50}\n            keyboardType={'number-pad'}\n            value={stats.age?.toString()}\n            onChangeText={(value: string) => setStat('age', Number(value))}\n          />\n        </InlineField>\n        <CurrentBodyMetrics stats={stats} setStat={setStat} unitsType={UnitsType[preferences.unitsType]} />\n      </FormCard>\n\n      <FormCard heading={'Your current nutrition and preferences'}>\n        <InlineField>\n          <Text>{'Eating style'}</Text>\n          <EnumSelect\n            Enum={DietType}\n            selectedValue={stats.dietType}\n            onValueChange={(value: keyof typeof DietType) => setStat('dietType', value)}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>{'Have you been \"dieting\" on low calories for a long time without results?'}</Text>\n          <Select\n            selectedValue={stats.needsMetabolicReset ? 'yes' : 'no'}\n            placeholder={'Select...'}\n            onValueChange={(value: string) => setStat('needsMetabolicReset', value === 'yes')}\n            minWidth={'200'}\n          >\n            <Select.Item value={'no'} label={'No'} />\n            <Select.Item value={'yes'} label={'Yes'} />\n          </Select>\n        </InlineField>\n        {stats.needsMetabolicReset && (\n          <InlineField>\n            <Text>{`Roughly how many calories?`}</Text>\n            <Input\n              textAlign={'right'}\n              width={60}\n              keyboardType={'decimal-pad'}\n              value={stats.currentCalories?.toString()}\n              onChangeText={(value: string) => setStat('currentCalories', Number(value))}\n            />\n          </InlineField>\n        )}\n        <NutritionPreferences preferences={preferences} setPreference={setPreference} />\n      </FormCard>\n\n      <FormCard heading={'Your current activity'}>\n        <InlineField>\n          <Text>General daily activity</Text>\n          <EnumSelect\n            Enum={ActivityLevel}\n            selectedValue={stats.activityLevel}\n            onValueChange={(value: keyof typeof ActivityLevel) => setStat('activityLevel', value)}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>{`Mile run time (mins)`}</Text>\n          <Input\n            textAlign={'right'}\n            width={50}\n            keyboardType={'decimal-pad'}\n            value={stats.mileRun?.toString()}\n            onChangeText={(value: string) => setStat('mileRun', Number(value))}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>{`5k run time (mins)`}</Text>\n          <Input\n            textAlign={'right'}\n            width={50}\n            keyboardType={'decimal-pad'}\n            value={stats.fiveKmRun?.toString()}\n            onChangeText={(value: string) => setStat('fiveKmRun', Number(value))}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>{`How many push ups can you do?`}</Text>\n          <Input\n            textAlign={'right'}\n            width={50}\n            keyboardType={'decimal-pad'}\n            value={stats.pushUps?.toString()}\n            onChangeText={(value: string) => {\n              setStat('pushUps', Number(value));\n            }}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>{`How many pull ups can you do?`}</Text>\n          <Input\n            textAlign={'right'}\n            width={50}\n            keyboardType={'decimal-pad'}\n            value={stats.pullUps?.toString()}\n            onChangeText={(value: string) => {\n              setStat('pullUps', Number(value));\n            }}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>Ever done barbell lifting?</Text>\n          <Select\n            selectedValue={stats.everLifted ? 'yes' : 'no'}\n            placeholder={'Select...'}\n            onValueChange={(value: string) => setStat('everLifted', value === 'yes')}\n            minWidth={'200'}\n          >\n            <Select.Item value={'yes'} label={'Yes'} />\n            <Select.Item value={'no'} label={'No'} />\n          </Select>\n        </InlineField>\n        {stats.everLifted && (\n          <LiftingStandardsCalculator\n            unitsType={UnitsType[preferences.unitsType as keyof typeof UnitsType]}\n            lifts={stats.currentLifts}\n            standards={strengthStandards}\n            setLifts={(newLifts: Lifts) => {\n              setStat('currentLifts', newLifts);\n            }}\n          />\n        )}\n      </FormCard>\n\n      <FormCard heading={'Your goals and preferences'}>\n        <InlineField>\n          <Text>Primary Goal</Text>\n          <EnumSelect\n            Enum={Goal}\n            selectedValue={preferences.primaryGoal}\n            onValueChange={(value: keyof typeof Goal) => setPreference('primaryGoal', value)}\n          />\n        </InlineField>\n        <InlineField>\n          <Text>Secondary Goal</Text>\n          <EnumSelect\n            Enum={Goal}\n            selectedValue={preferences.secondaryGoal}\n            onValueChange={(value: keyof typeof Goal) => setPreference('secondaryGoal', value)}\n          />\n        </InlineField>\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>Mix it up often</Text>: If you get bored easily, this will cycle you through appropriate programs more\n            often\n          </Text>\n          <Switch\n            size=\"sm\"\n            isChecked={preferences.cycleProgramsOften}\n            onValueChange={(checked: boolean) => setPreference('cycleProgramsOften', checked)}\n          />\n        </InlineField>\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>Minimal legs</Text>: For those not keen on squatting heavy and often, or those who just do not want big\n            legs and rather keep them strong and athletic\n          </Text>\n          <Switch\n            size=\"sm\"\n            isChecked={preferences.minimalLegs}\n            onValueChange={(checked: boolean) => setPreference('minimalLegs', checked)}\n          />\n        </InlineField>\n      </FormCard>\n\n      <FormCard heading={'Scheduling & Progression'}>\n        <Alert status={'info'} colorScheme={'info'}>\n          <HStack flexShrink={1} space={2}>\n            <Text>\n              It is important you commit to something sustainable, more is not always better. Success comes from long term\n              consistency.\n            </Text>\n          </HStack>\n        </Alert>\n        <SchedulingPreferences preferences={preferences} setPreference={setPreference} />\n        <ProgressionPreferences preferences={preferences} setPreference={setPreference} />\n      </FormCard>\n\n      {enableContinueButton ? (\n        <RoutingButton to={Destination.ProgramSelection}>Continue</RoutingButton>\n      ) : (\n        <Button colorScheme=\"secondary\" disabled>\n          Continue\n        </Button>\n      )}\n    </DefaultLayout>\n  );\n}\n","import { Box, Divider, Text } from 'native-base';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\n\nimport { DashboardDetail } from '../Dashboards';\n\nexport const NutritionInfo = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { note, bmr, tdee } = protocol;\n  return (\n    <>\n      {note && <Text fontSize={'xs'}>{note}</Text>}\n      <Box marginY={2}>\n        <DashboardDetail label={'BMR (Base Metabolic Rate)'} value={`${bmr}`} />\n        <Divider />\n        <DashboardDetail label={'TDEE (Total Daily Energy Expenditure)'} value={`${tdee}`} />\n        <Divider />\n        <NutritionRecommendations protocol={protocol} />\n        <Box marginY={2}>\n          <Text fontSize={'2xs'} italic>\n            NOTE: BMR was calculated using the average of Miffin St Jeor, Harris Benedict and Katch McArdle formulas. TDEE was\n            calculated using your BMR and given activity level (lightly active=x1.375, active=x1.55 and very active=x1.725).\n            Minimum protein to consume was calculated using your body fat % (1 gram per pound of lean bodyweight)\n          </Text>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport const NutritionRecommendations = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { targetCalories, type, higherCaloriesOnWeekends, cycleNutrition, targetProtein } = protocol;\n  return (\n    <Box>\n      <DashboardDetail\n        label={`Recommended Target Average ${type === NutritionType.Bulk ? 'Surplus' : 'Deficit'}`}\n        value={`${targetCalories.energyExpenditureModifier}`}\n      />\n      <Divider />\n      <DashboardDetail label={`Target Average Daily Calories`} value={`${targetCalories.average}`} />\n      <Divider />\n      {higherCaloriesOnWeekends && !cycleNutrition && (\n        <>\n          <DashboardDetail label={`   Weekday Calories`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   Weekend Calories`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && !higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   Training Day Calories`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   Rest Day Calories`} value={`${targetCalories.restDay}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   Weekday Training Day Calories`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   Weekday Rest Day Calories`} value={`${targetCalories.restDay}`} />\n          <Divider />\n          <DashboardDetail label={`   Weekend Calories`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      <DashboardDetail label={`Minimum Grams of Protein`} value={`${targetProtein}`} />\n      <Divider />\n    </Box>\n  );\n};\n","export const toNearestIncrement = (weight: number, increment: number) => {\n  return Math.round(weight / increment) * increment;\n};\n","import { Text } from 'native-base';\n\nimport { UnitsType } from '../../domain/constants';\nimport { StrengthMetrics, StrengthStandards } from '../../domain/standards';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { toNearestIncrement } from '../../utils/weight';\nimport { BulletPoint } from '../Content';\n\nexport const LiftingTargets = ({\n  liftTargets,\n  unitsType,\n  barbellIncrement,\n}: {\n  liftTargets: StrengthStandards;\n  unitsType: UnitsType;\n  barbellIncrement: number;\n}) => {\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      {Object.keys(liftTargets).map((lift) => {\n        const { oneRepMax, fiveRepMax, reps } = liftTargets[lift as keyof typeof liftTargets] as StrengthMetrics;\n        const roundedFiveReps = fiveRepMax && toNearestIncrement(fiveRepMax, barbellIncrement);\n\n        return (\n          <BulletPoint key={lift}>\n            <Text fontSize={'xs'}>\n              {oneRepMax ? (\n                <>\n                  Get your {lift} 1RM to {oneRepMax}\n                  {weightLabel}{' '}\n                  {roundedFiveReps && (\n                    <Text>\n                      (that&apos;s {roundedFiveReps} {weightLabel} for 5 reps)\n                    </Text>\n                  )}\n                </>\n              ) : (\n                <>\n                  Get your number of {lift} to {reps}\n                </>\n              )}\n            </Text>\n          </BulletPoint>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { SpeedMetrics } from '../../domain/standards';\nimport { formatDecimalMins } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const SpeedTargets = ({ speedTargets }: { speedTargets: SpeedMetrics }) => {\n  return (\n    <>\n      <BulletPoint>\n        <Text fontSize={'xs'}>Get your Mile Run run down to {formatDecimalMins(speedTargets.mileRun)}</Text>\n      </BulletPoint>\n      <BulletPoint>\n        <Text fontSize={'xs'}>Get your 5k Run run down to {formatDecimalMins(speedTargets.fiveKmRun)}</Text>\n      </BulletPoint>\n    </>\n  );\n};\n","import { ScheduledWorkout } from '.';\n\nexport const markAllSetsAsComplete = (schedule: ScheduledWorkout[], workoutId: number) => {\n  schedule[workoutId].routine.forEach((exercise, exerciseId) => {\n    exercise.warmup?.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, true));\n    exercise.sets.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, false));\n  });\n};\n\nexport const updateWorkoutWithCompletedSet = (\n  schedule: ScheduledWorkout[],\n  workoutId: number,\n  exerciseId: number,\n  setId: number,\n  isWarmup: boolean,\n  recommendedWeight?: number\n) => {\n  if (isWarmup) {\n    const warmup = schedule[workoutId].routine[exerciseId].warmup![setId];\n    if (!warmup.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].warmup![setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].warmup![setId].status = 'done';\n  } else {\n    const set = schedule[workoutId].routine[exerciseId].sets[setId];\n    if (!set.reps) {\n      schedule[workoutId].routine[exerciseId].sets[setId].reps = set.maxReps ?? set.targetReps;\n    }\n    if (!set.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].sets[setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].sets[setId].status = 'done';\n  }\n\n  return schedule;\n};\n","import dayjs from 'dayjs';\n\nimport { getDateOfWeekday, getNextWorkoutDay } from '../../utils/calendar';\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { Program, Workout } from '../programs/interfaces';\nimport { markAllSetsAsComplete, updateWorkoutWithCompletedSet } from './helpers';\n\nexport interface ScheduledWorkout extends Workout {\n  id: number;\n  date: Date;\n  status?: 'pending' | 'done' | 'in progress';\n}\n\nexport type ScheduleAction =\n  | 'create'\n  | 'start_workout'\n  | 'end_workout'\n  | 'change_set_weight'\n  | 'change_set_reps'\n  | 'complete_set';\n\nexport const scheduleReducer = (schedule: ScheduledWorkout[], action: { type: ScheduleAction; payload: any }) => {\n  const { type, payload } = action;\n  let newSchedule = [...schedule];\n\n  switch (type) {\n    case 'create':\n      return createSchedule(payload.program, payload.experienceLevel, payload.weekStart);\n    case 'start_workout':\n      newSchedule[payload.id].status = 'in progress';\n      return newSchedule;\n    case 'end_workout':\n      markAllSetsAsComplete(schedule, payload.id);\n      newSchedule[payload.id].status = 'done';\n      return newSchedule;\n    case 'change_set_weight':\n      newSchedule[payload.id].routine[payload.exerciseId].sets[payload.setId].weight = payload.value;\n      return newSchedule;\n    case 'change_set_reps':\n      newSchedule[payload.id].routine[payload.exerciseId].sets[payload.setId].reps = payload.value;\n      return newSchedule;\n    case 'complete_set':\n      newSchedule = updateWorkoutWithCompletedSet(\n        schedule,\n        payload.id,\n        payload.exerciseId,\n        payload.setId,\n        payload.isWarmup,\n        payload.recommendedWeight\n      );\n      return newSchedule;\n    default:\n      throw new Error();\n  }\n};\n\nexport const createSchedule = (program: Program, experienceLevel: ExperienceLevel, weekStart: WeekDay = WeekDay.Monday) => {\n  // @TODO configurable per program, A/B splits should can be false\n  const firstWorkoutMustBeOnWeekStart = false;\n  const workouts = program.workouts(experienceLevel);\n  let totalWorkouts: number = program.daysPerWeek * program.duration;\n  let workoutWeeklyIndex = 0;\n  let date: Date | undefined = firstWorkoutMustBeOnWeekStart\n    ? getDateOfWeekday(weekStart, new Date(), false)\n    : getNextWorkoutDay(program.weeklySchedule, weekStart);\n\n  const schedule: ScheduledWorkout[] = [];\n  while (totalWorkouts > 0) {\n    schedule.push({\n      id: schedule.length,\n      date,\n      status: 'pending',\n      ...workouts[workoutWeeklyIndex],\n    });\n    date = getNextWorkoutDay(program.weeklySchedule, weekStart, date);\n    totalWorkouts--;\n    workoutWeeklyIndex++;\n    if (workoutWeeklyIndex === workouts.length) {\n      workoutWeeklyIndex = 0;\n    }\n  }\n\n  return schedule;\n};\n\nexport const getTodaysWorkout = (schedule: ScheduledWorkout[]): ScheduledWorkout | undefined => {\n  return schedule.find((item) => new Date(item.date).setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));\n};\n\nexport const getScheduledForThisWeek = (schedule: ScheduledWorkout[]): ScheduledWorkout[] => {\n  return schedule.filter((entry) => dayjs().isSame(entry.date, 'week')) || [];\n};\n","import { useStoredState, useStoredReducer } from 'react-native-use-stored-state';\n\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { getScheduledForThisWeek, getTodaysWorkout, ScheduleAction, ScheduledWorkout, scheduleReducer } from '../schedule';\nimport { getProgram } from './programs';\n\nexport const useActiveProgram = () => {\n  const [activeProgram, setActiveProgram, activeProgramLoaded, unsetIsActive] = useStoredState<string>('ACTIVE_PROGRAM');\n  const [schedule, updateSchedule, scheduleLoaded, unsetSchedule] = useStoredReducer<ScheduledWorkout[], ScheduleAction>(\n    'ACTIVE_SCHEDULE_1.0.0',\n    scheduleReducer\n  );\n\n  const program = activeProgram ? getProgram(activeProgram) : undefined;\n  const todaysWorkout = schedule ? getTodaysWorkout(schedule) : undefined;\n  const thisWeeksWorkouts = schedule ? getScheduledForThisWeek(schedule) : [];\n\n  const initialiseProgram = (id: string, experienceLevel: ExperienceLevel, weekStart: WeekDay) => {\n    updateSchedule({ type: 'create', payload: { program: getProgram(id), experienceLevel, weekStart } });\n    setActiveProgram(id);\n  };\n\n  const resetProgram = () => {\n    unsetIsActive();\n    unsetSchedule();\n  };\n\n  return {\n    activeProgramLoaded: scheduleLoaded && activeProgramLoaded,\n    active: !!program,\n    schedule,\n    updateSchedule,\n    program,\n    initialiseProgram,\n    todaysWorkout,\n    thisWeeksWorkouts,\n    resetProgram,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { Box, Select, Switch, Text } from 'native-base';\n\nimport { useTrainee } from '../../domain/trainee';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { FormCard, InlineField } from '../../components/Forms';\nimport { StrengthStandardsComparison, SpeedtandardsComparison } from '../../components/Standards';\nimport { Gender, UnitsType, WeekDay } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { BulletPoint } from '../../components/Content';\nimport { NutritionInfo } from '../../components/Nutrition';\nimport { NutritionPreferences } from './components/NutritionPreferences';\nimport { NutritionType } from '../../domain/nutrition';\nimport { LiftingTargets, SpeedTargets } from '../../components/Targets';\nimport { useActiveProgram } from '../../domain/programs/activeProgram';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nexport default function ProgramSelection() {\n  const [program, setProgram] = useState<string>();\n  const {\n    traineeLoaded,\n    stats,\n    preferences,\n    setPreference,\n    strengthStandards,\n    strengthLevel,\n    speedLevel,\n    recommendedNutrition,\n    recommendedPrograms,\n    liftTargets,\n    speedTargets,\n    bodyFatTarget,\n  } = useTrainee();\n  const { initialiseProgram } = useActiveProgram();\n\n  useEffect(() => {\n    recommendedPrograms && setProgram(recommendedPrograms.bestMatch);\n  }, [recommendedPrograms]);\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <DefaultLayout>\n      <FormCard heading={'Strength'}>\n        <Text marginBottom={2}>\n          {`You are ranked as:`} <Text bold>{strengthLevel}</Text>\n        </Text>\n        {strengthStandards && (\n          <StrengthStandardsComparison\n            gender={Gender[stats.gender]}\n            standards={{\n              ...strengthStandards,\n              [Exercise.Pullup]: { reps: stats.pullUps },\n              [Exercise.Pushup]: { reps: stats.pushUps },\n            }}\n            unitsType={UnitsType[preferences.unitsType as keyof typeof UnitsType]}\n          />\n        )}\n      </FormCard>\n\n      <FormCard heading={'Speed'}>\n        <Text marginBottom={2}>\n          {`You are ranked as:`} <Text bold>{speedLevel}</Text>\n        </Text>\n        <SpeedtandardsComparison\n          gender={Gender[stats.gender]}\n          standards={{\n            mileRun: stats.mileRun,\n            fiveKmRun: stats.fiveKmRun,\n          }}\n        />\n      </FormCard>\n\n      {recommendedNutrition && (\n        <FormCard heading={'Nutritional Recommendation'}>\n          <NutritionInfo protocol={recommendedNutrition} />\n          {[NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type) && (\n            <InlineField>\n              <Text maxWidth={'85%'}>\n                <Text bold>More aggresive cut</Text>: for those who want to drop weight quicker and can handle lower calories.\n              </Text>\n              <Switch\n                size=\"sm\"\n                isChecked={preferences.preferAggressiveCut}\n                onValueChange={(checked: boolean) => setPreference('preferAggressiveCut', checked)}\n              />\n            </InlineField>\n          )}\n          <NutritionPreferences preferences={preferences} setPreference={setPreference} />\n        </FormCard>\n      )}\n\n      {recommendedPrograms && (\n        <FormCard heading={'Training Recommendation'}>\n          <Box marginBottom={3}>\n            <Text>You should focus on getting stronger and faster aiming for the following short term goals:</Text>\n            {liftTargets && (\n              <LiftingTargets\n                liftTargets={liftTargets}\n                unitsType={UnitsType[preferences.unitsType]}\n                barbellIncrement={preferences.barbellIncrement}\n              />\n            )}\n            {speedTargets && <SpeedTargets speedTargets={speedTargets} />}\n            {bodyFatTarget && (\n              <BulletPoint>\n                <Text fontSize={'xs'}>Get your body fat down to {bodyFatTarget}%</Text>\n              </BulletPoint>\n            )}\n          </Box>\n          <Box marginBottom={3}>\n            <Text fontSize={'xs'} italic>\n              The most recommended program to achieve the above is selected, but you can also chose one of the other programs that\n              match your level of strength and preferences and you will still see good results.\n            </Text>\n            <Select\n              size={'md'}\n              selectedValue={program}\n              placeholder={'Select...'}\n              onValueChange={(value: string) => setProgram(value)}\n              minWidth={'100%'}\n              textAlign={'left'}\n              borderWidth={1}\n            >\n              {recommendedPrograms.suitablePrograms.map((program) => (\n                <Select.Item\n                  key={program.id}\n                  value={program.id}\n                  label={`${program.name}${program.id === recommendedPrograms.bestMatch ? ` (recommended)` : ''}`}\n                />\n              ))}\n            </Select>\n          </Box>\n          <InlineField>\n            <Text maxWidth={'85%'}>\n              <Text bold>End workouts with a speed or endurance finisher</Text>. In true vigilante fashion, workouts will randomly\n              end with a bodyweight exercise for reps and/or time, some sort of carry for distance and/or time or a 1 mile or 5k\n              run for time.\n            </Text>\n            <Switch size=\"sm\" isChecked />\n          </InlineField>\n        </FormCard>\n      )}\n\n      <RoutingButton\n        to={Destination.Dashboard}\n        onPress={() => initialiseProgram(program!, strengthLevel!, WeekDay[preferences.weekStart])}\n      >\n        {'Lets Go!'}\n      </RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { useStoredState } from 'react-native-use-stored-state';\n\nimport { ScheduledWorkout } from '../schedule';\n\nexport interface LoggedWorkout extends ScheduledWorkout {\n  datePerformed: Date;\n  program: string;\n}\n\nexport const useLog = () => {\n  const [workoutLog = [], setWorkoutLog, workoutLogLoaded, removeWorkoutLog] = useStoredState<LoggedWorkout[]>('LOG_WORKOUTS');\n\n  const logWorkout = (workout: ScheduledWorkout, program: string) => {\n    setWorkoutLog([\n      { ...workout, datePerformed: new Date(), program },\n      // spread at the end to force reverse order\n      ...(workoutLog ?? []),\n    ]);\n  };\n\n  const resetLog = () => {\n    removeWorkoutLog();\n  };\n\n  return {\n    logLoaded: workoutLogLoaded,\n    workoutLog,\n    logWorkout,\n    resetLog,\n  };\n};\n","import { toNearestIncrement } from '../../utils/weight';\nimport { LiftAttempt, Lifts } from '../exercises';\nimport { RoutineEntry, RoutineSet } from '../programs';\nimport { ScheduledWorkout } from '../schedule';\nimport { StrengthStandards } from '../standards';\n\nexport const getWorkoutById = (schedule: ScheduledWorkout[]) => (id: number) => schedule.find((entry) => entry.id === id);\n\nexport const getWorkoutTotalSetCount = (workout: ScheduledWorkout): number =>\n  workout.routine.reduce((acc, current) => {\n    if (current.warmup) acc = acc + current.warmup.length;\n    if (current.sets) acc = acc + current.sets.length;\n    return acc;\n  }, 0);\n\nexport const getCompleteSetCount = (workout: ScheduledWorkout): number => {\n  return workout.routine.reduce((acc: number, curr: RoutineEntry) => {\n    let count = acc;\n    [...(curr.warmup ? curr.warmup : []), ...(curr.sets ? curr.sets : [])].forEach((curr) => {\n      if (curr.status === 'done') count = count + 1;\n    });\n\n    return count;\n  }, 0);\n};\n\nexport const getPreviousWorkoutOfType = (schedule: ScheduledWorkout[]) => (workoutId: number) => {\n  const workout = schedule[workoutId];\n  let previous;\n  for (let i = workoutId - 1; i >= 0; i--) {\n    if (schedule[i].name === workout.name) {\n      previous = schedule[i];\n      break;\n    }\n  }\n  return previous;\n};\n\nexport const getPreviousLift =\n  (schedule: ScheduledWorkout[], workoutId: number, currentLifts?: Lifts) =>\n  (exerciseId: number, setId: number, warmup = false): { weight: number | undefined; reps: number } | undefined => {\n    // @TODO track and handle warmup history\n    if (warmup) return;\n\n    const previousWorkout = getPreviousWorkoutOfType(schedule!)(workoutId);\n    const previousSet = previousWorkout?.routine[exerciseId].sets[setId];\n\n    let previous = previousSet ? { weight: previousSet.weight, reps: previousSet.reps! } : undefined;\n\n    // if no previous and it is not a warmup\n    if (!previous && setId === 0 && currentLifts) {\n      previous = currentLifts[schedule[workoutId].routine[exerciseId].exercise as keyof typeof currentLifts];\n    }\n\n    return previous;\n  };\n\nexport const getRecommendedWeight =\n  ({\n    schedule,\n    workoutId,\n    barbellIncrement,\n    barbellDecrement,\n    dumbbellIncrement,\n    dumbbellDecrement,\n    strengthStandards,\n    bodyweight,\n    currentLifts,\n  }: {\n    schedule: ScheduledWorkout[];\n    workoutId: number;\n    barbellIncrement: number;\n    barbellDecrement: number;\n    dumbbellIncrement: number;\n    dumbbellDecrement: number;\n    strengthStandards: StrengthStandards;\n    bodyweight: number;\n    currentLifts: Lifts;\n  }) =>\n  (exerciseId: number, setId: number, warmup = false): number | undefined => {\n    const entry = schedule[workoutId].routine[exerciseId];\n    const currentLift = currentLifts[entry.exercise as keyof typeof currentLifts];\n    const liftStandards = strengthStandards[entry.exercise as keyof typeof strengthStandards];\n    const set = warmup ? entry.warmup?.[setId] : entry.sets[setId];\n\n    // @TODO by exercise type\n    const smallestIncrement = barbellIncrement;\n    const deloadDecrement = barbellDecrement;\n\n    let weight;\n    if (set?.weight) {\n      weight = set.weight;\n    } else if (set?.percentage && liftStandards) {\n      weight = liftStandards[set.basis ?? 'oneRepMax']! * (set.percentage / 100);\n    } else if (set?.ratio) {\n      weight = bodyweight * set.ratio;\n    } else if (!warmup && currentLift) {\n      const needsDeload = currentLift.fails && currentLift.fails >= 3;\n      const passedLastAttempt = currentLift.targetReps && currentLift.reps >= currentLift.targetReps;\n      const needsToRepeatPrevious = currentLift.targetReps && currentLift.reps < currentLift.targetReps;\n      if (needsDeload) {\n        weight = Number(currentLift.weight) - Number(currentLift.weight) * (deloadDecrement / 100);\n      } else if (passedLastAttempt) {\n        weight = Number(currentLift.weight) + Number(smallestIncrement);\n      } else if (needsToRepeatPrevious) {\n        weight = Number(currentLift.weight);\n      } else if (liftStandards) {\n        // @TODO should be configurable?\n        weight = liftStandards['fiveRepMax'];\n      }\n    } else if (liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      weight = Number(currentLift.weight);\n    }\n\n    return weight && toNearestIncrement(weight, smallestIncrement);\n  };\n\nconst getBestAttemptFromSets = (sets: RoutineSet[]): LiftAttempt =>\n  sets.reduce(\n    (acc, set) => {\n      if (!set.weight && !set.reps) return acc;\n\n      if (set.weight && set.weight >= acc.weight) {\n        acc.weight = Number(set.weight);\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      } else if ((set.weight == acc.weight || !set.weight) && set.reps! > acc.reps) {\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      }\n      return acc;\n    },\n    <LiftAttempt>{ weight: 0, reps: 0, targetReps: 0 }\n  );\n\nexport const updateCurrentLifts = (\n  currentLifts: Lifts,\n  workout: ScheduledWorkout,\n  setCurrentLifts: (newLifts: Lifts) => void\n) => {\n  setCurrentLifts({\n    ...currentLifts,\n    ...workout?.routine.reduce((acc, curr: RoutineEntry) => {\n      if (curr.ignoreForTracking) return acc;\n\n      const { weight, reps, targetReps } = getBestAttemptFromSets(curr.sets);\n      const currentFails = currentLifts[curr.exercise as keyof typeof currentLifts]?.fails ?? 0;\n      const isFail = targetReps && reps < targetReps;\n\n      return { ...acc, [curr.exercise as string]: { weight, reps, targetReps, fails: isFail ? currentFails + 1 : 0 } };\n    }, {}),\n  });\n};","import { useEffect, useState } from 'react';\nimport { Lifts } from '../exercises';\nimport { useLog } from '../log';\n\nimport { useActiveProgram } from '../programs/activeProgram';\nimport { useTrainee } from '../trainee';\nimport {\n  getWorkoutById,\n  getWorkoutTotalSetCount,\n  getRecommendedWeight,\n  getCompleteSetCount,\n  getPreviousLift,\n  updateCurrentLifts,\n} from './helpers';\n\nexport const useWorkout = (id: number) => {\n  const { stats, setStat, preferences, strengthStandards } = useTrainee();\n  const { logWorkout } = useLog();\n  const { program, schedule, updateSchedule } = useActiveProgram();\n\n  const [setsDone, setSetsDone] = useState<number>(0);\n\n  const workout = schedule && getWorkoutById(schedule)(Number(id));\n  const link = `/Workout/${workout?.id}`;\n  const totalSets = workout ? getWorkoutTotalSetCount(workout) : 0;\n\n  useEffect(() => {\n    schedule && setSetsDone(getCompleteSetCount(workout!));\n  }, [id, schedule, setSetsDone]);\n\n  const startWorkout = () => {\n    updateSchedule({ type: 'start_workout', payload: { id } });\n  };\n\n  const finishWorkout = () => {\n    updateCurrentLifts(stats.currentLifts, workout!, (newLifts: Lifts) => setStat('currentLifts', newLifts));\n    updateSchedule({ type: 'end_workout', payload: { id } });\n    logWorkout(workout!, program!.name);\n  };\n\n  const getSetRecommendedWeight = getRecommendedWeight({\n    schedule: schedule!,\n    workoutId: id,\n    barbellIncrement: preferences.barbellIncrement,\n    barbellDecrement: preferences.barbellDecrement,\n    dumbbellIncrement: preferences.dumbbellIncrement,\n    dumbbellDecrement: preferences.dumbbellDecrement,\n    strengthStandards: strengthStandards!,\n    bodyweight: stats.weight!,\n    currentLifts: stats.currentLifts,\n  });\n\n  const onSetComplete = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    updateSchedule({\n      type: 'complete_set',\n      payload: { id, exerciseId, setId, isWarmup, recommendedWeight: getSetRecommendedWeight(exerciseId, setId, isWarmup) },\n    });\n    setSetsDone((previous: number) => previous + 1);\n  };\n\n  const onChangeSetWeight = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_weight', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onChangeSetReps = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_reps', payload: { id, exerciseId, setId, value } });\n  };\n\n  const getRestTime = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    if (isWarmup) return 60;\n    return (schedule![id].routine[exerciseId].rest ?? 1) * 60;\n  };\n\n  return {\n    workout,\n    totalSets,\n    setsDone,\n    startWorkout,\n    link,\n    finishWorkout,\n    getRecommendedWeight: getSetRecommendedWeight,\n    getPreviousLift: getPreviousLift(schedule!, id, stats.currentLifts),\n    onChangeSetWeight,\n    onChangeSetReps,\n    onSetComplete,\n    getRestTime,\n  };\n};\n","import { Text } from 'native-base';\n\nimport { Paragraph } from '../../components/Content';\nimport { DashboardCard } from '../../components/Dashboards';\nimport { getTodaysCalories, NutritionProtocol } from '../../domain/nutrition';\nimport { ScheduledWorkout } from '../../domain/schedule';\nimport { useWorkout } from '../../domain/workout';\nimport { RoutingButton } from '../../utils/routing';\n\nexport default function Today({\n  recommendedNutrition,\n  workout,\n}: {\n  recommendedNutrition: NutritionProtocol;\n  workout: ScheduledWorkout | undefined;\n}) {\n  const calories = getTodaysCalories(recommendedNutrition, !!workout);\n  const { startWorkout, link } = useWorkout(Number(workout?.id));\n\n  return (\n    <DashboardCard heading={'Today'}>\n      {workout ? (\n        <Paragraph>\n          <Text paddingRight={3}>\n            Today you are scheduled to perform <Text bold>{workout.name}</Text>.\n          </Text>\n          {workout.status === 'in progress' && <RoutingButton to={link}>Continue Workout</RoutingButton>}\n          {workout.status === 'pending' && (\n            <RoutingButton to={link} onPress={startWorkout}>\n              Start Workout\n            </RoutingButton>\n          )}\n        </Paragraph>\n      ) : (\n        <Paragraph>Today is an active recovery day. Go for a run, do some stretching and/or some mobility work.</Paragraph>\n      )}\n\n      <Paragraph>\n        You should consume <Text bold>{calories} calories</Text> and at least{' '}\n        <Text bold>{recommendedNutrition.targetProtein} grams of protein</Text>. Calories can be split between fat and carbs to\n        preference, recommendation is that 20-30% come from healthy fats to maintain hormonal balance.\n      </Paragraph>\n    </DashboardCard>\n  );\n}\n","import { Box, Divider, HStack, Icon, Text } from 'native-base';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { goToWorkout, useNavigate } from '../../utils/routing';\nimport { ScheduledWorkout } from '../../domain/schedule';\n\nexport const WorkoutList = ({ workouts, dateFormat = 'date' }: { workouts: ScheduledWorkout[]; dateFormat?: 'day' | 'date' }) => {\n  const navigate = useNavigate();\n  return (\n    <>\n      {workouts.map((item, idx) => {\n        const isDone = item.status === 'done';\n        return (\n          <Box key={`workout-${idx}`}>\n            <HStack>\n              <Icon\n                color={isDone ? 'green.500' : 'amber.500'}\n                mb={1}\n                as={MaterialIcons}\n                name={isDone ? 'done' : 'schedule'}\n                size={'md'}\n                marginRight={1}\n              />\n              <Text>\n                {dateFormat === 'date'\n                  ? new Date(item.date).toLocaleDateString('en-GB', {\n                      weekday: 'short',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : new Date(item.date).toLocaleDateString('en-GB', { weekday: 'long' })}\n                :\n              </Text>\n              <Text bold>{` ${item.name}`}</Text>\n              <Icon\n                as={MaterialCommunityIcons}\n                name={'eye'}\n                size={'md'}\n                marginLeft={'auto'}\n                onPress={() => {\n                  goToWorkout(navigate)(idx);\n                }}\n              />\n            </HStack>\n            <Divider marginY={2} />\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutList } from '../../components/Workouts';\nimport { ScheduledWorkout } from '../../domain/schedule';\n\nexport default function ThisWeek({ workouts }: { workouts: ScheduledWorkout[] }) {\n  return (\n    <DashboardCard heading={'This Week'}>\n      {workouts.length ? <WorkoutList workouts={workouts} dateFormat={'day'} /> : <Text>No workouts scheduled.</Text>}\n    </DashboardCard>\n  );\n}\n","import { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport Today from './Today';\nimport { useTrainee } from '../../domain/trainee';\nimport { useActiveProgram } from '../../domain/programs/activeProgram';\nimport ThisWeek from './ThisWeek';\n\nexport default function Dashboard() {\n  const { traineeLoaded, recommendedNutrition } = useTrainee();\n  const { activeProgramLoaded, todaysWorkout, thisWeeksWorkouts } = useActiveProgram();\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading=\"Dashboard\">\n      <Today recommendedNutrition={recommendedNutrition!} workout={todaysWorkout} />\n      <ThisWeek workouts={thisWeeksWorkouts} />\n    </HeadedLayout>\n  );\n}\n","import { Icon, Modal, Pressable } from 'native-base';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useState } from 'react';\n\nimport { RoutineEntry } from '../../../../domain/programs';\nimport { Video } from '../../../Content';\n\nexport const ExerciseInfo = ({ item }: { item: RoutineEntry }) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n  const { video } = item;\n  return (\n    <>\n      <Modal\n        isOpen={modalVisible}\n        onClose={() => {\n          setModalVisible(false);\n        }}\n      >\n        <Modal.CloseButton />\n        {video && <Video video={video} />}\n      </Modal>\n      {video && (\n        <Pressable\n          onPress={() => {\n            setModalVisible(true);\n          }}\n        >\n          <Icon as={MaterialCommunityIcons} name={'information-outline'} size={'sm'} />\n        </Pressable>\n      )}\n    </>\n  );\n};\n","import { Box, Text } from 'native-base';\n\nexport const SetIdentifier = ({ warmup, setId }: { warmup?: boolean; setId: number }) => (\n  <Box width={25} borderRadius={10} background={warmup ? 'primary.50' : 'primary.200'} padding={0.5}>\n    <Text textAlign={'center'} fontSize={'xs'}>\n      {setId + 1}\n    </Text>\n  </Box>\n);\n","import { RoutineSet } from '../../../domain/programs';\n\nexport const getTargetRepsPlaceholder = (entry: RoutineSet): string => {\n  let placeholder = '';\n  if (entry.minReps) {\n    placeholder = `${entry.minReps}-${entry.maxReps}`;\n  } else if (entry.targetReps) {\n    placeholder = `${entry.targetReps}`;\n  } else if (entry.reps) {\n    placeholder = `${entry.reps}`;\n  }\n\n  if (entry.AMRAP) placeholder = `${placeholder}+`;\n\n  return placeholder;\n};\n\nexport const getPreviousLabel =\n  (\n    getPreviousLift: (\n      exerciseId: number,\n      setId: number,\n      isWarmup: boolean\n    ) => { weight: number | undefined; reps: number } | undefined\n  ) =>\n  (exerciseId: number, setId: number, isWarmup = false) => {\n    const prev = getPreviousLift(exerciseId, setId, isWarmup);\n    if (prev && prev.weight) {\n      return `${prev?.weight}x${prev?.reps}`;\n    } else if (prev && prev.reps) {\n      return `${prev?.reps}`;\n    }\n    return '-';\n  };\n","import { Checkbox, Input, Text } from 'native-base';\nimport { useState } from 'react';\n\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { TableRow } from '../../Content';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel, getTargetRepsPlaceholder } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Sets = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onChangeSetWeight,\n  onChangeSetReps,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const [sets, setSets] = useState<RoutineSet[]>(routine.sets);\n  const onUpdate = (setId: number, attr: 'weight' | 'reps', value: any) => {\n    const newSets = [...sets];\n    newSets[setId][attr] = value;\n    setSets(newSets);\n  };\n  return (\n    <>\n      {sets.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-set-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId), textAlign: 'center' },\n            ...(!routine.bodyweight\n              ? [\n                  {\n                    content: (\n                      <Input\n                        keyboardType={'decimal-pad'}\n                        value={entry.weight?.toString()}\n                        textAlign={'center'}\n                        onChangeText={(value: string) => onUpdate(setId, 'weight', value)}\n                        placeholder={getRecommendedWeight(exerciseId, setId)?.toString()}\n                        marginX={1}\n                      />\n                    ),\n                    textAlign: 'center',\n                  },\n                ]\n              : []),\n            {\n              content: (\n                <Input\n                  keyboardType={'number-pad'}\n                  value={entry.reps?.toString()}\n                  textAlign={'center'}\n                  onChangeText={(value: string) => onUpdate(setId, 'reps', Number(value))}\n                  placeholder={getTargetRepsPlaceholder(entry)}\n                  marginX={1}\n                />\n              ),\n              textAlign: 'center',\n            },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, false)}\n                >\n                  <Text display={'none'}>Done</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Checkbox, Text } from 'native-base';\n\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { TableRow } from '../../Content';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Warmups = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  return (\n    <>\n      {routine.warmup?.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-warmup-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier warmup setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId, true), textAlign: 'center' },\n            ...(!routine.bodyweight ? [{ content: getRecommendedWeight(exerciseId, setId, true), textAlign: 'center' }] : []),\n            { content: entry.reps, textAlign: 'center' },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, true)}\n                >\n                  <Text display={'none'}>Done</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Box, Heading, Text } from 'native-base';\n\nimport { RoutineEntry } from '../../../domain/programs';\nimport { ScheduledWorkout } from '../../../domain/schedule';\nimport { Table, TableHeader } from '../../Content';\nimport { ExerciseInfo } from './components/ExerciseInfo';\nimport { SetProps } from './interfaces';\nimport { Sets } from './Sets';\nimport { Warmups } from './Warmups';\n\nexport const WorkoutSheet = ({\n  workout,\n  ...rest\n}: {\n  workout: ScheduledWorkout;\n} & SetProps) => {\n  return (\n    <>\n      {workout.routine.map((item: RoutineEntry, exerciseId: number) => {\n        return (\n          <Box key={`workout-${item.exercise}`} marginBottom={10}>\n            <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n              {item.optional && <Text italic>(Optional) </Text>}\n              {item.exercise} <ExerciseInfo item={item} />\n            </Heading>\n            {item.note && <Text>Note: {item.note}</Text>}\n            <Table>\n              <TableHeader\n                headings={[\n                  { content: 'Set', textAlign: 'left', width: 10 },\n                  { content: 'Previous' },\n                  ...(!item.bodyweight ? [{ content: 'Weight' }] : []),\n                  { content: 'Reps' },\n                  { content: '' },\n                ]}\n              />\n              <Warmups exerciseId={exerciseId} routine={item} {...rest} />\n              <Sets exerciseId={exerciseId} routine={item} {...rest} />\n            </Table>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { Box, Progress, Text } from 'native-base';\nimport { useState } from 'react';\nimport { CountdownCircleTimer, TimeProps } from 'react-native-countdown-circle-timer';\nimport { useParams } from 'react-router';\n\nimport { FormCard } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WorkoutSheet } from '../../components/Workouts/WorkoutSheet';\nimport { useWorkout } from '../../domain/workout';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nexport default function Workout() {\n  const { id } = useParams();\n  const {\n    workout,\n    totalSets,\n    setsDone,\n    finishWorkout,\n    getRecommendedWeight,\n    onChangeSetReps,\n    onChangeSetWeight,\n    onSetComplete: baseOnSetComplete,\n    getRestTime,\n    getPreviousLift,\n  } = useWorkout(Number(id));\n\n  const [nextRestDuration, setNextRestDuration] = useState<number>(0);\n  const [remainingTime, setRemainingTime] = useState<number>(0);\n\n  if (!workout) {\n    return <Loader />;\n  }\n\n  const onSetComplete = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    baseOnSetComplete(exerciseId, setId, isWarmup);\n    const restTime = getRestTime(exerciseId, setId, isWarmup);\n    setNextRestDuration(restTime);\n    setRemainingTime(restTime);\n  };\n\n  return (\n    <>\n      <HeadedLayout\n        showNav\n        heading={workout.name}\n        headerElements={\n          <>\n            <Progress w=\"70%\" colorScheme=\"primary\" value={(setsDone / totalSets) * 100} marginY={1} />\n            {nextRestDuration > 0 && remainingTime > 0 && (\n              <Box paddingY={2}>\n                <CountdownCircleTimer\n                  size={90}\n                  strokeWidth={8}\n                  key={setsDone}\n                  isPlaying\n                  duration={nextRestDuration}\n                  colors={'#FF8533'}\n                >\n                  {({ remainingTime }: TimeProps) => {\n                    setRemainingTime(remainingTime);\n                    return <Text color={'white'} fontSize={'xs'}>{`${~~(remainingTime / 60)}min ${remainingTime % 60}sec`}</Text>;\n                  }}\n                </CountdownCircleTimer>\n              </Box>\n            )}\n          </>\n        }\n      >\n        <FormCard>\n          <WorkoutSheet\n            workout={workout}\n            getRecommendedWeight={getRecommendedWeight}\n            onChangeSetReps={onChangeSetReps}\n            onChangeSetWeight={onChangeSetWeight}\n            onSetComplete={onSetComplete}\n            getPreviousLift={getPreviousLift}\n          />\n          {/* {workout.status !== 'done' && ( */}\n          <RoutingButton to={Destination.Dashboard} onPress={finishWorkout}>\n            Finish Workout\n          </RoutingButton>\n          {/* )} */}\n        </FormCard>\n      </HeadedLayout>\n    </>\n  );\n}\n","import { Box, Divider, HStack, Text, VStack } from 'native-base';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useLog } from '../../domain/log';\nimport { RoutineEntry } from '../../domain/programs';\n\nexport default function Log() {\n  const { workoutLog, logLoaded } = useLog();\n\n  if (!logLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading=\"Log\">\n      {(!workoutLog || !workoutLog.length) && <Text>No workouts logged.</Text>}\n      {workoutLog?.map((workout) => {\n        const key = `${workout.datePerformed}-${workout.name}`;\n        return (\n          <DashboardCard key={key}>\n            <VStack space={1}>\n              <Text bold fontSize={'xs'}>\n                {new Date(workout.datePerformed).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              </Text>\n              <Text fontSize={'xs'}>\n                {workout.name}, {workout.program}\n              </Text>\n              <Divider />\n              {workout.routine.map((item: RoutineEntry) => (\n                <Box key={`${key}-${item.exercise}`}>\n                  {item.sets.length > 0 && (\n                    <Box>\n                      <Text bold fontSize={'xs'}>\n                        {item.exercise}\n                      </Text>\n                      <HStack>\n                        {item.sets.map((set, setId) => (\n                          <Text fontSize={'xs'} key={`${key}-${item.exercise}set-${setId}`} marginRight={2}>\n                            {!!set.weight && !!set.reps && `${set.weight}x${set.reps}`}\n                            {!set.weight && !!set.reps && `${set.reps}reps`}\n                          </Text>\n                        ))}\n                      </HStack>\n                    </Box>\n                  )}\n                </Box>\n              ))}\n            </VStack>\n          </DashboardCard>\n        );\n      })}\n    </HeadedLayout>\n  );\n}\n","import { BottomButtonsBox } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { useLog } from '../../domain/log';\nimport { useActiveProgram } from '../../domain/programs/activeProgram';\n\nexport default function Settings() {\n  const { activeProgramLoaded, resetProgram } = useActiveProgram();\n  const { resetLog } = useLog();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading=\"Settings\">\n      <BottomButtonsBox>\n        <RoutingButton to={Destination.Log} onPress={resetLog} colorScheme=\"secondary\" marginY={1}>\n          Reset Log\n        </RoutingButton>\n        <RoutingButton to={Destination.GetStarted} onPress={resetProgram}>\n          Reset/Change Program\n        </RoutingButton>\n      </BottomButtonsBox>\n    </HeadedLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useMemo } from 'react';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutList } from '../../components/Workouts';\nimport { ScheduledWorkout } from '../../domain/schedule';\n\nexport const Schedule = ({ schedule }: { schedule: ScheduledWorkout[] }) => {\n  const completedCount = useMemo(() => schedule.filter((item) => item.status === 'done').length, [schedule]);\n\n  return (\n    <DashboardCard heading={'Schedule'}>\n      <WorkoutList workouts={schedule} />\n      <Text italic textAlign={'right'}>\n        {completedCount}/{schedule.length} workouts complete\n      </Text>\n    </DashboardCard>\n  );\n};\n","import { Box, Divider, HStack, Heading, Text, Center } from 'native-base';\nimport { ScrollView } from 'react-native';\n\nimport { Video } from '../../components/Content';\nimport { DashboardCard } from '../../components/Dashboards';\nimport { RoutineEntry, Workout } from '../../domain/programs';\n\nexport const getExerciseRepLabel = (item: RoutineEntry): string => {\n  const sets = item.sets.length > 0 ? item.sets : item.warmup;\n  const numberOfSets = sets?.length;\n  let targetReps = `${sets?.[0]?.reps || sets?.[0]?.targetReps}`;\n  if (sets?.[0]?.minReps) {\n    targetReps = `${sets?.[0]?.minReps}-${sets?.[0]?.maxReps}`;\n  }\n  return numberOfSets && targetReps ? `${numberOfSets}x${targetReps}` : '';\n};\n\nexport const Workouts = ({ workouts }: { workouts: Workout[] }) => (\n  <DashboardCard heading={'Workouts'}>\n    <ScrollView horizontal={true}>\n      <HStack>\n        {workouts.map((workout: Workout, idx) => {\n          const wid = `workout-${workout.name}`;\n          const hasDivider = idx < workouts.length - 1;\n          return (\n            <HStack key={wid}>\n              <Box width={260}>\n                <Heading fontSize={'md'} fontWeight={300} paddingBottom={2}>\n                  {workout.name}\n                </Heading>\n                {workout.routine.map((item: RoutineEntry) => (\n                  <Box key={`${wid}-${item.exercise}`} paddingBottom={1}>\n                    <Text bold>{item.exercise}</Text>\n                    <Text>{getExerciseRepLabel(item)}</Text>\n                  </Box>\n                ))}\n                {workout.video && (\n                  <Center paddingTop={2}>\n                    <Video video={workout.video} width={280} />\n                  </Center>\n                )}\n              </Box>\n              {hasDivider && <Divider marginX={4} orientation={'vertical'} />}\n            </HStack>\n          );\n        })}\n      </HStack>\n    </ScrollView>\n  </DashboardCard>\n);\n","import { Center } from 'native-base';\n\nimport { Video } from '../../components/Content';\nimport { DashboardCard, DashboardDetail } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram } from '../../domain/programs/activeProgram';\nimport { useTrainee } from '../../domain/trainee';\nimport { Schedule } from './Schedule';\nimport { Workouts } from './Workouts';\n\nexport default function Program() {\n  const { strengthLevel } = useTrainee();\n  const { activeProgramLoaded, program, schedule } = useActiveProgram();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n  return (\n    <HeadedLayout showNav heading=\"Program\">\n      <DashboardCard heading={'Active Program'}>\n        <DashboardDetail label=\"Name\" value={program!.name} />\n        <DashboardDetail label=\"Author\" value={program!.author} />\n        <DashboardDetail label=\"Sourced from\" value={program!.link} />\n        <DashboardDetail label=\"Duration\" value={`${program!.duration} weeks`} />\n        <DashboardDetail label=\"Workouts per week\" value={program!.daysPerWeek} />\n        <DashboardDetail label=\"Workout duration\" value={`${program!.workoutDuration} min`} />\n        {program?.video && (\n          <Center paddingTop={2}>\n            <Video video={program.video} />\n          </Center>\n        )}\n      </DashboardCard>\n      <Workouts workouts={program!.workouts(strengthLevel)} />\n      <Schedule schedule={schedule!} />\n    </HeadedLayout>\n  );\n}\n","import { Text } from 'native-base';\n\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram } from '../../domain/programs/activeProgram';\n\nexport default function Vault() {\n  const { activeProgramLoaded } = useActiveProgram();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading=\"Vault\">\n      <Text>Coming Soon</Text>\n    </HeadedLayout>\n  );\n}\n","import { Route, Routes } from 'react-router';\nimport { NativeBaseProvider } from 'native-base';\n\nimport { nativeBaseTheme } from './theme';\n\nimport { Destination, Router } from './utils/routing';\nimport { Loader } from './components/Loader';\n\nimport Welcome from './screens/Welcome';\nimport About from './screens/About';\nimport { GetStarted, ProgramSelection } from './screens/GetStarted';\nimport Dashboard from './screens/Dashboard';\nimport Workout from './screens/Workout';\nimport Log from './screens/Log';\nimport { useActiveProgram } from './domain/programs/activeProgram';\nimport Settings from './screens/Settings';\nimport Program from './screens/Program';\nimport Vault from './screens/Vault';\n\nexport default function App() {\n  const { activeProgramLoaded, active } = useActiveProgram();\n\n  return (\n    <NativeBaseProvider theme={nativeBaseTheme}>\n      {!activeProgramLoaded ? (\n        <Loader />\n      ) : (\n        <Router>\n          <Routes>\n            <Route path={Destination.Welcome} element={!active ? <Welcome /> : <Dashboard />} />\n            <Route path={Destination.About} element={<About />} />\n            <Route path={Destination.GetStarted} element={<GetStarted />} />\n            <Route path={Destination.ProgramSelection} element={<ProgramSelection />} />\n            <Route path={Destination.Dashboard} element={<Dashboard />} />\n            <Route path={Destination.Log} element={<Log />} />\n            <Route path={Destination.Settings} element={<Settings />} />\n            <Route path={Destination.Program} element={<Program />} />\n            <Route path={Destination.Vault} element={<Vault />} />\n            <Route path=\"/Workout/:id\" element={<Workout />} />\n          </Routes>\n        </Router>\n      )}\n    </NativeBaseProvider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.19683717.png\";","module.exports = __webpack_public_path__ + \"static/media/go.077d9926.png\";","module.exports = __webpack_public_path__ + \"static/media/welcome2.bd841836.png\";","module.exports = __webpack_public_path__ + \"static/media/strength-icon.23b12a84.png\";","module.exports = __webpack_public_path__ + \"static/media/cardio-icon.96b53289.png\";","module.exports = __webpack_public_path__ + \"static/media/speed-icon.6097ad38.png\";","module.exports = __webpack_public_path__ + \"static/media/comic1.96e63579.png\";","module.exports = __webpack_public_path__ + \"static/media/comic2.70b29362.png\";","module.exports = __webpack_public_path__ + \"static/media/comic3.6d65de32.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Male10.f23d08d5.png\";","module.exports = __webpack_public_path__ + \"static/media/Male15.293ba6ba.png\";","module.exports = __webpack_public_path__ + \"static/media/Male20.4ad2a421.png\";","module.exports = __webpack_public_path__ + \"static/media/Male25.a2cbf1de.png\";","module.exports = __webpack_public_path__ + \"static/media/Male30.c81ae86e.png\";","module.exports = __webpack_public_path__ + \"static/media/Female10.0c2955e8.png\";","module.exports = __webpack_public_path__ + \"static/media/Female15.6d965ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/Female20.14ba5dd7.png\";","module.exports = __webpack_public_path__ + \"static/media/Female25.91e6a499.png\";","module.exports = __webpack_public_path__ + \"static/media/Female30.fd170a69.png\";"],"sourceRoot":""}