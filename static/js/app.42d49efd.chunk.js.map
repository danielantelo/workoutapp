{"version":3,"sources":["utils/routing.tsx","theme/index.ts","theme/components/Select.ts","components/Loader/index.tsx","components/Content/Tables.tsx","components/Content/Typography.tsx","components/Content/Video.tsx","components/Logo/index.tsx","components/Navigation/index.tsx","components/Layouts/index.tsx","screens/About/index.tsx","domain/constants/index.ts","screens/Welcome/index.tsx","domain/nutrition/nutrition.ts","utils/calendar.ts","utils/measurements.ts","domain/nutrition/calculators.ts","domain/exercises/exercises.ts","domain/programs/routines/athleanx.ts","domain/programs/routines/startingstrength.ts","domain/programs/routines/stronglifts.ts","domain/programs/routines/vigilante.ts","domain/programs/programs.ts","domain/standards/speed.ts","domain/standards/strength.ts","domain/standards/calculators.ts","domain/trainee/trainee.ts","domain/trainee/targets.ts","domain/trainee/schedule.ts","domain/trainee/store.ts","domain/trainee/log.ts","components/Dashboards/index.tsx","components/Forms/Select/index.tsx","components/Forms/index.tsx","components/Forms/BodyFatSelector/index.tsx","components/Forms/HeightInput/index.tsx","screens/GetStarted/AboutYou.tsx","components/Standards/StandardsComparison.tsx","components/Standards/LiftingStandardsCalculator.tsx","screens/GetStarted/Activity.tsx","screens/GetStarted/Configuration.tsx","screens/GetStarted/Nutrition.tsx","screens/GetStarted/Preferences.tsx","screens/GetStarted/Scheduling.tsx","screens/GetStarted/index.tsx","screens/ProgramSelection/Comparison.tsx","components/Nutrition/index.tsx","screens/ProgramSelection/NutritionRecommendation.tsx","utils/weight.ts","components/Targets/LiftingTargets.tsx","components/Targets/SpeedTargets.tsx","components/Workouts/WorkoutRoutinesHScroll.tsx","screens/ProgramSelection/ProgramRecommendation.tsx","screens/ProgramSelection/index.tsx","screens/Dashboard/Today.tsx","screens/Dashboard/index.tsx","components/Workouts/WorkoutsList.tsx","screens/Program/Schedule.tsx","screens/Program/Workouts.tsx","screens/Program/index.tsx","screens/Settings/index.tsx","screens/Vault/index.tsx","screens/Log/index.tsx","domain/workout/helpers.ts","screens/Workout/WorkoutSheet/components/ExerciseInfo.tsx","screens/Workout/WorkoutSheet/components/SetIdentifier.tsx","screens/Workout/WorkoutSheet/helpers.ts","screens/Workout/WorkoutSheet/Sets.tsx","screens/Workout/WorkoutSheet/Warmups.tsx","screens/Workout/WorkoutSheet/index.tsx","screens/Workout/index.tsx","App.tsx","components/Logo/logo.png","components/Navigation/go.png","screens/Welcome/welcome2.png","components/Forms/BodyFatSelector/Male10.png","components/Forms/BodyFatSelector/Male15.png","components/Forms/BodyFatSelector/Male20.png","components/Forms/BodyFatSelector/Male25.png","components/Forms/BodyFatSelector/Male30.png","components/Forms/BodyFatSelector/Female10.png","components/Forms/BodyFatSelector/Female15.png","components/Forms/BodyFatSelector/Female20.png","components/Forms/BodyFatSelector/Female25.png","components/Forms/BodyFatSelector/Female30.png"],"names":["Destination","nativeBaseTheme","extendTheme","fontSizes","xs","sm","md","lg","xl","colors","primary","secondary","components","Select","baseStyle","borderWidth","textAlign","paddingTop","Router","children","Platform","OS","useNavigate","useNavigateDom","Link","to","label","Text","RoutingButton","onPress","rest","navigate","Button","Loader","Center","height","Spinner","accessibilityLabel","Table","VStack","TableHeader","headings","HStack","alignItems","justifyContent","borderBottomWidth","borderBottomColor","marginBottom","map","heading","id","width","length","fontWeight","sideBorder","content","TableCell","bottomBorder","Box","fontSize","borderRightWidth","borderRightColor","TableRow","values","item","Paragraph","BulletPoint","marginY","marginLeft","marginRight","Video","video","includes","style","alignSelf","source","uri","useNativeControls","videoId","Logo","size","Image","alt","resizeMode","require","tabs","icon","action","Program","Log","image","Dashboard","Vault","Settings","Navigation","location","useLocation","useStoredState","selectedTab","setSelectedTab","useEffect","pathname","forEach","tab","idx","bg","safeAreaBottom","shadow","position","bottom","left","Pressable","opacity","py","flex","Icon","mb","as","MaterialCommunityIcons","name","DefaultLayout","showNav","showLogo","backgroundColor","safeArea","maxWidth","marginX","paddingY","paddingBottom","ScrollView","HeadedLayout","headerElements","safeAreaTop","top","zIndex","bold","color","marginTop","About","Heading","Home","Goal","ExperienceLevel","Gender","UnitsType","ActivityLevel","DietType","WeekDay","Headline","text","Welcome","t","useTranslation","Container","paddingLeft","GetStarted","NutritionType","DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getDateOfWeekday","dayName","date","Date","allowPast","now","getDay","day","findIndex","toLowerCase","diff","nextDayTimestamp","getTime","isDateInPast","today","setHours","getNextWorkoutDay","weeklySchedule","weekStart","previousWorkoutDate","proposedDate","scheduleDay","previousWorkoutDay","previousWorkoutDayIndex","getNextScheduledWeekday","schedule","found","parts","reduce","acc","current","push","week","convertScheduleToWeekdays","lbsToKg","lbs","feetToInches","feet","formatDecimalMins","time","min","Math","floor","sec","getWeightLabel","unitsType","Imperial","getHeightLabel","getCircumferenceLabel","bmrFormulas","miffinStJeor","gender","weightInLbs","heightInInches","age","Female","harrisBenedict","katchMcArdle","bodyFat","ExerciseType","Exercise","getTargetCalories","tdee","goal","cycleNutrition","numberOfWorkoutDays","higherCaloriesOnWeekends","preferAggressiveCut","isCut","Cut","AggressiveCut","modifier","Bulk","Maintain","getEnergyExpenditureModifier","average","workoutdaysTarget","restdaysTarget","weekendTarget","abs","trainingDay","restDay","weekend","energyExpenditureModifier","getNutritionRecommendation","cms","weight","activityLevel","primaryGoal","secondaryGoal","needsMetabolicReset","calcWeight","Metric","calcHeight","round","bmi","calculateBMI","bmr","args","formula","Object","keys","calculateBMR","Active","VeryActive","Sedentary","calculateTDEE","targetProtein","bodyWeightInLbs","grams","calculateMinimumProteinRequirement","largeDeficitDueToBodyfatMessage","type","reason","Male","Lean","Size","Strength","getNutritionTypeRecommendation","note","targetCalories","getTodaysCalories","recommendedNutrition","isWorkoutDay","dayOfWeek","isDateWeekend","ahtleanXRoutines","author","link","level","Beginner","Novice","Intermediate","Speed","daysPerWeek","workoutDuration","duration","workouts","warmup","percentage","reps","mainSets","targetReps","secondarySets","Array","routine","exercise","MultiLunge","sets","Squat","startingWeight","HipThrust","fill","minReps","maxReps","Bench","Chinup","DbCarry","ratio","Facepull","Deadlift","ReverseLunge","Press","Row","DbOverheadCarry","HipBand","PullApart","ssRoutines","PowerClean","optional","Advanced","basis","volumeSets","progressionSets","ignoreForTracking","bodyweight","AMRAP","Hyperextensions","PowerSnatch","slRoutines","Dips","Shrugs","TricepExtensions","Curls","CableCrunches","CloseGripBench","InclineCurls","Situp","vigilanteRoutines","AMARAP","RDL","Curl","WalkingLunges","Pullup","LateralRaises","InclineBench","Dip","HammerCurl","HighPulls","programs","sort","a","b","getProgram","find","program","speedStandards","mileRun","fiveKmRun","Vigilante","getSpeedStandards","standardExercises","strengthStandards","oneRepMax","Pushup","getLiftStandards","getStrengthLevel","everLifted","accLevel","lift","liftStandards","liftLevel","levelStandards","oneRepMaxForComparison","meetsOneRepMaxBasedStandard","meetsWeightBasedStandard","meetsRepBasedStandard","getLiftLevel","isLowerStandard","indexOf","undefined","formulas","epley","brzycki","oconner","lombardi","wathan","exp","mayhem","lander","calculatRepMax","multiplier","calculateThreeRepMax","calculateFiveRepMax","calculateEightRepMax","calculateTenRepMax","calculateTwelveRepMax","calculateFithteenRepMax","calculateTwentyRepMax","calculateRepMaxes","calculate1RepMax","threeRepMax","fiveRepMax","eightRepMax","tenRepMax","twelveRepMax","fithteenRepMax","twentyRepMax","calculateStrengthStandards","lifts","key","repMaxes","getTraineeMetrics","trainee","currentLifts","hasLifted","bestMileRunTime","bestfiveKmRunTime","strengthMetrics","speedMetrics","strengthLevel","speedLevel","mileRunTime","runStandards","meetsMileRunStandard","meetsFiveKmStandard","getSpeedLevel","getTraineeRecommendations","traineeMetrics","preferedNumberOfWorkoutsPerWeek","preferedWorkoutDuration","preferedUnitsType","prefersHigherCaloriesOnWeekends","prefersCycledNutrition","prefersAggressiveCut","recommendedPrograms","maxDaysPerWeek","maxWorkoutDuration","suitablePrograms","filter","isLevelAppropriate","isGenderAppropriate","meetsPrimaryGoal","meetsSecondaryGoal","isSuitableSchedule","bestMatch","getProgramRecommendations","speedTargets","standards","getNextSpeedTargets","liftTargets","lifterStandards","getLiftTarget","currentLift","levelStandard","levelOneRepMax","levelRatio","target","getNextLiftTargets","bodyFatTarget","scheduleReducer","payload","createSchedule","experienceLevel","status","markAllSetsAsComplete","exerciseId","setId","value","updateWorkoutWithCompletedSet","isWarmup","recommendedWeight","Error","firstWorkoutMustBeOnWeekStart","totalWorkouts","workoutWeeklyIndex","workoutId","set","traineeReducer","formData","field","defaultTrainee","preferedDietType","preferedWeekStart","preferedWorkoutDays","prefersProgramHoping","prefersMinimalLegs","useTrainee","useStoredReducer","dispatch","updateTrainee","traineeLoaded","resetTrainee","useActiveProgram","activeProgram","setActiveProgram","activeProgramLoaded","unsetIsActive","updateSchedule","scheduleLoaded","unsetSchedule","todaysWorkout","getTodaysWorkout","active","initialiseProgram","resetProgram","useLog","workoutLog","setWorkoutLog","workoutLogLoaded","removeWorkoutLog","logLoaded","logWorkout","workout","datePerformed","resetLog","DashboardHeading","DashboardCard","useTheme","padding","rounded","white","DashboardLabel","DashboardDetail","onValueChange","selectedValue","items","EnumSelect","Enum","EnumMultiSelect","selectedValues","onChange","Checkbox","Group","defaultValue","space","flexWrap","my","FormCard","InlineField","allowWrap","StackedField","BottomButtonsBox","BodyFatImageMap","10","15","20","25","30","BodyFatSelector","setBodyFat","Radio","toString","Number","percent","HeightInput","setHeight","Input","keyboardType","onChangeText","ImperialHeightInput","useState","setFeet","inches","setInches","converted","inchesToFeet","onSetHeight","AboutYou","waist","unitLabel","StrengthStandardsComparison","weightLabel","horizontal","showsHorizontalScrollIndicator","minWidth","getCellContent","isStandard","italic","SpeedtandardsComparison","genderStandards","LiftingStandardsCalculator","setLifts","useMemo","attr","cellWidth","calculated","Activity","maxPushUps","maxPullUps","newLifts","Configuration","Nutrition","Switch","isChecked","checked","Preferences","Scheduling","Alert","colorScheme","flexShrink","newValues","enableContinueButton","ProgramSelection","disabled","Comparison","NutritionInfo","protocol","Divider","NutritionRecommendations","NutritionRecommendation","toNearestIncrement","increment","LiftingTargets","roundedFiveReps","SpeedTargets","getExerciseRepLabel","numberOfSets","join","WorkoutRoutinesHScroll","wid","hasDivider","orientation","ProgramRecommendation","setProgram","selectedProgram","selectedProgramWorkouts","Today","calories","protein","paddingRight","Trans","WorkoutList","dateFormat","isDone","MaterialIcons","toLocaleDateString","weekday","month","goToWorkout","Schedule","completedCount","Workouts","year","workoutName","getPreviousWorkoutOfType","previous","i","getPreviousLift","previousWorkout","previousSet","updateCurrentLifts","setCurrentLifts","curr","currentFails","fails","isFail","ExerciseInfo","modalVisible","setModalVisible","Modal","isOpen","onClose","CloseButton","SetIdentifier","borderRadius","background","getTargetRepsPlaceholder","entry","placeholder","getPreviousLabel","prev","Sets","getRecommendedWeight","onSetComplete","setSets","onUpdate","newSets","display","Warmups","WorkoutSheet","Workout","useParams","getWorkoutById","getSetRecommendedWeight","barbellIncrement","barbellDecrement","dumbbellIncrement","dumbbellDecrement","smallestIncrement","deloadDecrement","needsDeload","passedLastAttempt","needsToRepeatPrevious","onChangeSetReps","onChangeSetWeight","App","NativeBaseProvider","theme","path","element","i18n","use","initReactI18next","init","resources","lng","fallbackLng","module","exports"],"mappings":"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","file":"static/js/app.42d49efd.chunk.js","sourcesContent":["import { Button, IButtonProps, Text } from 'native-base';\nimport { Platform } from 'react-native';\nimport { NavigateFunction } from 'react-router';\nimport { HashRouter, Link as DomLink, useNavigate as useNavigateDom } from 'react-router-dom';\nimport { NativeRouter, Link as NativeLink, useNavigate as useNavigateNative } from 'react-router-native';\n\nexport enum Destination {\n  About = '/About',\n  Dashboard = '/Dashboard',\n  GetStarted = '/GetStarted',\n  Home = '/',\n  Log = '/Log',\n  ProgramSelection = '/ProgramSelection',\n  Program = '/Program',\n  Settings = '/Settings',\n  Vault = '/Vault',\n  Workout = '/Workout/:id',\n}\n\nexport const Router = ({ children }: { children: React.ReactNode }) =>\n  Platform.OS === 'web' ? <HashRouter>{children}</HashRouter> : <NativeRouter>{children}</NativeRouter>;\n\nexport const useNavigate = () => (Platform.OS === 'web' ? useNavigateDom() : useNavigateNative());\n\nexport const Link = ({ to, label }: { to: Destination; label: string }) => {\n  return Platform.OS === 'web' ? (\n    <DomLink to={to}>\n      <Text>{label}</Text>\n    </DomLink>\n  ) : (\n    <NativeLink to={to}>\n      <Text>{label}</Text>\n    </NativeLink>\n  );\n};\n\nexport const RoutingButton = ({\n  children,\n  to,\n  onPress,\n  ...rest\n}: {\n  children: React.ReactNode;\n  to: Destination | string;\n  secondary?: boolean;\n  onPress?: () => void;\n} & IButtonProps) => {\n  const navigate = useNavigate();\n  return (\n    <Button\n      {...rest}\n      onPress={() => {\n        onPress && onPress();\n        navigate(to);\n      }}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const goToAbout = (navigate: NavigateFunction) => navigate(Destination.About);\n\nexport const goToGetStarted = (navigate: NavigateFunction) => navigate(Destination.GetStarted);\n\nexport const goToHome = (navigate: NavigateFunction) => navigate(Destination.Home);\n\nexport const goToDashboard = (navigate: NavigateFunction) => navigate(Destination.Dashboard);\n\nexport const goToLog = (navigate: NavigateFunction) => navigate(Destination.Log);\n\nexport const goToProgram = (navigate: NavigateFunction) => navigate(Destination.Program);\n\nexport const goToVault = (navigate: NavigateFunction) => navigate(Destination.Vault);\n\nexport const goToSettings = (navigate: NavigateFunction) => navigate(Destination.Settings);\n\nexport const goToWorkout = (navigate: NavigateFunction) => (id: number) => navigate(`/Workout/${id}`);\n","import { extendTheme } from 'native-base';\n\nimport { Select } from './components/Select';\n\nexport const nativeBaseTheme = extendTheme({\n  fontSizes: {\n    xs: 11,\n    sm: 13,\n    md: 15,\n    lg: 18,\n    xl: 28,\n  },\n  colors: {\n    primary: {\n      '50': '#FFF3EB',\n      '100': '#FFE7D6',\n      '200': '#FFCEAD',\n      '300': '#FFB685',\n      '400': '#FF9D5C',\n      '500': '#FF8533',\n      '600': '#F56200',\n      '700': '#B84900',\n      '800': '#7A3100',\n      '900': '#3D1800',\n    },\n    secondary: {\n      '50': '#f9f9f8',\n      '100': '#e0e0de',\n      '200': '#a5a5a5',\n      '300': '#808080',\n      '400': '#656565',\n      '500': '#4a4a4a',\n      '600': '#434343',\n      '700': '#3a3a3a',\n      '800': '#323232',\n      '900': '#222222',\n    },\n  },\n  components: {\n    Select,\n  },\n});\n","export const Select = {\n  baseStyle: {\n    borderWidth: 0,\n    textAlign: 'right',\n    paddingTop: 0,\n  },\n};\n\n","import { Center, Spinner } from 'native-base';\n\nexport const Loader = () => (\n  <Center height={'100%'}>\n    <Spinner accessibilityLabel=\"Loading\" />\n  </Center>\n);\n","import React from 'react';\nimport { Box, HStack, Text, VStack } from 'native-base';\n\ninterface Cell {\n  content?: string | number | React.ReactNode;\n  fontWeight?: number | string;\n  textAlign?: string;\n  width?: string | number;\n  sideBorder?: boolean;\n  bottomBorder?: boolean;\n}\n\nexport const Table = ({ children }: { children: React.ReactNode }) => <VStack>{children}</VStack>;\n\nexport const TableHeader = ({ headings }: { headings: Cell[] }) => {\n  return (\n    <HStack\n      alignItems={'center'}\n      justifyContent={'space-between'}\n      borderBottomWidth={1}\n      borderBottomColor={'secondary.100'}\n      marginBottom={1}\n    >\n      {headings.map((heading, id) => (\n        <TableCell\n          key={`${id}-${heading.content}`}\n          width={`${100 / headings.length}%`}\n          textAlign={heading.textAlign ?? 'center'}\n          fontWeight={500}\n          sideBorder={heading.sideBorder}\n          {...heading}\n        />\n      ))}\n    </HStack>\n  );\n};\n\nexport const TableCell = ({ width, textAlign, sideBorder, bottomBorder, content, fontWeight }: Cell) => {\n  return (\n    <>\n      {typeof content === 'object' ? (\n        <Box width={width}>{content}</Box>\n      ) : (\n        <Text\n          fontSize={'xs'}\n          fontWeight={fontWeight}\n          width={width}\n          // @ts-expect-error force text align string\n          textAlign={textAlign}\n          borderRightWidth={sideBorder ? 1 : 0}\n          borderBottomWidth={bottomBorder ? 1 : 0}\n          borderRightColor={'secondary.100'}\n        >\n          {content}\n        </Text>\n      )}\n    </>\n  );\n};\n\nexport const TableRow = ({ children, values }: { children?: React.ReactNode; values?: Cell[] }) => {\n  return (\n    <HStack alignItems={'center'} justifyContent={'space-between'} marginBottom={1}>\n      {values?.map((item: Cell, id: number) => (\n        <TableCell key={`cell-${id}`} width={item.width ?? `${100 / values.length}%`} {...item} />\n      ))}\n      {children}\n    </HStack>\n  );\n};\n","import { HStack, Text } from 'native-base';\n\nexport const Paragraph = ({ children }: { children: React.ReactNode }) => <Text marginBottom={5}>{children}</Text>;\n\nexport const BulletPoint = ({ children }: { children: React.ReactNode }) => (\n  <HStack marginY={1} marginLeft={3}>\n    <Text marginRight={2}>{'\\u{29BF}'}</Text>\n    <Text>{children}</Text>\n  </HStack>\n);\n","import YoutubePlayer from 'react-native-youtube-iframe';\nimport { Video as ExpoVideo } from 'expo-av';\n\nexport const Video = ({ video, width = 320 }: { video: string; width?: number }) => {\n  const height = width * (9 / 16);\n  if (video.includes('http')) {\n    return (\n      <ExpoVideo\n        style={{\n          alignSelf: 'center',\n          width,\n          height,\n        }}\n        source={{\n          uri: video,\n        }}\n        useNativeControls\n      />\n    );\n  }\n\n  return <YoutubePlayer width={width} height={height} videoId={video} />;\n};\n","import { Image } from 'native-base';\n\ntype LogoSize = 'sm' | 'md';\n\nconst Logo = ({ size }: { size?: LogoSize }) => {\n  let height = 268; // actual image height\n  switch (size) {\n    case 'sm':\n      height = height / 10;\n      break;\n    case 'md':\n      height = height / 4;\n      break;\n  }\n  return (\n    <Image marginBottom={1} width={'100%'} height={height} alt={'logo'} resizeMode={'contain'} source={require(`./logo.png`)} />\n  );\n};\n\nexport default Logo;\n","import { ReactElement, useEffect } from 'react';\nimport { Center, HStack, Icon, Image, Pressable, Text } from 'native-base';\nimport { NavigateFunction, useLocation } from 'react-router';\nimport { ImageSourcePropType, Platform } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useStoredState } from 'react-native-use-stored-state';\n\nimport { goToDashboard, goToLog, goToProgram, goToSettings, goToVault, useNavigate } from '../../utils/routing';\n\ninterface Tab {\n  label?: string;\n  icon?: string;\n  image?: ImageSourcePropType;\n  action: (navigate: NavigateFunction) => void;\n}\n\nconst tabs: Tab[] = [\n  {\n    label: 'Program',\n    icon: 'dumbbell',\n    action: goToProgram,\n  },\n  {\n    label: 'Log',\n    icon: 'calendar',\n    action: goToLog,\n  },\n  {\n    image: require('./go.png'),\n    action: goToDashboard,\n  },\n  {\n    label: 'Vault',\n    icon: 'video',\n    action: goToVault,\n  },\n  {\n    label: 'Settings',\n    icon: 'cog',\n    action: goToSettings,\n  },\n];\n\nexport const Navigation = (): ReactElement => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [selectedTab, setSelectedTab] = useStoredState<number>('ACTIVE_NAV_TAB', 2);\n\n  useEffect(() => {\n    if (location.pathname.includes('Dashboard')) {\n      setSelectedTab(2);\n    } else {\n      tabs.forEach((tab, idx) => {\n        if (tab.label && location.pathname.includes(tab.label)) {\n          setSelectedTab(idx);\n        }\n      });\n    }\n  }, [location]);\n\n  return (\n    <HStack\n      bg={'secondary.100'}\n      alignItems={'center'}\n      safeAreaBottom\n      shadow={5}\n      paddingTop={2}\n      //@ts-expect-error forced web styles for sticky nav\n      style={Platform.OS === 'web' ? { position: 'fixed', bottom: 0, left: 0, width: '100%' } : {}}\n    >\n      {tabs.map((tab, id) => (\n        <Pressable\n          key={`nav-tab-${id}`}\n          opacity={selectedTab === id ? 1 : 0.5}\n          py={2}\n          flex={1}\n          onPress={() => {\n            setSelectedTab(id);\n            tab.action(navigate);\n          }}\n        >\n          <Center>\n            {tab.icon && <Icon mb={1} as={MaterialCommunityIcons} name={tab.icon} size={'md'} />}\n            {tab.label && <Text>{tab.label}</Text>}\n            {tab.image && <Image width={10} height={10} alt={'Next Workout'} resizeMode={'contain'} source={tab.image} />}\n          </Center>\n        </Pressable>\n      ))}\n    </HStack>\n  );\n};\n","import { Box, Center, ScrollView, Text } from 'native-base';\nimport { Platform } from 'react-native';\n\nimport Logo from '../Logo';\nimport { Navigation } from '../Navigation';\n\nexport const DefaultLayout = ({\n  children,\n  showNav,\n  showLogo,\n  backgroundColor = 'secondary.50',\n}: {\n  showNav?: boolean;\n  showLogo?: boolean;\n  children: React.ReactNode;\n  backgroundColor?: 'secondary.100' | 'secondary.50';\n}) => {\n  return (\n    <Box flex={1} backgroundColor={backgroundColor}>\n      <Box safeArea flex={1} maxWidth={600} width={'95%'} marginX={'auto'} paddingY={5} paddingBottom={20}>\n        <ScrollView>\n          <>\n            {showLogo && (\n              <Center paddingY={5}>\n                <Logo size={'md'} />\n              </Center>\n            )}\n            {children}\n          </>\n        </ScrollView>\n      </Box>\n      {showNav && <Navigation />}\n    </Box>\n  );\n};\n\nexport const HeadedLayout = ({\n  showNav,\n  children,\n  backgroundColor = 'secondary.50',\n  heading,\n  headerElements,\n}: {\n  showNav?: boolean;\n  children: React.ReactNode;\n  heading?: string;\n  headerElements?: React.ReactNode;\n  backgroundColor?: string;\n}) => {\n  return (\n    <Box flex={1} backgroundColor={backgroundColor}>\n      <Box flex={1} maxWidth={600} width={'100%'} marginX={'auto'}>\n        <Box\n          safeAreaTop\n          bg={'secondary.500'}\n          paddingY={2}\n          //@ts-expect-error forced web styles for sticky top\n          style={Platform.OS === 'web' ? { position: 'fixed', top: 0, left: 0, width: '100%', zIndex: 100 } : {}}\n        >\n          <Center>\n            <Logo size={'sm'} />\n            {heading && (\n              <Text bold color={'white'}>\n                {heading}\n              </Text>\n            )}\n            {headerElements && <>{headerElements}</>}\n          </Center>\n        </Box>\n        <ScrollView\n          flex={1}\n          width={'96%'}\n          marginX={'auto'}\n          paddingBottom={20}\n          style={Platform.OS === 'web' ? { marginTop: '75px' } : {}}\n        >\n          {children}\n        </ScrollView>\n        {showNav && <Navigation />}\n      </Box>\n    </Box>\n  );\n};\n","import { Heading } from 'native-base';\n\nimport { Paragraph } from '../../components/Content';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nexport default function About() {\n  return (\n    <DefaultLayout showNav>\n      <Heading>About</Heading>\n      <Paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n        aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n        aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n        cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        <Link to={Destination.Home} label={'Link back to home'} />\n      </Paragraph>\n      <RoutingButton to={Destination.Home}>Routing Button back to home</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","export enum Goal {\n  Strength = 'Strength',\n  Size = 'Size',\n  Lean = 'Leanness',\n  Speed = 'Speed',\n}\n\nexport enum ExperienceLevel {\n  Beginner = 'Average Joe',\n  Novice = 'Novice',\n  Intermediate = 'Intermediate',\n  Advanced = 'Advanced',\n  Vigilante = 'Vigilante',\n}\n\nexport enum Gender {\n  Male = 'Male',\n  Female = 'Female',\n}\n\nexport enum UnitsType {\n  Metric = 'Metric (kg/cm)',\n  Imperial = 'Imperial (lbs/inches)',\n}\n\nexport enum ActivityLevel {\n  Sedentary = 'Lightly Active (sedentary job)',\n  Active = 'Active (over 10k steps per day)',\n  VeryActive = 'Very Active (physically demanding job)',\n}\n\nexport enum DietType {\n  Balanced = 'Balanced',\n  Keto = 'Keto',\n  Carnivore = 'Carnivore',\n  Pescatarian = 'Pescatarian',\n  Vegetarian = 'Vegetarian',\n  Vegan = 'Vegan',\n}\n\nexport enum WeekDay {\n  Monday = 'Monday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday',\n  Thursday = 'Thursday',\n  Friday = 'Friday',\n  Saturday = 'Saturday',\n  Sunday = 'Sunday',\n}\n","import { Center, Container, Image, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Destination, Link, RoutingButton } from '../../utils/routing';\n\nconst Headline = ({ text }: { text: string }) => (\n  <Text fontSize={'2xl'} marginBottom={2} fontWeight={500}>\n    {text}\n  </Text>\n);\n\nexport default function Welcome() {\n  const { t } = useTranslation();\n  return (\n    <DefaultLayout showLogo backgroundColor={'secondary.100'}>\n      <Center paddingTop={5}>\n        <Text textAlign={'center'} fontSize={'lg'} marginBottom={5}>\n          {t('The simple, enjoyable and sustainable approach to training.')}\n        </Text>\n        <Headline text={t('Get Stronger,')} />\n        <Headline text={t('Get Faster,')} />\n        <Headline text={t('Get Leaner.')} />\n      </Center>\n      <Center paddingY={5}>\n        <Image width={'100%'} height={320} resizeMode={'contain'} alt={'Welcome'} source={require(`./welcome2.png`)} />\n      </Center>\n      <Center marginY={5}>\n        <Text textAlign={'center'}>\n          <>\n            {t(\n              'This app matches your current level of strength and fitness to tried and tested training and nutrition regimes that are sustainable for your lifestyle and preferences. It sets you short term goals and as you progress the programming updates with new targets and appropriate routines. It keeps you progressing in the most optimal way possible and you will see your physique and performance transform to that of a vigilante...'\n            )}\n            <Container paddingLeft={1}>\n              <Link to={Destination.About} label={t('Tell me more')} />\n            </Container>\n          </>\n        </Text>\n      </Center>\n      <RoutingButton to={Destination.GetStarted}>{t('Get Started')}</RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { isDateWeekend } from '../../utils/calendar';\nimport { cmToInches, kgToLbs } from '../../utils/measurements';\nimport { ActivityLevel, Gender, Goal, UnitsType } from '../constants';\nimport { calculateBMI, calculateBMR, calculateMinimumProteinRequirement, calculateTDEE } from './calculators';\n\nconst AGGRESSIVE_CUT_DEFICIT = -600;\nconst CUT_DEFICIT = -400;\nconst BULK_SURPLUS = 300;\nconst MAX_CALORIES = 2600;\nconst UNDERWEIGHT_BMI = 18.5;\n\nexport enum NutritionType {\n  AggressiveCut = 'Aggressive Cut',\n  Cut = 'Cut',\n  Bulk = 'Lean Bulk',\n  Maintain = 'Maintain',\n}\n\nexport interface NutritionProtocol {\n  type: NutritionType;\n  note?: string;\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  cycleNutrition: boolean;\n  higherCaloriesOnWeekends: boolean;\n  targetCalories: {\n    energyExpenditureModifier: number;\n    trainingDay: number;\n    restDay: number;\n    weekend: number;\n    average: number;\n  };\n  targetProtein: number;\n}\n\nconst getNutritionTypeRecommendation = ({\n  gender,\n  bodyFat,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset,\n  bmi,\n  tdee,\n}: {\n  gender: Gender;\n  bodyFat: number;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset: boolean;\n  bmi: number;\n  tdee: number;\n}): { type: NutritionType; reason?: string } => {\n  const largeDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to handle an aggressive deficit while still making gains in strength and muscle mass.';\n  const smallDeficitDueToBodyfatMessage =\n    'Your bodyfat is high enough to make gains in strength and muscle while on a small deficit.';\n  const metabolicResetMessage =\n    'Given you have been dieting on low or unknown calories for some time without results, it is essential you eat at maintenance for 2-4 weeks.';\n  const lowBMIMessage = 'You are underweight for your height and should focus on adding muscle to your frame.';\n\n  if (bmi < UNDERWEIGHT_BMI && bodyFat > 10) {\n    return { type: NutritionType.Bulk, reason: lowBMIMessage };\n  }\n\n  if (needsMetabolicReset) {\n    return { type: NutritionType.Maintain, reason: metabolicResetMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 20) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 30) {\n    return { type: NutritionType.AggressiveCut, reason: largeDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Male && bodyFat > 15) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (gender === Gender.Female && bodyFat >= 20) {\n    return { type: NutritionType.Cut, reason: smallDeficitDueToBodyfatMessage };\n  }\n\n  if (primaryGoal === Goal.Lean) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (secondaryGoal === Goal.Lean && bodyFat >= 15) {\n    return { type: NutritionType.Cut };\n  }\n\n  if (\n    primaryGoal === Goal.Size ||\n    secondaryGoal === Goal.Size ||\n    primaryGoal === Goal.Strength ||\n    secondaryGoal === Goal.Strength\n  ) {\n    return { type: NutritionType.Bulk };\n  }\n\n  return { type: NutritionType.Maintain };\n};\n\nconst getEnergyExpenditureModifier = (goal: NutritionType, preferAggressiveCut: boolean) => {\n  switch (goal) {\n    case NutritionType.AggressiveCut:\n    case NutritionType.Cut:\n      if (preferAggressiveCut) {\n        return AGGRESSIVE_CUT_DEFICIT;\n      }\n      return CUT_DEFICIT;\n    case NutritionType.Bulk:\n      return BULK_SURPLUS;\n    case NutritionType.Maintain:\n    default:\n      return 0;\n  }\n};\n\nconst getTargetCalories = ({\n  tdee,\n  goal,\n  cycleNutrition,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends,\n  preferAggressiveCut,\n}: {\n  tdee: number;\n  goal: NutritionType;\n  cycleNutrition: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends: boolean;\n  preferAggressiveCut: boolean;\n}): { trainingDay: number; restDay: number; weekend: number; average: number; energyExpenditureModifier: number } => {\n  const isCut = goal === NutritionType.Cut || goal === NutritionType.AggressiveCut;\n\n  const modifier = getEnergyExpenditureModifier(goal, preferAggressiveCut);\n  const average = tdee + modifier;\n\n  let workoutdaysTarget = average;\n  let restdaysTarget = average;\n  let weekendTarget = average;\n\n  if (cycleNutrition) {\n    workoutdaysTarget = average + Math.abs(modifier);\n    restdaysTarget = average - Math.abs((modifier * numberOfWorkoutDays!) / (7 - numberOfWorkoutDays!));\n    weekendTarget = restdaysTarget;\n  }\n\n  if (higherCaloriesOnWeekends) {\n    weekendTarget = weekendTarget + 500;\n    workoutdaysTarget = workoutdaysTarget - 200;\n    restdaysTarget = restdaysTarget - 200;\n  }\n\n  if (isCut && workoutdaysTarget > MAX_CALORIES) {\n    workoutdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && restdaysTarget > MAX_CALORIES) {\n    restdaysTarget = MAX_CALORIES;\n  }\n\n  if (isCut && weekendTarget > MAX_CALORIES) {\n    weekendTarget = MAX_CALORIES;\n  }\n\n  return {\n    trainingDay: workoutdaysTarget,\n    restDay: restdaysTarget,\n    weekend: weekendTarget,\n    average,\n    energyExpenditureModifier: modifier,\n  };\n};\n\nexport const getNutritionRecommendation = ({\n  gender,\n  weight,\n  height,\n  age,\n  unitsType,\n  bodyFat,\n  activityLevel,\n  primaryGoal,\n  secondaryGoal,\n  needsMetabolicReset = false,\n  cycleNutrition = false,\n  numberOfWorkoutDays,\n  higherCaloriesOnWeekends = false,\n  preferAggressiveCut = false,\n}: {\n  gender: Gender;\n  weight: number;\n  height: number;\n  age: number;\n  unitsType: UnitsType;\n  bodyFat: number;\n  activityLevel: ActivityLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  needsMetabolicReset?: boolean;\n  cycleNutrition?: boolean;\n  numberOfWorkoutDays?: number;\n  higherCaloriesOnWeekends?: boolean;\n  preferAggressiveCut?: boolean;\n}): NutritionProtocol => {\n  const calcWeight = unitsType === UnitsType.Metric ? kgToLbs(weight) : weight;\n  const calcHeight = unitsType === UnitsType.Metric ? cmToInches(height) : height;\n\n  const bmi = calculateBMI(calcWeight, calcHeight);\n  const bmr = calculateBMR({ heightInInches: calcHeight, weightInLbs: calcWeight, gender, bodyFat, age });\n  const tdee = calculateTDEE(activityLevel, bmr);\n  const targetProtein = calculateMinimumProteinRequirement(calcWeight, bodyFat);\n\n  const { type, reason } = getNutritionTypeRecommendation({\n    gender,\n    bodyFat,\n    primaryGoal,\n    secondaryGoal,\n    needsMetabolicReset,\n    bmi,\n    tdee,\n  });\n\n  const targetCalories = getTargetCalories({\n    tdee,\n    goal: type,\n    cycleNutrition: cycleNutrition ?? false,\n    numberOfWorkoutDays,\n    higherCaloriesOnWeekends,\n    preferAggressiveCut,\n  });\n\n  return {\n    type,\n    note: reason,\n    bmi,\n    bmr,\n    tdee,\n    targetCalories,\n    targetProtein,\n    cycleNutrition,\n    higherCaloriesOnWeekends,\n  };\n};\n\nexport const getTodaysCalories = (recommendedNutrition: NutritionProtocol, isWorkoutDay: boolean) => {\n  const { targetCalories } = recommendedNutrition;\n  const isWeekend = isDateWeekend();\n  return (\n    (isWeekend ? targetCalories.weekend : isWorkoutDay ? targetCalories.trainingDay : targetCalories.restDay) ??\n    targetCalories.average\n  );\n};\n","import { WeekDay } from '../domain/constants';\n\n// Hard coded week day array as internally represented by javascript, sunday - saturday\nconst DAYS = [\n  WeekDay.Sunday,\n  WeekDay.Monday,\n  WeekDay.Tuesday,\n  WeekDay.Wednesday,\n  WeekDay.Thursday,\n  WeekDay.Friday,\n  WeekDay.Saturday,\n];\n\nexport const getDateOfWeekday = (dayName: WeekDay, date = new Date(), allowPast = true): Date => {\n  const now = date.getDay();\n  // The index for the day you want\n  const day = DAYS.findIndex((item: string) => dayName.toLowerCase() === item.toLowerCase());\n  // diff between desired day of week and now\n  let diff = day - now;\n  diff = diff < 0 && !allowPast ? diff + 7 : diff;\n  // Get the timestamp for the desired day, negative if it has already passed\n  const nextDayTimestamp = date.getTime() + 1000 * 60 * 60 * 24 * diff;\n\n  return new Date(nextDayTimestamp);\n};\n\nexport const addDays = (date: Date, days: number) => {\n  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n};\n\nexport const isDateWeekend = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 6 || dayOfWeek === 0; // 6 = Saturday, 0 = Sunday\n};\n\nexport const isDateConsecutiveDay = (date = new Date()): boolean => {\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 4 || dayOfWeek === 5; // 4 = Thursday, 5 = Friday\n};\n\nconst isDateInPast = (date: Date) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return date.getTime() < today.getTime();\n};\n\nexport const convertScheduleToWeekdays = (schedule: number[], weekStart: WeekDay): WeekDay[] => {\n  let map: { found: boolean; parts: WeekDay[][] } = { found: false, parts: [[], []] };\n  map = DAYS.reduce((acc, current) => {\n    if (current === weekStart) acc.found = true;\n    acc.found ? acc.parts[1].push(current) : acc.parts[0].push(current);\n    return acc;\n  }, map);\n\n  const week = [...map.parts[1], ...map.parts[0]];\n  return schedule.map((day) => week[day]);\n};\n\nexport const getNextScheduledWeekday = (weeklySchedule: WeekDay[], previousWorkoutDate: Date): WeekDay => {\n  const previousWorkoutDay = DAYS[previousWorkoutDate.getDay()];\n  const previousWorkoutDayIndex = weeklySchedule.findIndex(\n    (item: string) => previousWorkoutDay.toLowerCase() === item.toLowerCase()\n  );\n  const nextWorkoutIndex = previousWorkoutDayIndex + 1 > weeklySchedule.length - 1 ? 0 : previousWorkoutDayIndex + 1;\n  return weeklySchedule[nextWorkoutIndex];\n};\n\nexport const getNextWorkoutDay = (weeklySchedule: number[], weekStart: WeekDay, previousWorkoutDate?: Date): Date => {\n  if (!previousWorkoutDate) {\n    let proposedDate = getDateOfWeekday(weekStart);\n    while (isDateInPast(proposedDate)) {\n      proposedDate = getNextWorkoutDay(weeklySchedule, weekStart, proposedDate);\n    }\n    return proposedDate;\n  }\n\n  const schedule = convertScheduleToWeekdays(weeklySchedule, weekStart);\n  const scheduleDay = getNextScheduledWeekday(schedule, previousWorkoutDate);\n  return getDateOfWeekday(scheduleDay, previousWorkoutDate, false);\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const kgToLbs = (kg: number): number => (kg *= 2.2);\n\nexport const lbsToKg = (lbs: number): number => (lbs /= 2.2);\n\nexport const cmToInches = (cms: number): number => Math.round(cms * 0.393701);\n\nexport const feetToCms = (feet: number): number => Math.round(feet * 30.48);\n\nexport const feetToInches = (feet: number): number => feet * 12;\n\nexport const inchesToFeet = (inches: number): number => inches / 12;\n\nexport const formatDecimalMins = (time: number): string => {\n  const min = Math.floor(time);\n  const sec = Math.floor((time * 60) % 60);\n  return (min < 10 ? '0' : '') + min + ':' + (sec < 10 ? '0' : '') + sec;\n};\n\nexport const getWeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'lbs' : 'kg';\n};\n\nexport const getHeightLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'feet' : 'cm';\n};\n\nexport const getCircumferenceLabel = (unitsType: UnitsType): string => {\n  return unitsType === UnitsType.Imperial ? 'inches' : 'cm';\n};\n","import { ActivityLevel, Gender } from '../constants';\n\ninterface BmrArgs {\n  weightInLbs: number;\n  heightInInches: number;\n  age: number;\n  gender: Gender;\n  bodyFat: number;\n}\n\nconst bmrFormulas: { [key: string]: (args: BmrArgs) => number } = {\n  miffinStJeor: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age - 161;\n    }\n\n    return 10 * (weightInLbs / 2.2) + 6.25 * (heightInInches * 2.54) - 5 * age + 5;\n  },\n  harrisBenedict: ({ gender, weightInLbs, heightInInches, age }: BmrArgs) => {\n    if (gender === Gender.Female) {\n      return 655.1 + 4.35 * weightInLbs + 4.7 * heightInInches - 4.7 * age;\n    }\n\n    return 66.47 + 6.24 * weightInLbs + 12.7 * heightInInches - 6.755 * age;\n  },\n  katchMcArdle: ({ bodyFat, weightInLbs }: BmrArgs) => {\n    const leanMass = ((weightInLbs / 2.2) * (100 - bodyFat)) / 100;\n    return 370 + 21.6 * leanMass;\n  },\n};\n\nexport const calculateBMR = (args: BmrArgs, formula?: keyof typeof bmrFormulas): number => {\n  if (formula) {\n    return Math.round(bmrFormulas[formula](args));\n  }\n\n  const acc = Object.keys(bmrFormulas).reduce((acc, current) => {\n    return acc + bmrFormulas[current](args);\n  }, 0);\n\n  return Math.round(acc / Object.keys(bmrFormulas).length);\n};\n\nexport const calculateTDEE = (activityLevel: ActivityLevel, bmr: number): number => {\n  let tdee;\n  switch (activityLevel) {\n    case ActivityLevel.Active:\n      tdee = bmr * 1.55;\n      break;\n    case ActivityLevel.VeryActive:\n      tdee = bmr * 1.725;\n      break;\n    case ActivityLevel.Sedentary:\n    default:\n      tdee = bmr * 1.375;\n  }\n\n  return Math.floor(tdee / 10) * 10;\n};\n\nexport const calculateMinimumProteinRequirement = (bodyWeightInLbs: number, bodyFat: number): number => {\n  const grams = bodyWeightInLbs - bodyWeightInLbs * (bodyFat / 100);\n  return Math.round(grams / 5) * 5;\n};\n\nexport const calculateBMI = (weightInLbs: number, heightInInches: number) => {\n  const bmi = (weightInLbs / heightInInches ** 2) * 703;\n  return Math.round(bmi * 10) / 10;\n};\n","export enum ExerciseType {\n  Duration = 'Barbell',\n  Distance = 'Dumbbell',\n  Bodyweight = 'Bodyweight',\n  Machine = 'Machine',\n}\n\nexport enum Exercise {\n  Bench = 'Bench Press',\n  InclineBench = 'Incline Press',\n  Press = 'Press',\n  CloseGripBench = 'Close Grip Bench Press',\n  Dips = 'Dips',\n  LateralRaises = 'Lateral Raises',\n\n  Deadlift = 'Deadlift',\n  RDL = 'Romanian Deadlift',\n  Squat = 'Squat',\n  Hyperextensions = 'Hyperextensions',\n\n  Curl = 'Curls',\n  InclineCurls = 'Incline Curls',\n  TricepExtensions = 'Tricep Extensions',\n  HammerCurl = 'Hammer Curls',\n\n  Row = 'Row',\n  DumbbellRow = 'Dumbbell Row',\n  Shrugs = 'Shrugs',\n\n  MultiLunge = 'Multi Directional Lunge',\n  ReverseLunge = 'Reverse Lunge',\n  WalkingLunges = 'Walking Lunges',\n  HipThrust = 'Hip Thrusts',\n  HipBand = 'Hip Bands Side Steps',\n\n  Facepull = 'Face pulls',\n  PullApart = 'Band Pull Aparts',\n  HighPulls = 'High Pulls',\n\n  Pullup = 'Pull Ups',\n  Chinup = 'Chin Ups',\n  Pushup = 'Push Ups',\n  Dip = 'Dips',\n\n  CableCrunches = 'Cable Crunches',\n  Situp = 'Weighted Sit Up',\n\n  PowerClean = 'Power Clean',\n  PowerSnatch = 'Power Snatch',\n\n  MileRun = 'Mile Run',\n  FiveKmRun = '5k Run',\n\n  DbCarry = 'Dumbbell Carry',\n  DbOverheadCarry = 'Dumbbell Ovehead Carry',\n}\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, Workout } from '../interfaces';\n\nexport const ahtleanXRoutines: Program[] = [\n  {\n    id: 'AXFullBody',\n    name: 'AthleanX Perfect Total Body',\n    author: 'Jeff Cavaliere',\n    link: 'https://athleanx.com/articles/full-body-workout-plan',\n    video: 'R6gZoAzAhCg',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice, ExperienceLevel.Intermediate],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 8,\n    workouts: (level?: ExperienceLevel): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const mainRest = 2;\n      const secondarySets = Array(level === ExperienceLevel.Beginner ? 3 : 4);\n      const secondaryRest = 1;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Squat,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-squat.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-hip-thrust.mp4',\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-bench-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/weighted-chinup.mp4',\n              warmup: [\n                { percentage: 0, reps: 5 },\n                { percentage: 0, reps: 5 },\n              ],\n              sets: [...secondarySets].fill({ minReps: 6, maxReps: 10 }),\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.DbCarry,\n              video: '//athleanx.com/wp-content/uploads/2019/07/farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.5 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Facepull,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/banded-facepull.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.MultiLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/multidirectional-lunge-1.mp4',\n              warmup: [{ reps: 7 }, { reps: 7 }],\n              sets: [],\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-deadlift.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.ReverseLunge,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/reverse-barbell-lunge.mp4',\n              sets: [...secondarySets].fill({ targetReps: 10 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-overhead-press.mp4',\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/barbell-row.mp4',\n              warmup,\n              sets: [...secondarySets].fill({ minReps: 10, maxReps: 12 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/dumbbell-overhead-farmers-carry.mp4',\n              sets: [...secondarySets].fill({ targetReps: 50, ratio: 0.25 }),\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.HipBand,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/hip-band-mini-ladder.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.PullApart,\n              video: 'https://athleanx.com/wp-content/uploads/2019/07/band-pull-aparts.mp4',\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: secondaryRest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  // {\n  //   id: 'AXPushPullLegs',\n  //   name: 'AthleanX Perfect Push Pull Legs',\n  //   author: 'Jeff Cavaliere',\n  //   link: 'https://athleanx.com/articles/full-body-workout-plan',\n  //   level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced, ExperienceLevel.Vigilante],\n  //   gender: [Gender.Male, Gender.Female],\n  //   goal: [Goal.Strength, Goal.Size, Goal.Lean],\n  //   daysPerWeek: 6,\n  //   workoutDuration: 60,\n  // },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const ssRoutines: Program[] = [\n  {\n    id: 'StartingStrength',\n    author: 'Mark Rippetoe',\n    name: 'Starting Strength',\n    link: 'https://startingstrength.com/get-started/programs',\n    video: 'a9-a_8hC17M',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '37-wjE_c4NU',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              sets,\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'TexasMethod',\n    author: 'Mark Rippetoe',\n    name: 'The Texas Method',\n    link: 'https://startingstrength.com/article/the_texas_method',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 60, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 70, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const volumeSets: RoutineSet[] = [\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 90, reps: 5, basis: 'fiveRepMax' },\n      ];\n      const progressionSets: RoutineSet[] = [{ targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              ignoreForTracking: true,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C1',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerClean,\n              video: '2ggG1M2gGes',\n              sets: [{ targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }, { targetReps: 3 }],\n              rest,\n            },\n          ],\n        },\n        // @TODO think about how to deal with alternating exercises\n        {\n          name: 'Workout A2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              ignoreForTracking: true,\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'p2OPUi4xGrM',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n          ],\n        },\n        {\n          name: 'Workout B2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              ignoreForTracking: true,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: [\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 80, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              ignoreForTracking: true,\n              video: 'rxD321l2svE',\n              warmup,\n              sets: volumeSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C2',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'nhoikoUEI8U',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: '8dacy5hjaE8',\n              warmup,\n              sets: progressionSets,\n              rest,\n            },\n            {\n              exercise: Exercise.PowerSnatch,\n              video: 'uyY_ySdN6OU',\n              sets: [\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n                { targetReps: 2 },\n              ],\n              rest,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const slRoutines: Program[] = [\n  {\n    id: 'StrongLifts',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Strong Lifts',\n    link: 'https://stronglifts.com/5x5/',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      return [\n        {\n          name: 'Workout A',\n          video: 'EP2g3Sj3qSw',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Chinup,\n              optional: true,\n              bodyweight: true,\n              sets: [{ AMRAP: true }, { AMRAP: true }, { AMRAP: true }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'ICF',\n    author: 'Jason Blaha',\n    name: 'Ice Cream Fitness 5x5',\n    video: 'oAuARgqS6aQ',\n    link: 'https://www.muscleandstrength.com/workouts/jason-blaha-ice-cream-fitness-5x5-novice-workout',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Size, Goal.Strength, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 90,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 2;\n      const warmup = [\n        { weight: 20, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n      ];\n      const sets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }, { targetReps: 5 }];\n      const secondaryRest = 1.5;\n      const secondarySets = [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'yS8yUgRMiy4',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Shrugs,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              video: 'Io4Fq0SpMAY',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Curls,\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          video: 'ro3Mh9o7JPU',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'E9WmTCmITkY',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              video: 'm_WPH1NYPxc',\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: '2hbnw_wJ5-0',\n              note: '10% ligther than Workout A',\n              ignoreForTracking: true,\n              warmup,\n              sets,\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'V8bDeB7UPFo',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.CloseGripBench,\n              video: '8hgpyLrdWXs',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.InclineCurls,\n              video: 'H2T3tSbI_iQ',\n              sets: secondarySets,\n              rest: secondaryRest,\n            },\n            {\n              exercise: Exercise.CableCrunches,\n              video: '2SchEsVqgKc',\n              sets: [{ targetReps: 10 }, { targetReps: 10 }, { targetReps: 10 }],\n              rest: 1,\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'Madcow',\n    author: 'Mehdi (StrongLifts)',\n    name: 'Madcow 5x5',\n    link: 'https://stronglifts.com/madcow-5x5/',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean],\n    daysPerWeek: 3,\n    workoutDuration: 60,\n    weeklySchedule: [0, 2, 4],\n    duration: 12,\n    workouts: (): Workout[] => {\n      const rest = 3;\n      const warmup: RoutineSet[] = [\n        { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n        { percentage: 87.5, reps: 5, basis: 'fiveRepMax' },\n      ];\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Hyperextensions,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              note: 'Lighter than monday for recovery',\n              ignoreForTracking: true,\n              warmup: [\n                { percentage: 50, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 62.5, reps: 5, basis: 'fiveRepMax' },\n              ],\n              sets: [\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n                { percentage: 75, reps: 5, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Deadlift,\n              video: 'WP8lEbeY4LM',\n              warmup,\n              sets: [{ targetReps: 5 }],\n              rest,\n            },\n            {\n              exercise: Exercise.Situp,\n              sets: [{ targetReps: 12 }, { targetReps: 12 }, { targetReps: 12 }],\n              rest: 2,\n            },\n          ],\n        },\n        {\n          name: 'Workout C',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              video: 'VnV7vEi7Sz8',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Bench,\n              video: 'uwygcGdazeM',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Row,\n              video: 'gQBSRBgRLVI',\n              ignoreForTracking: true,\n              warmup,\n              sets: [\n                { percentage: 102.5, targetReps: 3, basis: 'fiveRepMax' },\n                { percentage: 77.5, targetReps: 8, basis: 'fiveRepMax' },\n              ],\n              rest,\n            },\n            {\n              exercise: Exercise.Dips,\n              sets: [{ targetReps: 6 }, { targetReps: 6 }, { targetReps: 6 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.Curls,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: [{ targetReps: 8 }, { targetReps: 8 }, { targetReps: 8 }],\n              rest: 2,\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../../constants';\nimport { Exercise } from '../../exercises';\nimport { Program, RoutineSet, Workout } from '../interfaces';\n\nexport const vigilanteRoutines: Program[] = [\n  {\n    id: 'VigilanteBeginner3Day',\n    name: 'Vigilante Training Beginners Full Body',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Beginner, ExperienceLevel.Novice],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 40, reps: 5 },\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 3 },\n      ];\n      const mainSets = [{ targetReps: 5 }, { targetReps: 5 }, { targetReps: 5, AMARAP: true }];\n      const mainRest = 3;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.RDL,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(3).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(3).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n  {\n    id: 'VigilanteIntermediate3Day',\n    name: 'Vigilante Training Intermediate Full Body',\n    author: 'Vigilante Training',\n    link: '',\n    video: '',\n    level: [ExperienceLevel.Intermediate, ExperienceLevel.Advanced],\n    gender: [Gender.Male, Gender.Female],\n    goal: [Goal.Strength, Goal.Size, Goal.Lean, Goal.Speed],\n    daysPerWeek: 3,\n    weeklySchedule: [0, 2, 4],\n    workoutDuration: 60,\n    duration: 12,\n    workouts: (): Workout[] => {\n      const warmup = [\n        { percentage: 50, reps: 5 },\n        { percentage: 60, reps: 5 },\n        { percentage: 70, reps: 3 },\n      ];\n      const mainSets: RoutineSet[] = [\n        { targetReps: 5, AMRAP: true },\n        { targetReps: 5, AMRAP: true, percentage: 100, basis: 'eightRepMax' },\n        { targetReps: 5, AMRAP: true, percentage: 100, basis: 'tenRepMax' },\n      ];\n      const mainRest = 2;\n      return [\n        {\n          name: 'Workout A',\n          routine: [\n            {\n              exercise: Exercise.Squat,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.HipThrust,\n              sets: Array(4).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Bench,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Row,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.InclineBench,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'tenRepMax',\n            },\n            {\n              exercise: Exercise.TricepExtensions,\n              sets: Array(3).fill({ minReps: 8, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.Curl,\n              sets: mainSets,\n            },\n            {\n              exercise: Exercise.Facepull,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n        {\n          name: 'Workout B',\n          routine: [\n            {\n              exercise: Exercise.Deadlift,\n              warmup,\n              sets: [{ targetReps: 5, AMRAP: true }],\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.WalkingLunges,\n              sets: Array(4).fill({ minReps: 12, maxReps: 15 }),\n            },\n            {\n              exercise: Exercise.Press,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Pullup,\n              warmup,\n              sets: mainSets,\n              rest: mainRest,\n              startingWeight: 'eightRepMax',\n            },\n            {\n              exercise: Exercise.Dip,\n              sets: mainSets,\n              rest: mainRest,\n            },\n            {\n              exercise: Exercise.LateralRaises,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.HammerCurl,\n              sets: Array(3).fill({ minReps: 10, maxReps: 12 }),\n            },\n            {\n              exercise: Exercise.HighPulls,\n              sets: Array(3).fill({ targetReps: 12 }),\n            },\n            {\n              exercise: Exercise.DbOverheadCarry,\n              sets: Array(4).fill({ targetReps: 50 }),\n            },\n          ],\n        },\n      ];\n    },\n  },\n];\n","import { ExperienceLevel, Gender, Goal } from '../constants';\nimport { Program } from './interfaces';\nimport { ahtleanXRoutines } from './routines/athleanx';\n// import { aWorkoutRoutines } from './routines/aworkoutroutine';\n// import { builtWithScienceRoutines } from './routines/builtwithschience';\n// import { greyskullRoutines } from './routines/greyskull';\n// import { gzclRoutines } from './routines/gzcl';\n// import { kinobodyRoutines } from './routines/kinobody';\n// import { leanGainsRoutines } from './routines/leangains';\n// import { oldSchoolRoutines } from './routines/oldschool';\n// import { otherRoutines } from './routines/other';\n// import { redditRoutines } from './routines/reddit';\nimport { ssRoutines } from './routines/startingstrength';\nimport { slRoutines } from './routines/stronglifts';\nimport { vigilanteRoutines } from './routines/vigilante';\n// import { wendlerRoutines } from './routines/wendler';\n\nexport const programs: Program[] = [\n  ...ssRoutines,\n  ...slRoutines,\n  ...ahtleanXRoutines,\n  // ...aWorkoutRoutines,\n  // ...builtWithScienceRoutines,\n  // ...greyskullRoutines,\n  // ...gzclRoutines,\n  // ...kinobodyRoutines,\n  // ...leanGainsRoutines,\n  // ...oldSchoolRoutines,\n  // ...otherRoutines,\n  // ...redditRoutines,\n  // ...wendlerRoutines,\n  ...vigilanteRoutines,\n].sort((a, b) => {\n  return a.name > b.name ? 1 : -1;\n});\n\nexport const getProgram = (id: string): Program => programs.find((program) => program.id === id)!;\n\nexport const getProgramRecommendations = ({\n  gender,\n  strengthLevel,\n  primaryGoal,\n  secondaryGoal,\n  maxDaysPerWeek,\n  maxWorkoutDuration,\n}: {\n  gender: Gender;\n  strengthLevel: ExperienceLevel;\n  speedLevel: ExperienceLevel;\n  primaryGoal: Goal;\n  secondaryGoal: Goal;\n  maxDaysPerWeek: number;\n  maxWorkoutDuration: number;\n}): { suitablePrograms: Program[]; bestMatch: string } => {\n  const suitablePrograms = programs.filter((program) => {\n    const isLevelAppropriate = program.level.includes(strengthLevel);\n    const isGenderAppropriate = program.gender.includes(gender);\n    const meetsPrimaryGoal = program.goal.includes(primaryGoal);\n    const meetsSecondaryGoal = program.goal.includes(secondaryGoal);\n    const isSuitableSchedule = program.daysPerWeek <= maxDaysPerWeek && program.workoutDuration <= maxWorkoutDuration;\n    return isLevelAppropriate && isGenderAppropriate && meetsPrimaryGoal && meetsSecondaryGoal && isSuitableSchedule;\n  });\n  // @TODO\n  const bestMatch = 'VigilanteIntermediate3Day';\n\n  return { suitablePrograms, bestMatch };\n};\n","import { ExperienceLevel, Gender } from '../constants';\n\nexport interface SpeedMetrics {\n  mileRun: number;\n  fiveKmRun: number;\n}\n\nconst speedStandards: {\n  [key in Gender]: {\n    [key in ExperienceLevel]: SpeedMetrics;\n  };\n} = {\n  [Gender.Male]: {\n    [ExperienceLevel.Beginner]: { mileRun: 9.5, fiveKmRun: 31.5 },\n    [ExperienceLevel.Novice]: { mileRun: 7.75, fiveKmRun: 26.33 },\n    [ExperienceLevel.Intermediate]: { mileRun: 6.5, fiveKmRun: 22.5 },\n    [ExperienceLevel.Advanced]: { mileRun: 5.75, fiveKmRun: 19.75 },\n    [ExperienceLevel.Vigilante]: { mileRun: 5.15, fiveKmRun: 17.75 },\n  },\n  [Gender.Female]: {\n    [ExperienceLevel.Beginner]: { mileRun: 10.75, fiveKmRun: 35.5 },\n    [ExperienceLevel.Novice]: { mileRun: 9, fiveKmRun: 30 },\n    [ExperienceLevel.Intermediate]: { mileRun: 7.75, fiveKmRun: 26.15 },\n    [ExperienceLevel.Advanced]: { mileRun: 6.8, fiveKmRun: 23 },\n    [ExperienceLevel.Vigilante]: { mileRun: 6.15, fiveKmRun: 20.75 },\n  },\n};\n\nexport const getSpeedStandards = (gender: Gender): { [key in ExperienceLevel]?: SpeedMetrics } => {\n  return speedStandards[gender];\n};\n\nexport const getSpeedLevel = (gender: Gender, mileRunTime: number, fiveKmRun: number) => {\n  const runStandards = getSpeedStandards(gender);\n  return Object.keys(runStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n    const levelStandards = runStandards[<ExperienceLevel>current]!;\n\n    const meetsMileRunStandard = mileRunTime <= levelStandards.mileRun;\n    const meetsFiveKmStandard = fiveKmRun <= levelStandards.fiveKmRun;\n\n    if (meetsMileRunStandard && meetsFiveKmStandard) {\n      return <ExperienceLevel>current;\n    }\n\n    return acc;\n  }, ExperienceLevel.Beginner);\n};\n","import { lbsToKg } from '../../utils/measurements';\nimport { ExperienceLevel, Gender, UnitsType } from '../constants';\nimport { Exercise } from '../exercises';\n\nexport const standardExercises = [\n  Exercise.Bench,\n  Exercise.Squat,\n  Exercise.Press,\n  Exercise.Deadlift,\n  Exercise.Row,\n  Exercise.InclineBench,\n  Exercise.Curl,\n];\nexport interface LiftMetrics {\n  oneRepMax?: number;\n  threeRepMax?: number;\n  fiveRepMax?: number;\n  eightRepMax?: number;\n  tenRepMax?: number;\n  twelveRepMax?: number;\n  fithteenRepMax?: number;\n  twentyRepMax?: number;\n  ratio?: number;\n  reps?: number;\n}\n\nexport type StrengthMetrics = {\n  [key in Exercise]?: LiftMetrics;\n};\n\nconst strengthStandards: {\n  [key in Gender]: {\n    [key in Exercise]?: {\n      [key in ExperienceLevel]: LiftMetrics;\n    };\n  };\n} = {\n  [Gender.Male]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Novice]: { ratio: 1.25, oneRepMax: 93 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.5, oneRepMax: 130 },\n      [ExperienceLevel.Advanced]: { ratio: 2.25, oneRepMax: 173 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.75, oneRepMax: 219 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 1, oneRepMax: 78 },\n      [ExperienceLevel.Novice]: { ratio: 1.5, oneRepMax: 112 },\n      [ExperienceLevel.Intermediate]: { ratio: 2, oneRepMax: 152 },\n      [ExperienceLevel.Advanced]: { ratio: 2.5, oneRepMax: 200 },\n      [ExperienceLevel.Vigilante]: { ratio: 3, oneRepMax: 250 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 47 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 70 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 98 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 132 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 169 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 44 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 64 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 89 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 118 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 149 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.4, oneRepMax: 31 },\n      [ExperienceLevel.Novice]: { ratio: 0.55, oneRepMax: 46 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.8, oneRepMax: 64 },\n      [ExperienceLevel.Advanced]: { ratio: 1.05, oneRepMax: 86 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.35, oneRepMax: 109 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 41 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1, oneRepMax: 85 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 115 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.75, oneRepMax: 147 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 30 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.6, oneRepMax: 37 },\n      [ExperienceLevel.Advanced]: { ratio: 0.85, oneRepMax: 68 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.15, oneRepMax: 91 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -13 },\n      [ExperienceLevel.Novice]: { reps: 5, oneRepMax: +8 },\n      [ExperienceLevel.Intermediate]: { reps: 15, oneRepMax: +34 },\n      [ExperienceLevel.Advanced]: { reps: 25, oneRepMax: +63 },\n      [ExperienceLevel.Vigilante]: { reps: 37, oneRepMax: +93 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -8 },\n      [ExperienceLevel.Novice]: { reps: 8, oneRepMax: +18 },\n      [ExperienceLevel.Intermediate]: { reps: 20, oneRepMax: +50 },\n      [ExperienceLevel.Advanced]: { reps: 34, oneRepMax: +86 },\n      [ExperienceLevel.Vigilante]: { reps: 49, oneRepMax: +125 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 18 },\n      [ExperienceLevel.Intermediate]: { reps: 41 },\n      [ExperienceLevel.Advanced]: { reps: 68 },\n      [ExperienceLevel.Vigilante]: { reps: 99 },\n    },\n  },\n  [Gender.Female]: {\n    [Exercise.Squat]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 30 },\n      [ExperienceLevel.Novice]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 73 },\n      [ExperienceLevel.Advanced]: { ratio: 1.5, oneRepMax: 103 },\n      [ExperienceLevel.Vigilante]: { ratio: 2, oneRepMax: 136 },\n    },\n    [Exercise.Deadlift]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.5, oneRepMax: 38 },\n      [ExperienceLevel.Novice]: { ratio: 1, oneRepMax: 60 },\n      [ExperienceLevel.Intermediate]: { ratio: 1.25, oneRepMax: 87 },\n      [ExperienceLevel.Advanced]: { ratio: 1.75, oneRepMax: 120 },\n      [ExperienceLevel.Vigilante]: { ratio: 2.5, oneRepMax: 157 },\n    },\n    [Exercise.Bench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 17 },\n      [ExperienceLevel.Novice]: { ratio: 0.5, oneRepMax: 31 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.75, oneRepMax: 51 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 74 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.5, oneRepMax: 101 },\n    },\n    [Exercise.InclineBench]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 13 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 44 },\n      [ExperienceLevel.Advanced]: { ratio: 1, oneRepMax: 67 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.4, oneRepMax: 93 },\n    },\n    [Exercise.Press]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Novice]: { ratio: 0.35, oneRepMax: 23 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.55, oneRepMax: 34 },\n      [ExperienceLevel.Advanced]: { ratio: 0.75, oneRepMax: 48 },\n      [ExperienceLevel.Vigilante]: { ratio: 1, oneRepMax: 64 },\n    },\n    [Exercise.Row]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.25, oneRepMax: 15 },\n      [ExperienceLevel.Novice]: { ratio: 0.4, oneRepMax: 26 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.65, oneRepMax: 41 },\n      [ExperienceLevel.Advanced]: { ratio: 0.9, oneRepMax: 59 },\n      [ExperienceLevel.Vigilante]: { ratio: 1.2, oneRepMax: 79 },\n    },\n    [Exercise.Curl]: {\n      [ExperienceLevel.Beginner]: { ratio: 0.1, oneRepMax: 6 },\n      [ExperienceLevel.Novice]: { ratio: 0.2, oneRepMax: 14 },\n      [ExperienceLevel.Intermediate]: { ratio: 0.4, oneRepMax: 25 },\n      [ExperienceLevel.Advanced]: { ratio: 0.6, oneRepMax: 39 },\n      [ExperienceLevel.Vigilante]: { ratio: 0.85, oneRepMax: 55 },\n    },\n    [Exercise.Pullup]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -22 },\n      [ExperienceLevel.Novice]: { reps: 3, oneRepMax: -8 },\n      [ExperienceLevel.Intermediate]: { reps: 6, oneRepMax: 10 },\n      [ExperienceLevel.Advanced]: { reps: 15, oneRepMax: 30 },\n      [ExperienceLevel.Vigilante]: { reps: 26, oneRepMax: 51 },\n    },\n    [Exercise.Dip]: {\n      [ExperienceLevel.Beginner]: { reps: 1, oneRepMax: -20 },\n      [ExperienceLevel.Novice]: { reps: 1, oneRepMax: -5 },\n      [ExperienceLevel.Intermediate]: { reps: 10, oneRepMax: +19 },\n      [ExperienceLevel.Advanced]: { reps: 22, oneRepMax: +45 },\n      [ExperienceLevel.Vigilante]: { reps: 35, oneRepMax: +72 },\n    },\n    [Exercise.Pushup]: {\n      [ExperienceLevel.Beginner]: { reps: 1 },\n      [ExperienceLevel.Novice]: { reps: 5 },\n      [ExperienceLevel.Intermediate]: { reps: 19 },\n      [ExperienceLevel.Advanced]: { reps: 37 },\n      [ExperienceLevel.Vigilante]: { reps: 56 },\n    },\n  },\n};\n\nexport const getLiftStandards = (gender: Gender, exercise: Exercise): { [key in ExperienceLevel]?: LiftMetrics } => {\n  const genderStandards = strengthStandards[gender];\n  const liftStandards = genderStandards[exercise]!;\n  return liftStandards;\n};\n\nexport const getLiftLevel = (\n  gender: Gender,\n  lift: Exercise,\n  { oneRepMax, ratio, reps }: LiftMetrics,\n  unitsType = UnitsType.Metric\n): ExperienceLevel => {\n  const liftStandards = getLiftStandards(gender, lift);\n  return (\n    liftStandards &&\n    Object.keys(liftStandards).reduce<ExperienceLevel>((acc, current): ExperienceLevel => {\n      const levelStandards = liftStandards[<ExperienceLevel>current]!;\n\n      const oneRepMaxForComparison = oneRepMax && unitsType === UnitsType.Metric ? oneRepMax : lbsToKg(oneRepMax!);\n      const meetsOneRepMaxBasedStandard = levelStandards.oneRepMax && oneRepMaxForComparison >= levelStandards.oneRepMax;\n      const meetsRatioBasedStandard = ratio && levelStandards.ratio && ratio >= levelStandards.ratio;\n\n      const meetsWeightBasedStandard = meetsRatioBasedStandard || meetsOneRepMaxBasedStandard;\n      const meetsRepBasedStandard = reps && levelStandards.reps && reps >= levelStandards.reps;\n\n      if (meetsWeightBasedStandard || meetsRepBasedStandard) {\n        return <ExperienceLevel>current;\n      }\n\n      return acc;\n    }, ExperienceLevel.Beginner)\n  );\n};\n\nexport const getStrengthLevel = (gender: Gender, everLifted: boolean, strengthStandards: StrengthMetrics): ExperienceLevel => {\n  if (!everLifted) {\n    return ExperienceLevel.Beginner;\n  }\n\n  const level = standardExercises.reduce<ExperienceLevel | undefined>((accLevel, lift) => {\n    const liftStandards = strengthStandards[lift as keyof StrengthMetrics]!;\n    const liftLevel = getLiftLevel(Gender[gender], lift as Exercise, {\n      oneRepMax: liftStandards.oneRepMax,\n      ratio: liftStandards.ratio,\n      reps: liftStandards.reps,\n    });\n    const isLowerStandard =\n      accLevel && Object.values(ExperienceLevel).indexOf(liftLevel) < Object.values(ExperienceLevel).indexOf(accLevel);\n\n    if (liftLevel && (!accLevel || isLowerStandard)) {\n      return liftLevel;\n    }\n\n    return accLevel;\n  }, undefined);\n\n  return level ?? ExperienceLevel.Beginner;\n};\n","import { LiftMetrics, StrengthMetrics, standardExercises } from '../standards';\nimport { Lifts } from '../trainee';\n\nconst formulas: { [key: string]: (weight: number, reps: number) => number } = {\n  epley: (weight, reps) => weight * (1 + reps / 30),\n  brzycki: (weight, reps) => weight * (36 / (37 - reps)),\n  oconner: (weight, reps) => weight * (1 + 0.025 * reps),\n  lombardi: (weight, reps) => weight * reps ** 0.1,\n  wathan: (weight, reps) => (weight * 100) / (48.8 + 53.8 * Math.exp(-1 * (reps * 0.075))),\n  mayhem: (weight, reps) => (weight * 100) / (52.2 + 41.9 * Math.exp(-1 * (reps * 0.055))),\n  lander: (weight, reps) => (weight * 100) / (101.3 - 2.67123 * reps),\n};\n\nexport const calculate1RepMax = (weight: number, reps: number, formula?: keyof typeof formulas): number => {\n  if (reps == 0 || weight == 0) {\n    return 0;\n  }\n\n  if (reps == 1) {\n    return weight;\n  }\n\n  if (formula) {\n    return formulas[formula](weight, reps);\n  }\n\n  const acc = Object.keys(formulas).reduce((acc, current) => {\n    return acc + formulas[current](weight, reps);\n  }, 0);\n\n  return Math.floor(acc / Object.keys(formulas).length);\n};\n\nconst calculatRepMax = (oneRepMax: number, multiplier: number) => {\n  if (oneRepMax < 0) {\n    return Math.floor((Math.abs(oneRepMax) * (1 - multiplier) + Math.abs(oneRepMax)) * -1);\n  }\n\n  return Math.floor(oneRepMax * multiplier);\n};\n\nexport const calculateThreeRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.93);\n\nexport const calculateFiveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.88);\n\nexport const calculateEightRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.8);\n\nexport const calculateTenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.74);\n\nexport const calculateTwelveRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.7);\n\nexport const calculateFithteenRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.66);\n\nexport const calculateTwentyRepMax = (oneRepMax: number) => calculatRepMax(oneRepMax, 0.59);\n\nexport const calculateRepMaxes = (weight: number, reps: number, formula?: keyof typeof formulas): LiftMetrics => {\n  const oneRepMax = calculate1RepMax(weight, reps, formula);\n  return {\n    oneRepMax,\n    threeRepMax: calculateThreeRepMax(oneRepMax),\n    fiveRepMax: calculateFiveRepMax(oneRepMax),\n    eightRepMax: calculateEightRepMax(oneRepMax),\n    tenRepMax: calculateTenRepMax(oneRepMax),\n    twelveRepMax: calculateTwelveRepMax(oneRepMax),\n    fithteenRepMax: calculateFithteenRepMax(oneRepMax),\n    twentyRepMax: calculateTwentyRepMax(oneRepMax),\n  };\n};\n\nexport const calculateStrengthStandards = (weight: number, lifts: Lifts): StrengthMetrics =>\n  standardExercises.reduce((acc, key: string) => {\n    const lift = lifts[key as keyof Lifts];\n    if (!lift) return acc;\n\n    const repMaxes = calculateRepMaxes(lift.weight, lift.reps);\n    return {\n      ...acc,\n      [key]: {\n        ...repMaxes,\n        ratio: Math.round((repMaxes.oneRepMax! / weight) * 100) / 100,\n      },\n    };\n  }, {});\n","import { ActivityLevel, DietType, ExperienceLevel, Gender, Goal, UnitsType, WeekDay } from '../constants';\nimport { Exercise } from '../exercises';\nimport { getNutritionRecommendation, NutritionType } from '../nutrition';\nimport { getProgramRecommendations } from '../programs';\nimport { calculateStrengthStandards, getSpeedLevel, getStrengthLevel, SpeedMetrics, StrengthMetrics } from '../standards';\nimport { getNextLiftTargets, getNextSpeedTargets } from './targets';\n\nexport interface Trainee {\n  preferedUnitsType: keyof typeof UnitsType;\n\n  gender: keyof typeof Gender;\n  age: number;\n  weight: number;\n  height: number;\n  waist: number;\n  bodyFat: number;\n\n  bestMileRunTime: number;\n  bestfiveKmRunTime: number;\n  maxPushUps: number;\n  maxPullUps: number;\n  hasLifted: boolean;\n  currentLifts: Lifts;\n\n  activityLevel: keyof typeof ActivityLevel;\n  primaryGoal: keyof typeof Goal;\n  secondaryGoal: keyof typeof Goal;\n\n  preferedDietType: keyof typeof DietType;\n  preferedWeekStart: keyof typeof WeekDay;\n  preferedNumberOfWorkoutsPerWeek: number;\n  preferedWorkoutDuration: number;\n  preferedWorkoutDays: Array<keyof typeof WeekDay>;\n  prefersProgramHoping: boolean;\n  prefersMinimalLegs: boolean;\n\n  needsMetabolicReset: boolean;\n  prefersCycledNutrition: boolean;\n  prefersHigherCaloriesOnWeekends: boolean;\n  prefersAggressiveCut: boolean;\n}\n\nexport type LiftAttempt = { weight: number; reps: number; targetReps?: number; fails?: number };\n\nexport type Lifts = {\n  [key in Exercise]?: LiftAttempt;\n};\n\nexport interface TraineeMetrics {\n  strengthMetrics: StrengthMetrics;\n  strengthLevel: ExperienceLevel;\n  speedMetrics: SpeedMetrics;\n  speedLevel: ExperienceLevel;\n}\n\nexport const getTraineeMetrics = (trainee: Trainee): TraineeMetrics => {\n  const { gender, weight, currentLifts, hasLifted, bestMileRunTime, bestfiveKmRunTime } = trainee;\n\n  const strengthMetrics = calculateStrengthStandards(weight, currentLifts);\n  const strengthLevel = getStrengthLevel(Gender[gender], hasLifted, strengthMetrics);\n\n  const speedMetrics: SpeedMetrics = { mileRun: bestMileRunTime, fiveKmRun: bestfiveKmRunTime };\n  const speedLevel = getSpeedLevel(Gender[gender], bestMileRunTime, bestfiveKmRunTime);\n\n  return { strengthMetrics, strengthLevel, speedLevel, speedMetrics };\n};\n\nexport const getTraineeRecommendations = (trainee: Trainee, traineeMetrics: TraineeMetrics) => {\n  const {\n    gender,\n    primaryGoal,\n    secondaryGoal,\n    preferedNumberOfWorkoutsPerWeek,\n    preferedWorkoutDuration,\n    bodyFat,\n    preferedUnitsType,\n    weight,\n    height,\n    age,\n    activityLevel,\n    needsMetabolicReset,\n    prefersHigherCaloriesOnWeekends,\n    prefersCycledNutrition,\n    prefersAggressiveCut,\n  } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n\n  const recommendedPrograms = getProgramRecommendations({\n    gender: Gender[gender],\n    strengthLevel: strengthLevel!,\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    maxDaysPerWeek: preferedNumberOfWorkoutsPerWeek,\n    maxWorkoutDuration: preferedWorkoutDuration,\n    speedLevel: speedLevel!,\n  });\n\n  const recommendedNutrition = getNutritionRecommendation({\n    gender: Gender[gender],\n    weight: weight,\n    height: height,\n    age: age,\n    unitsType: UnitsType[preferedUnitsType],\n    bodyFat: bodyFat,\n    activityLevel: ActivityLevel[activityLevel],\n    primaryGoal: Goal[primaryGoal],\n    secondaryGoal: Goal[secondaryGoal],\n    needsMetabolicReset: needsMetabolicReset,\n    higherCaloriesOnWeekends: prefersHigherCaloriesOnWeekends,\n    cycleNutrition: prefersCycledNutrition,\n    numberOfWorkoutDays: preferedNumberOfWorkoutsPerWeek, // @TODO should be the selected program\n    preferAggressiveCut: prefersAggressiveCut,\n  });\n\n  const speedTargets = speedMetrics && getNextSpeedTargets(Gender[gender], speedMetrics);\n\n  const liftTargets = getNextLiftTargets(Gender[gender], strengthMetrics, weight);\n\n  const bodyFatTarget =\n    bodyFat > 10 && recommendedNutrition && [NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type)\n      ? bodyFat - 5\n      : undefined;\n\n  return { bodyFatTarget, liftTargets, speedTargets, recommendedNutrition, recommendedPrograms };\n};\n","import { ExperienceLevel, Gender } from '../constants';\nimport { Exercise } from '../exercises';\nimport { calculateFiveRepMax, getLiftStandards, getSpeedStandards, SpeedMetrics, StrengthMetrics } from '../standards';\n\nexport const getNextSpeedTargets = (gender: Gender, speedMetrics: SpeedMetrics): SpeedMetrics => {\n  const standards = getSpeedStandards(gender);\n  const mileRun = speedMetrics.mileRun ? speedMetrics.mileRun - 0.5 : standards[ExperienceLevel.Beginner]!.mileRun;\n  const fiveKmRun = speedMetrics.fiveKmRun ? speedMetrics.fiveKmRun - 1.5 : standards[ExperienceLevel.Beginner]!.fiveKmRun;\n\n  return { mileRun, fiveKmRun };\n};\n\nexport const getNextLiftTargets = (gender: Gender, lifterStandards: StrengthMetrics, weight: number): StrengthMetrics => {\n  const getLiftTarget = (exercise: Exercise) => {\n    const standards = getLiftStandards(gender, exercise);\n    const currentLift = lifterStandards[exercise];\n\n    if (!currentLift) {\n      const levelStandard = standards[ExperienceLevel.Beginner]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (levelRatio < levelOneRepMax) {\n        return { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n      } else {\n        return { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n      }\n    }\n\n    let target = { oneRepMax: currentLift.oneRepMax! + 10, fiveRepMax: calculateFiveRepMax(currentLift.oneRepMax! + 10) };\n\n    const levels = Object.keys(standards);\n    for (const level of levels) {\n      const levelStandard = standards[level as keyof typeof standards]!;\n      const levelOneRepMax = levelStandard.oneRepMax!;\n      const levelRatio = Math.round(weight * levelStandard.ratio!);\n      if (\n        levelOneRepMax < levelRatio &&\n        levelOneRepMax > currentLift.oneRepMax! &&\n        levelOneRepMax - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelOneRepMax, fiveRepMax: calculateFiveRepMax(levelOneRepMax) };\n        break;\n      } else if (\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio > currentLift.oneRepMax! &&\n        levelRatio - currentLift.oneRepMax! < 15\n      ) {\n        target = { oneRepMax: levelRatio, ratio: levelStandard.ratio, fiveRepMax: calculateFiveRepMax(levelRatio) };\n        break;\n      }\n    }\n\n    return target;\n  };\n\n  return {\n    [Exercise.Bench]: getLiftTarget(Exercise.Bench),\n    [Exercise.Squat]: getLiftTarget(Exercise.Squat),\n    [Exercise.Deadlift]: getLiftTarget(Exercise.Deadlift),\n    [Exercise.Press]: getLiftTarget(Exercise.Press),\n    [Exercise.Row]: getLiftTarget(Exercise.Row),\n  };\n};\n","import dayjs from 'dayjs';\n\nimport { getDateOfWeekday, getNextWorkoutDay } from '../../utils/calendar';\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { Program, Workout } from '../programs/interfaces';\n\nexport interface ScheduledWorkout extends Workout {\n  id: number;\n  date: Date;\n  status?: 'pending' | 'done' | 'in progress';\n}\n\nexport type ScheduleAction =\n  | 'create'\n  | 'start_workout'\n  | 'end_workout'\n  | 'change_set_weight'\n  | 'change_set_reps'\n  | 'complete_set';\n\nexport const scheduleReducer = (schedule: ScheduledWorkout[], action: { type: ScheduleAction; payload: any }) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'create':\n      return createSchedule(payload.program, payload.experienceLevel, payload.weekStart);\n    case 'start_workout':\n      schedule[payload.id].status = 'in progress';\n      return [...schedule];\n    case 'end_workout':\n      markAllSetsAsComplete(schedule, payload.id);\n      schedule[payload.id].status = 'done';\n      return [...schedule];\n    case 'change_set_weight':\n      schedule[payload.id].routine[payload.exerciseId].sets[payload.setId].weight = payload.value;\n      return [...schedule];\n    case 'change_set_reps':\n      schedule[payload.id].routine[payload.exerciseId].sets[payload.setId].reps = payload.value;\n      return [...schedule];\n    case 'complete_set':\n      schedule = updateWorkoutWithCompletedSet(\n        schedule,\n        payload.id,\n        payload.exerciseId,\n        payload.setId,\n        payload.isWarmup,\n        payload.recommendedWeight\n      );\n      return [...schedule];\n    default:\n      throw new Error();\n  }\n};\n\nexport const createSchedule = (program: Program, experienceLevel: ExperienceLevel, weekStart: WeekDay = WeekDay.Monday) => {\n  // @TODO configurable per program, A/B splits should can be false\n  const firstWorkoutMustBeOnWeekStart = false;\n  const workouts = program.workouts(experienceLevel);\n  let totalWorkouts: number = program.daysPerWeek * program.duration;\n  let workoutWeeklyIndex = 0;\n  let date: Date | undefined = firstWorkoutMustBeOnWeekStart\n    ? getDateOfWeekday(weekStart, new Date(), false)\n    : getNextWorkoutDay(program.weeklySchedule, weekStart);\n\n  const schedule: ScheduledWorkout[] = [];\n  while (totalWorkouts > 0) {\n    schedule.push({\n      id: schedule.length,\n      date,\n      status: 'pending',\n      ...workouts[workoutWeeklyIndex],\n    });\n    date = getNextWorkoutDay(program.weeklySchedule, weekStart, date);\n    totalWorkouts--;\n    workoutWeeklyIndex++;\n    if (workoutWeeklyIndex === workouts.length) {\n      workoutWeeklyIndex = 0;\n    }\n  }\n\n  return schedule;\n};\n\nexport const getTodaysWorkout = (schedule: ScheduledWorkout[]): ScheduledWorkout | undefined => {\n  return schedule.find((item) => new Date(item.date).setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));\n};\n\nexport const getScheduledForThisWeek = (schedule: ScheduledWorkout[]): ScheduledWorkout[] => {\n  return schedule.filter((entry) => dayjs().isSame(entry.date, 'week')) || [];\n};\n\nexport const markAllSetsAsComplete = (schedule: ScheduledWorkout[], workoutId: number) => {\n  schedule[workoutId].routine.forEach((exercise, exerciseId) => {\n    exercise.warmup?.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, true));\n    exercise.sets.forEach((set, setId) => updateWorkoutWithCompletedSet(schedule, workoutId, exerciseId, setId, false));\n  });\n};\n\nexport const updateWorkoutWithCompletedSet = (\n  schedule: ScheduledWorkout[],\n  workoutId: number,\n  exerciseId: number,\n  setId: number,\n  isWarmup: boolean,\n  recommendedWeight?: number\n) => {\n  if (isWarmup) {\n    const warmup = schedule[workoutId].routine[exerciseId].warmup![setId];\n    if (!warmup.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].warmup![setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].warmup![setId].status = 'done';\n  } else {\n    const set = schedule[workoutId].routine[exerciseId].sets[setId];\n    if (!set.reps) {\n      schedule[workoutId].routine[exerciseId].sets[setId].reps = set.maxReps ?? set.targetReps;\n    }\n    if (!set.weight && recommendedWeight) {\n      schedule[workoutId].routine[exerciseId].sets[setId].weight = recommendedWeight;\n    }\n    schedule[workoutId].routine[exerciseId].sets[setId].status = 'done';\n  }\n\n  return schedule;\n};\n","import { useStoredReducer, useStoredState } from 'react-native-use-stored-state';\n\nimport { ExperienceLevel, WeekDay } from '../constants';\nimport { getProgram } from '../programs';\nimport { getTodaysWorkout, ScheduleAction, ScheduledWorkout, scheduleReducer } from './schedule';\n\nimport { Trainee } from './trainee';\n\nexport type UpdateTraineeFn = <K extends keyof Trainee>(field: K, value: Trainee[K]) => void;\n\nexport type TraineeReducerAction = 'set_data';\n\nexport const traineeReducer = (\n  formData: Trainee,\n  action: { type: TraineeReducerAction; payload: { field: keyof Trainee; value: string | number | boolean } }\n) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'set_data':\n      const { field, value } = payload;\n      return { ...formData, [field]: value };\n    default:\n      throw new Error();\n  }\n};\n\nconst defaultTrainee = <Trainee>{\n  preferedUnitsType: 'Metric',\n  gender: 'Male',\n  activityLevel: 'Sedentary',\n  bodyFat: 20,\n  primaryGoal: 'Lean',\n  secondaryGoal: 'Strength',\n  preferedDietType: 'Balanced',\n  preferedWeekStart: 'Monday',\n  preferedNumberOfWorkoutsPerWeek: 3,\n  preferedWorkoutDuration: 60,\n  preferedWorkoutDays: ['Monday', 'Wednesday', 'Friday'],\n  prefersProgramHoping: false,\n  prefersMinimalLegs: false,\n  prefersCycledNutrition: false,\n  prefersHigherCaloriesOnWeekends: false,\n  prefersAggressiveCut: false,\n};\n\nexport const useTrainee = () => {\n  const [trainee, dispatch, traineeLoaded, resetTrainee] = useStoredReducer<Trainee, TraineeReducerAction>(\n    'TRAINEE_1.0.0',\n    traineeReducer,\n    defaultTrainee\n  );\n\n  const updateTrainee: UpdateTraineeFn = (field, value) => {\n    dispatch({ type: 'set_data', payload: { field, value } });\n  };\n\n  return { trainee, updateTrainee, traineeLoaded, resetTrainee };\n};\n\nexport const useActiveProgram = () => {\n  const [activeProgram, setActiveProgram, activeProgramLoaded, unsetIsActive] = useStoredState<string>('ACTIVE_PROGRAM_1.0.0');\n  const [schedule, updateSchedule, scheduleLoaded, unsetSchedule] = useStoredReducer<ScheduledWorkout[], ScheduleAction>(\n    'ACTIVE_SCHEDULE_1.0.0',\n    scheduleReducer\n  );\n\n  const program = activeProgram ? getProgram(activeProgram) : undefined;\n  const todaysWorkout = schedule ? getTodaysWorkout(schedule) : undefined;\n\n  const initialiseProgram = (id: string, experienceLevel: ExperienceLevel, weekStart: WeekDay) => {\n    updateSchedule({ type: 'create', payload: { program: getProgram(id), experienceLevel, weekStart } });\n    setActiveProgram(id);\n  };\n\n  const resetProgram = () => {\n    unsetIsActive();\n    unsetSchedule();\n  };\n\n  return {\n    activeProgramLoaded: scheduleLoaded && activeProgramLoaded,\n    active: !!program,\n    schedule,\n    updateSchedule,\n    program,\n    initialiseProgram,\n    todaysWorkout,\n    resetProgram,\n  };\n};\n","import { useStoredState } from 'react-native-use-stored-state';\n\nimport { ScheduledWorkout } from './schedule';\n\nexport interface LoggedWorkout extends ScheduledWorkout {\n  datePerformed: Date;\n  program: string;\n}\n\nexport const useLog = () => {\n  const [workoutLog = [], setWorkoutLog, workoutLogLoaded, removeWorkoutLog] = useStoredState<LoggedWorkout[]>('LOG_WORKOUTS');\n\n  const logWorkout = (workout: ScheduledWorkout, program: string) => {\n    setWorkoutLog([\n      { ...workout, datePerformed: new Date(), program },\n      // spread at the end to force reverse order\n      ...(workoutLog ?? []),\n    ]);\n  };\n\n  const resetLog = () => {\n    removeWorkoutLog();\n  };\n\n  return {\n    logLoaded: workoutLogLoaded,\n    workoutLog,\n    logWorkout,\n    resetLog,\n  };\n};\n","import { Box, HStack, Heading, Text, useTheme } from 'native-base';\n\nexport const DashboardHeading = ({ heading }: { heading: string }) => (\n  <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n    {heading}\n  </Heading>\n);\n\nexport const DashboardCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  const { colors } = useTheme();\n  return (\n    <Box marginY={2}>\n      {heading && <DashboardHeading heading={heading} />}\n      <Box padding={3} rounded={'lg'} backgroundColor={colors.white}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport const DashboardLabel = ({ children }: { children: React.ReactNode }) => <Text bold>{children}</Text>;\n\nexport const DashboardDetail = ({ label, value }: { label: string; value: string | number }) => (\n  <HStack paddingY={1} justifyContent={'space-between'} alignItems={'center'}>\n    <DashboardLabel>{label}:</DashboardLabel>\n    <Text>{value}</Text>\n  </HStack>\n);\n","import { Checkbox, HStack, Text } from 'native-base';\nimport RNPickerSelect from 'react-native-picker-select';\n\ntype StringEnum = { [key: string]: string };\n\nexport const Select = ({\n  onValueChange,\n  selectedValue,\n  items,\n}: {\n  onValueChange: (value: string) => void;\n  selectedValue: any;\n  items: { label: string; value: any }[];\n}) => {\n  return <RNPickerSelect onValueChange={(value) => onValueChange(value)} value={selectedValue || ''} items={items} />;\n};\n\nexport const EnumSelect = <E extends StringEnum>({\n  Enum,\n  selectedValue,\n  onValueChange,\n}: {\n  Enum: E;\n  selectedValue: keyof E | undefined;\n  onValueChange: (newValue: keyof E) => void;\n}) => {\n  const items = Object.keys(Enum).map((key) => ({ label: Enum[key], value: key }));\n  return (\n    <Select\n      onValueChange={(value: string) => onValueChange(value as keyof E)}\n      selectedValue={selectedValue ?? ''}\n      items={items}\n    />\n  );\n};\n\nexport const EnumMultiSelect = <E extends StringEnum>({\n  Enum,\n  selectedValues,\n  onChange,\n  accessibilityLabel,\n}: {\n  Enum: E;\n  selectedValues: Array<keyof E>;\n  onChange: (newValues: Array<keyof E>) => void;\n  accessibilityLabel: string;\n}) => (\n  <Checkbox.Group\n    defaultValue={(selectedValues ?? []) as string[]}\n    accessibilityLabel={accessibilityLabel ?? ''}\n    onChange={(values) => {\n      onChange((values || []) as Array<keyof E>);\n    }}\n  >\n    <HStack space={2} flexWrap={'wrap'}>\n      {Object.keys(Enum).map((key: string) => (\n        <Checkbox key={key} value={key} my=\"1\" size={'sm'}>\n          <Text fontSize={'xs'}>{Enum[key]}</Text>\n        </Checkbox>\n      ))}\n    </HStack>\n  </Checkbox.Group>\n);\n","import { Box, HStack, VStack } from 'native-base';\n\nimport { DashboardCard } from '../Dashboards';\n\nexport * from './Select';\n\nexport const FormCard = ({ children, heading }: { children: React.ReactNode; heading?: string }) => {\n  return <DashboardCard heading={heading}>{children}</DashboardCard>;\n};\n\nexport const InlineField = ({ children, allowWrap = false }: { children: React.ReactNode; allowWrap?: boolean }) => (\n  <HStack paddingBottom={1} justifyContent={'space-between'} alignItems={'center'} flexWrap={allowWrap ? 'wrap' : 'nowrap'}>\n    {children}\n  </HStack>\n);\n\nexport const StackedField = ({ children }: { children: React.ReactNode }) => <VStack paddingBottom={1}>{children}</VStack>;\n\nexport const BottomButtonsBox = ({ children }: { children: React.ReactNode }) => (\n  <Box marginTop={'auto'} marginBottom={2}>\n    {children}\n  </Box>\n);\n","import { HStack, Image, Radio, VStack } from 'native-base';\nimport { ImageSourcePropType } from 'react-native';\nimport { Gender } from '../../../domain/constants';\n\nconst BodyFatImageMap: {\n  [key in Gender]: { [key: number]: ImageSourcePropType };\n} = {\n  [Gender.Male]: {\n    10: require('./Male10.png'),\n    15: require('./Male15.png'),\n    20: require('./Male20.png'),\n    25: require('./Male25.png'),\n    30: require('./Male30.png'),\n  },\n  [Gender.Female]: {\n    10: require('./Female10.png'),\n    15: require('./Female15.png'),\n    20: require('./Female20.png'),\n    25: require('./Female25.png'),\n    30: require('./Female30.png'),\n  },\n};\n\nexport const BodyFatSelector = ({\n  gender,\n  bodyFat,\n  setBodyFat,\n}: {\n  gender: keyof typeof Gender;\n  bodyFat: number;\n  setBodyFat: (newvalue: number) => void;\n}) => {\n  return (\n    <Radio.Group\n      name=\"bodyFat\"\n      accessibilityLabel=\"select your approximate bodyfat percentage\"\n      value={bodyFat?.toString()}\n      onChange={(value) => {\n        setBodyFat(Number(value));\n      }}\n    >\n      {gender && (\n        <HStack alignItems={'center'} space={1}>\n          {['10', '15', '20', '25', '30'].map((percent) => (\n            <VStack key={`${gender}-${percent}`}>\n              <Image\n                size={'sm'}\n                resizeMode={'contain'}\n                alt={'Welcome'}\n                source={BodyFatImageMap[gender as keyof typeof Gender][Number(percent)]}\n              />\n              <Radio value={percent} my={1} size={'sm'}>\n                {`${percent}%`}\n              </Radio>\n            </VStack>\n          ))}\n        </HStack>\n      )}\n    </Radio.Group>\n  );\n};\n","import { HStack, Input, Text } from 'native-base';\nimport { useEffect, useState } from 'react';\nimport { UnitsType } from '../../../domain/constants';\nimport { feetToInches, inchesToFeet } from '../../../utils/measurements';\n\nexport const HeightInput = ({\n  height,\n  unitsType,\n  setHeight,\n}: {\n  height: number;\n  unitsType: UnitsType;\n  setHeight: (newvalue: number) => void;\n}) => {\n  return (\n    <>\n      {unitsType === UnitsType.Imperial ? (\n        <ImperialHeightInput height={height} setHeight={setHeight} />\n      ) : (\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={height?.toString() || ''}\n          onChangeText={(value: string) => setHeight(Number(value))}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ImperialHeightInput = ({ height, setHeight }: { height: number; setHeight: (newvalue: number) => void }) => {\n  const [feet, setFeet] = useState<number>();\n  const [inches, setInches] = useState<number>();\n\n  const onSetHeight = () => {\n    if (feet && inches) {\n      const heightInInches = feetToInches(feet) + inches;\n      setHeight(heightInInches);\n    }\n  };\n\n  useEffect(() => {\n    if (height) {\n      const converted = inchesToFeet(height);\n      const feet = Math.floor(converted);\n      const inches = Math.round(feetToInches(converted - feet));\n      setFeet(feet);\n      setInches(inches);\n    }\n  }, []);\n\n  useEffect(() => {\n    onSetHeight();\n  }, [feet, inches]);\n\n  return (\n    <HStack alignItems={'center'}>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={feet?.toString()}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setFeet(Number(value));\n        }}\n      />\n      <Text>{'ft'}</Text>\n      <Input\n        textAlign={'right'}\n        width={50}\n        keyboardType={'number-pad'}\n        value={inches?.toString()}\n        marginX={1}\n        onChangeText={(value: string) => {\n          setInches(Number(value));\n        }}\n      />\n      <Text>{'in'}</Text>\n    </HStack>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { BodyFatSelector } from '../../components/Forms/BodyFatSelector';\nimport { HeightInput } from '../../components/Forms/HeightInput';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\nimport { getCircumferenceLabel, getHeightLabel, getWeightLabel } from '../../utils/measurements';\n\nexport const AboutYou = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { age, weight, height, waist, gender, bodyFat, preferedUnitsType } = trainee;\n  const unitsType = UnitsType[preferedUnitsType];\n  return (\n    <FormCard heading={t('About You')}>\n      <InlineField>\n        <Text>{t('Gender')}</Text>\n        <EnumSelect\n          Enum={Gender}\n          selectedValue={gender}\n          onValueChange={(value: keyof typeof Gender) => updateTrainee('gender', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your age')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={age?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('age', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your height ({{unitLabel}})', { unitLabel: getHeightLabel(unitsType) })}</Text>\n        <HeightInput unitsType={unitsType} height={height} setHeight={(value: number) => updateTrainee('height', value)} />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your current weight ({{unitLabel}})', { unitLabel: getWeightLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={weight?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('weight', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Your waist circumference ({{unitLabel}})', { unitLabel: getCircumferenceLabel(unitsType) })}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'number-pad'}\n          value={waist?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('waist', Number(value))}\n        />\n      </InlineField>\n      <InlineField allowWrap>\n        <Text>{t('Bodyfat (%)')}</Text>\n        <BodyFatSelector\n          gender={gender}\n          bodyFat={bodyFat}\n          setBodyFat={(value: number) => updateTrainee('bodyFat', Number(value))}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Box, ScrollView, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { ExperienceLevel, Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { getLiftStandards, getSpeedStandards, LiftMetrics, SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { formatDecimalMins, getWeightLabel } from '../../utils/measurements';\nimport { Table, TableHeader, TableRow } from '../Content';\n\nexport const StrengthStandardsComparison = ({\n  gender,\n  standards,\n  unitsType,\n}: {\n  gender: Gender;\n  standards: StrengthMetrics;\n  unitsType: UnitsType;\n}) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={700}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Exercice', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            {Object.keys(standards).map((exercise) => {\n              const lift: LiftMetrics = standards[exercise]!;\n              const liftStandards = getLiftStandards(gender, exercise as Exercise);\n\n              if (!liftStandards) {\n                return;\n              }\n\n              const getCellContent = ({ oneRepMax, ratio, reps }: LiftMetrics, isStandard = false) => {\n                if (isStandard) {\n                  if (reps) {\n                    return `${reps} reps`;\n                  }\n                  return `${oneRepMax}${weightLabel} or ${ratio}x`;\n                }\n\n                if (reps) {\n                  return `${reps} reps`;\n                }\n                return oneRepMax ? `${oneRepMax}${weightLabel}/${ratio}x` : '-';\n              };\n\n              return (\n                <TableRow\n                  key={exercise}\n                  values={[\n                    { content: exercise, sideBorder: true },\n                    { content: getCellContent(lift), textAlign: 'center', sideBorder: true },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Beginner]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Novice]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Intermediate]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Advanced]!, true),\n                      textAlign: 'center',\n                      sideBorder: true,\n                    },\n                    {\n                      content: getCellContent(liftStandards[ExperienceLevel.Vigilante]!, true),\n                      textAlign: 'center',\n                    },\n                  ]}\n                />\n              );\n            })}\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          'Note: Weights are calculated 1 Rep Maxes (using the average of multiple formulas - Epley, O&apos;Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight. Standards are sourced from strengthlevel.com'\n        )}\n      </Text>\n    </>\n  );\n};\n\nexport const SpeedtandardsComparison = ({ gender, standards }: { gender: Gender; standards: SpeedMetrics }) => {\n  const { t } = useTranslation();\n  const genderStandards = getSpeedStandards(gender);\n  return (\n    <>\n      <ScrollView horizontal showsHorizontalScrollIndicator>\n        <Box minWidth={575}>\n          <Table>\n            <TableHeader\n              headings={[\n                { content: 'Distance', textAlign: 'left', sideBorder: true },\n                { content: 'You', sideBorder: true },\n                { content: 'Average Joe', sideBorder: true },\n                { content: 'Novice', sideBorder: true },\n                { content: 'Intermediate', sideBorder: true },\n                { content: 'Advanced', sideBorder: true },\n                { content: 'Vigilante' },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: 'Mile Run', sideBorder: true },\n                {\n                  content: standards.mileRun ? formatDecimalMins(standards.mileRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.mileRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.mileRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n            <TableRow\n              values={[\n                { content: '5k Run', sideBorder: true },\n                {\n                  content: standards.fiveKmRun ? formatDecimalMins(standards.fiveKmRun) : '-',\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Beginner]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Novice]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Intermediate]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Advanced]!.fiveKmRun),\n                  textAlign: 'center',\n                  sideBorder: true,\n                },\n                {\n                  content: formatDecimalMins(genderStandards[ExperienceLevel.Vigilante]!.fiveKmRun),\n                  textAlign: 'center',\n                },\n              ]}\n            />\n          </Table>\n        </Box>\n      </ScrollView>\n      <Text fontSize={'2xs'} italic>\n        {t('Note: Standards are sourced from runninglevel.com')}\n      </Text>\n    </>\n  );\n};\n","import { t } from 'i18next';\nimport { Input, Text } from 'native-base';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { calculateStrengthStandards, standardExercises, StrengthStandards } from '../../domain/standards';\nimport { LiftAttempt, Lifts } from '../../domain/trainee';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { Table, TableCell, TableHeader, TableRow } from '../Content';\n\nexport const LiftingStandardsCalculator = ({\n  unitsType,\n  weight,\n  lifts = {},\n  setLifts,\n}: {\n  unitsType: UnitsType;\n  weight: number;\n  lifts: Lifts;\n  setLifts: (newLifts: Lifts) => void;\n}) => {\n  const { t } = useTranslation();\n\n  const standards = useMemo(() => weight && lifts && calculateStrengthStandards(weight, lifts), [lifts, weight]);\n\n  const onChange = (lift: Exercise, attr: keyof LiftAttempt, value: number) => {\n    setLifts({\n      ...lifts,\n      [lift]: { ...lifts[lift as Exercise], [attr]: value },\n    });\n  };\n\n  const weightLabel = getWeightLabel(unitsType);\n  const headings = [\n    { content: 'Exercise', textAlign: 'left' },\n    { content: `Weight (${weightLabel})` },\n    { content: 'Reps' },\n    { content: '1RM', textAlign: 'right' },\n    { content: '5RM', textAlign: 'right' },\n    { content: 'Ratio', textAlign: 'right' },\n  ];\n  const cellWidth = `${100 / headings.length}%`;\n\n  return (\n    <>\n      <Table>\n        <TableHeader headings={headings} />\n        {standardExercises.map((lift) => {\n          const calculated = standards?.[lift];\n          return (\n            <TableRow key={lift}>\n              <TableCell width={cellWidth} content={lift} />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'decimal-pad'}\n                    value={lifts?.[lift as Exercise]?.weight?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'weight', value)}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                content={\n                  <Input\n                    textAlign={'right'}\n                    width={'95%'}\n                    keyboardType={'number-pad'}\n                    value={lifts?.[lift as Exercise]?.reps?.toString() || ''}\n                    onChangeText={(value: string) => onChange(lift, 'reps', value)}\n                  />\n                }\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.oneRepMax ? `${calculated.oneRepMax}${weightLabel}` : ''}\n              />\n              <TableCell\n                width={cellWidth}\n                textAlign={'right'}\n                content={calculated?.fiveRepMax ? `${calculated.fiveRepMax}${weightLabel}` : ''}\n              />\n              <TableCell width={cellWidth} textAlign={'right'} content={calculated?.ratio ? `${calculated.ratio}x` : ''} />\n            </TableRow>\n          );\n        })}\n      </Table>\n      <Text fontSize={'2xs'} italic>\n        {t(\n          \"Rep Maxes are calculated using the average of multiple formulas (Epley, O'Conner, Brzycki and more), ratios are multiples of 1RM to bodyweight\"\n        )}\n      </Text>\n    </>\n  );\n};\n","import { Input, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingStandardsCalculator } from '../../components/Standards';\nimport { ActivityLevel, UnitsType } from '../../domain/constants';\nimport { Lifts, Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Activity = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const {\n    activityLevel,\n    bestMileRunTime,\n    bestfiveKmRunTime,\n    maxPushUps,\n    maxPullUps,\n    hasLifted,\n    preferedUnitsType,\n    currentLifts,\n    weight,\n  } = trainee;\n  return (\n    <FormCard heading={t('Your current activity')}>\n      <InlineField>\n        <Text>{t('General daily activity')}</Text>\n        <EnumSelect\n          Enum={ActivityLevel}\n          selectedValue={activityLevel}\n          onValueChange={(value: keyof typeof ActivityLevel) => updateTrainee('activityLevel', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Mile run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestMileRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestMileRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('5k run time (mins)')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={bestfiveKmRunTime?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('bestfiveKmRunTime', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many push ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPushUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPushUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('How many pull ups can you do?')}</Text>\n        <Input\n          textAlign={'right'}\n          width={50}\n          keyboardType={'decimal-pad'}\n          value={maxPullUps?.toString() || ''}\n          onChangeText={(value: string) => updateTrainee('maxPullUps', Number(value))}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Ever done barbell lifting?')}</Text>\n        <Select\n          selectedValue={hasLifted ? 'yes' : 'no'}\n          onValueChange={(value: string) => updateTrainee('hasLifted', value === 'yes')}\n          items={[\n            { value: 'yes', label: 'yes' },\n            { value: 'no', label: 'no' },\n          ]}\n        />\n      </InlineField>\n      {hasLifted && (\n        <LiftingStandardsCalculator\n          unitsType={UnitsType[preferedUnitsType]}\n          lifts={currentLifts}\n          weight={weight}\n          setLifts={(newLifts: Lifts) => {\n            updateTrainee('currentLifts', newLifts);\n          }}\n        />\n      )}\n    </FormCard>\n  );\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { UnitsType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Configuration = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferedUnitsType } = trainee;\n  return (\n    <FormCard heading={t('Configuration')}>\n      <InlineField>\n        <Text>{t('Units')}</Text>\n        <EnumSelect\n          Enum={UnitsType}\n          selectedValue={preferedUnitsType}\n          onValueChange={(value: keyof typeof UnitsType) => updateTrainee('preferedUnitsType', value)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { DietType } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Nutrition = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferedDietType, prefersHigherCaloriesOnWeekends, prefersCycledNutrition, needsMetabolicReset } = trainee;\n  return (\n    <FormCard heading={t('Your current nutrition and preferences')}>\n      <InlineField>\n        <Text>{'Eating style'}</Text>\n        <EnumSelect\n          Enum={DietType}\n          selectedValue={preferedDietType}\n          onValueChange={(value: keyof typeof DietType) => updateTrainee('preferedDietType', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Have you been \"dieting\" on low calories for a long time without results?')}</Text>\n        <Switch\n          size=\"sm\"\n          isChecked={needsMetabolicReset}\n          onValueChange={(checked: boolean) => updateTrainee('needsMetabolicReset', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumSelect, FormCard, InlineField } from '../../components/Forms';\nimport { Goal } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Preferences = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { primaryGoal, secondaryGoal, prefersMinimalLegs, prefersProgramHoping } = trainee;\n  return (\n    <FormCard heading={'Your goals and preferences'}>\n      <InlineField>\n        <Text>{t('Primary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={primaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('primaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Secondary Goal')}</Text>\n        <EnumSelect\n          Enum={Goal}\n          selectedValue={secondaryGoal}\n          onValueChange={(value: keyof typeof Goal) => updateTrainee('secondaryGoal', value)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Mix it up often:')}</Text>{' '}\n          {t('If you get bored easily, this will cycle you through appropriate programs more often')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersProgramHoping}\n          onValueChange={(checked: boolean) => updateTrainee('prefersProgramHoping', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Minimal legs:')}</Text>{' '}\n          {t(\n            'For those not keen on squatting heavy and often, or those who just do not want big legs and rather keep them strong and athletic'\n          )}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersMinimalLegs}\n          onValueChange={(checked: boolean) => updateTrainee('prefersMinimalLegs', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { Alert, HStack, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { EnumMultiSelect, EnumSelect, FormCard, InlineField, Select, StackedField } from '../../components/Forms';\nimport { WeekDay } from '../../domain/constants';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const Scheduling = ({ trainee, updateTrainee }: { trainee: Trainee; updateTrainee: UpdateTraineeFn }) => {\n  const { t } = useTranslation();\n  const { preferedWeekStart, preferedNumberOfWorkoutsPerWeek, preferedWorkoutDuration, preferedWorkoutDays } = trainee;\n  return (\n    <FormCard heading={'Scheduling & Progression'}>\n      <Alert status={'info'} colorScheme={'info'}>\n        <HStack flexShrink={1} space={2}>\n          <Text>\n            {t(\n              'It is important you commit to something sustainable, more is not always better. Success comes from long term consistency.'\n            )}\n          </Text>\n        </HStack>\n      </Alert>\n      <InlineField>\n        <Text>{t('Workouts per week')}</Text>\n        <Select\n          selectedValue={preferedNumberOfWorkoutsPerWeek}\n          onValueChange={(value: string) => updateTrainee('preferedNumberOfWorkoutsPerWeek', Number(value))}\n          items={[\n            { label: '2 at most', value: 2 },\n            { label: '3 at most', value: 3 },\n            { label: '4 at most', value: 4 },\n            { label: '5 at most', value: 5 },\n            { label: '6 at most', value: 6 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Workout duration')}</Text>\n        <Select\n          selectedValue={preferedWorkoutDuration}\n          onValueChange={(value: string) => updateTrainee('preferedWorkoutDuration', Number(value))}\n          items={[\n            { label: '30 min at most', value: 30 },\n            { label: '45 min at most', value: 45 },\n            { label: '60 min at most', value: 60 },\n            { label: '75 min at most', value: 75 },\n            { label: '90 min at most', value: 90 },\n          ]}\n        />\n      </InlineField>\n      <InlineField>\n        <Text>{t('Start week on')}</Text>\n        <EnumSelect\n          Enum={WeekDay}\n          selectedValue={preferedWeekStart}\n          onValueChange={(value: keyof typeof WeekDay) => updateTrainee('preferedWeekStart', value)}\n        />\n      </InlineField>\n      <StackedField>\n        <Text>{t('Days you can train')}</Text>\n        <EnumMultiSelect\n          Enum={WeekDay}\n          accessibilityLabel={'Select days you can train'}\n          selectedValues={preferedWorkoutDays}\n          onChange={(newValues: Array<keyof typeof WeekDay>) => updateTrainee('preferedWorkoutDays', newValues)}\n        />\n      </StackedField>\n    </FormCard>\n  );\n};\n","import { Button } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nimport { AboutYou } from './AboutYou';\nimport { Activity } from './Activity';\nimport { Configuration } from './Configuration';\nimport { Nutrition } from './Nutrition';\nimport { Preferences } from './Preferences';\nimport { Scheduling } from './Scheduling';\n\nexport default function GetStarted() {\n  const { t } = useTranslation();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const { age, weight, height, bodyFat, primaryGoal, secondaryGoal } = trainee!;\n  const enableContinueButton = !!age && !!bodyFat && !!weight && !!height && !!primaryGoal && !!secondaryGoal;\n\n  return (\n    <DefaultLayout>\n      <Configuration trainee={trainee!} updateTrainee={updateTrainee} />\n      <AboutYou trainee={trainee!} updateTrainee={updateTrainee} />\n      <Nutrition trainee={trainee!} updateTrainee={updateTrainee} />\n      <Activity trainee={trainee!} updateTrainee={updateTrainee} />\n      <Preferences trainee={trainee!} updateTrainee={updateTrainee} />\n      <Scheduling trainee={trainee!} updateTrainee={updateTrainee} />\n      {enableContinueButton ? (\n        <RoutingButton to={Destination.ProgramSelection}>{t('Continue')}</RoutingButton>\n      ) : (\n        <Button colorScheme=\"secondary\" disabled>\n          {t('Continue')}\n        </Button>\n      )}\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard } from '../../components/Forms';\nimport { SpeedtandardsComparison, StrengthStandardsComparison } from '../../components/Standards';\nimport { Gender, UnitsType } from '../../domain/constants';\nimport { Exercise } from '../../domain/exercises';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const Comparison = ({ trainee, traineeMetrics }: { trainee: Trainee; traineeMetrics: TraineeMetrics }) => {\n  const { t } = useTranslation();\n  const { gender, maxPullUps, maxPushUps, preferedUnitsType } = trainee;\n  const { strengthLevel, strengthMetrics, speedLevel, speedMetrics } = traineeMetrics;\n  return (\n    <>\n      <FormCard heading={t('Strength')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{strengthLevel}</Text>\n        </Text>\n        <StrengthStandardsComparison\n          gender={Gender[gender]}\n          standards={{\n            ...strengthMetrics,\n            [Exercise.Pullup]: { reps: maxPullUps },\n            [Exercise.Pushup]: { reps: maxPushUps },\n          }}\n          unitsType={UnitsType[preferedUnitsType]}\n        />\n      </FormCard>\n      <FormCard heading={t('Speed')}>\n        <Text marginBottom={2}>\n          {t('You are ranked as:')} <Text bold>{speedLevel}</Text>\n        </Text>\n        <SpeedtandardsComparison gender={Gender[gender]} standards={speedMetrics} />\n      </FormCard>\n    </>\n  );\n};\n","import { Box, Divider, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\n\nimport { DashboardDetail } from '../Dashboards';\n\nexport const NutritionInfo = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { note, bmr, tdee } = protocol;\n  return (\n    <>\n      {note && <Text fontSize={'xs'}>{note}</Text>}\n      <Box marginY={2}>\n        <DashboardDetail label={t('BMR (Base Metabolic Rate)')} value={`${bmr}`} />\n        <Divider />\n        <DashboardDetail label={t('TDEE (Total Daily Energy Expenditure)')} value={`${tdee}`} />\n        <Divider />\n        <NutritionRecommendations protocol={protocol} />\n        <Box marginY={2}>\n          <Text fontSize={'2xs'} italic>\n            {t(\n              'NOTE: BMR was calculated using the average of Miffin St Jeor, Harris Benedict and Katch McArdle formulas. TDEE was calculated using your BMR and given activity level (lightly active=x1.375, active=x1.55 and very active=x1.725). Minimum protein to consume was calculated using your body fat % (1 gram per pound of lean bodyweight)'\n            )}\n          </Text>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport const NutritionRecommendations = ({ protocol }: { protocol: NutritionProtocol }) => {\n  const { t } = useTranslation();\n  const { targetCalories, type, higherCaloriesOnWeekends, cycleNutrition, targetProtein } = protocol;\n  return (\n    <Box>\n      <DashboardDetail\n        label={`Recommended Target Average ${type === NutritionType.Bulk ? 'Surplus' : 'Deficit'}`}\n        value={`${targetCalories.energyExpenditureModifier}`}\n      />\n      <Divider />\n      <DashboardDetail label={t('Target Average Daily Calories')} value={`${targetCalories.average}`} />\n      <Divider />\n      {higherCaloriesOnWeekends && !cycleNutrition && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && !higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n        </>\n      )}\n      {cycleNutrition && higherCaloriesOnWeekends && (\n        <>\n          <DashboardDetail label={`   ${t('Weekday Training Day Calories')}`} value={`${targetCalories.trainingDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekday Rest Day Calories')}`} value={`${targetCalories.restDay}`} />\n          <Divider />\n          <DashboardDetail label={`   ${t('Weekend Calories')}`} value={`${targetCalories.weekend}`} />\n          <Divider />\n        </>\n      )}\n      <DashboardDetail label={t('Minimum Grams of Protein')} value={`${targetProtein}`} />\n      <Divider />\n    </Box>\n  );\n};\n","import { Switch, Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormCard, InlineField } from '../../components/Forms';\nimport { NutritionInfo } from '../../components/Nutrition';\nimport { NutritionProtocol, NutritionType } from '../../domain/nutrition';\nimport { Trainee, UpdateTraineeFn } from '../../domain/trainee';\n\nexport const NutritionRecommendation = ({\n  trainee,\n  updateTrainee,\n  recommendedNutrition,\n}: {\n  trainee: Trainee;\n  updateTrainee: UpdateTraineeFn;\n  recommendedNutrition: NutritionProtocol;\n}) => {\n  const { t } = useTranslation();\n  const { prefersAggressiveCut, prefersHigherCaloriesOnWeekends, prefersCycledNutrition } = trainee;\n  return (\n    <FormCard heading={'Nutritional Recommendation'}>\n      <NutritionInfo protocol={recommendedNutrition} />\n      {[NutritionType.Cut, NutritionType.AggressiveCut].includes(recommendedNutrition.type) && (\n        <InlineField>\n          <Text maxWidth={'85%'}>\n            <Text bold>{t('More aggresive cut:')}</Text>{' '}\n            {t('for those who want to drop weight quicker and can handle lower calories.')}\n          </Text>\n          <Switch\n            size=\"sm\"\n            isChecked={prefersAggressiveCut}\n            onValueChange={(checked: boolean) => updateTrainee('prefersAggressiveCut', checked)}\n          />\n        </InlineField>\n      )}\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Consume higher calories on the weekends:')}</Text>{' '}\n          {t('for those who prefer to eat less during the week and indulge more on the weekend and still meet their goals')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersHigherCaloriesOnWeekends}\n          onValueChange={(checked: boolean) => updateTrainee('prefersHigherCaloriesOnWeekends', checked)}\n        />\n      </InlineField>\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('Cycle calories:')}</Text> {t('for those who prefer to eat more on training days and less on rest days')}\n        </Text>\n        <Switch\n          size=\"sm\"\n          isChecked={prefersCycledNutrition}\n          onValueChange={(checked: boolean) => updateTrainee('prefersCycledNutrition', checked)}\n        />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { UnitsType } from '../domain/constants';\n\nexport const toNearestIncrement = (weight: number, unitsType: UnitsType) => {\n  const increment = unitsType === UnitsType.Metric ? 2.5 : 5;\n  return Math.round(weight / increment) * increment;\n};\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { UnitsType } from '../../domain/constants';\nimport { LiftMetrics, StrengthMetrics } from '../../domain/standards';\nimport { getWeightLabel } from '../../utils/measurements';\nimport { toNearestIncrement } from '../../utils/weight';\nimport { BulletPoint } from '../Content';\n\nexport const LiftingTargets = ({ liftTargets, unitsType }: { liftTargets: StrengthMetrics; unitsType: UnitsType }) => {\n  const { t } = useTranslation();\n  const weightLabel = getWeightLabel(unitsType);\n  return (\n    <>\n      {Object.keys(liftTargets).map((lift) => {\n        const { oneRepMax, fiveRepMax, reps } = liftTargets[lift as keyof typeof liftTargets] as LiftMetrics;\n        const roundedFiveReps = fiveRepMax && toNearestIncrement(fiveRepMax, unitsType);\n\n        return (\n          <BulletPoint key={lift}>\n            <Text fontSize={'xs'}>\n              {oneRepMax ? (\n                <>\n                  {t('Get your {{lift}} to {{oneRepMax}}{{weightLabel}}', { lift, oneRepMax, weightLabel })}\n                  {roundedFiveReps && (\n                    <Text>{t(` (that's {{weight}}{{weightLabel}} for 5 reps)`, { weight: roundedFiveReps, weightLabel })}</Text>\n                  )}\n                </>\n              ) : (\n                <>{t('Get your number of {{lift}} to {{reps}}', { lift, reps })}</>\n              )}\n            </Text>\n          </BulletPoint>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { SpeedMetrics } from '../../domain/standards';\nimport { formatDecimalMins } from '../../utils/measurements';\nimport { BulletPoint } from '../Content';\n\nexport const SpeedTargets = ({ speedTargets }: { speedTargets: SpeedMetrics }) => {\n  return (\n    <>\n      <BulletPoint>\n        <Text fontSize={'xs'}>Get your Mile Run run down to {formatDecimalMins(speedTargets.mileRun)}</Text>\n      </BulletPoint>\n      <BulletPoint>\n        <Text fontSize={'xs'}>Get your 5k Run run down to {formatDecimalMins(speedTargets.fiveKmRun)}</Text>\n      </BulletPoint>\n    </>\n  );\n};\n","import { Box, Center, Divider, Heading, HStack, ScrollView, Text } from 'native-base';\nimport { RoutineEntry, RoutineSet, Workout } from '../../domain/programs';\nimport { Video } from '../Content';\n\nexport const getExerciseRepLabel = (item: RoutineEntry): string => {\n  const sets = item.sets.length > 0 ? item.sets : item.warmup;\n  const numberOfSets = sets!.length;\n\n  const reps = sets!.reduce<string[]>((acc, set: RoutineSet) => {\n    let targetReps = `${set.reps || set.targetReps}`;\n    if (set.minReps) {\n      targetReps = `${set.minReps}-${set.maxReps}`;\n    }\n    if (set.AMRAP) {\n      targetReps = `${targetReps}+`;\n    }\n    if (acc.includes(targetReps)) return acc;\n    return [...acc, targetReps];\n  }, []);\n\n  return reps.length === 1 ? `${numberOfSets}x${reps[0]}` : reps.join(', ');\n};\n\nexport const WorkoutRoutinesHScroll = ({ workouts }: { workouts: Workout[] }) => {\n  return (\n    <ScrollView horizontal={true}>\n      <HStack>\n        {workouts.map((workout: Workout, idx) => {\n          const wid = `workout-${workout.name}`;\n          const hasDivider = idx < workouts.length - 1;\n          return (\n            <HStack key={wid}>\n              <Box width={240}>\n                <Heading fontSize={'md'} fontWeight={300} paddingBottom={2}>\n                  {workout.name}\n                </Heading>\n                {workout.routine.map((item: RoutineEntry) => (\n                  <Box key={`${wid}-${item.exercise}`} paddingBottom={1}>\n                    <Text bold>{item.exercise}</Text>\n                    <Text>{getExerciseRepLabel(item)}</Text>\n                  </Box>\n                ))}\n                {workout.video && (\n                  <Center paddingTop={2}>\n                    <Video video={workout.video} width={280} />\n                  </Center>\n                )}\n              </Box>\n              {hasDivider && <Divider marginX={4} orientation={'vertical'} />}\n            </HStack>\n          );\n        })}\n      </HStack>\n    </ScrollView>\n  );\n};\n","import { Box, Switch, Text } from 'native-base';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { BulletPoint } from '../../components/Content';\nimport { FormCard, InlineField, Select } from '../../components/Forms';\nimport { LiftingTargets, SpeedTargets } from '../../components/Targets';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { UnitsType } from '../../domain/constants';\nimport { getProgram, Program } from '../../domain/programs';\nimport { SpeedMetrics, StrengthMetrics } from '../../domain/standards';\nimport { Trainee, TraineeMetrics } from '../../domain/trainee';\n\nexport const ProgramRecommendation = ({\n  trainee,\n  recommendedPrograms,\n  speedTargets,\n  liftTargets,\n  bodyFatTarget,\n  program,\n  setProgram,\n  traineeMetrics,\n}: {\n  trainee: Trainee;\n  recommendedPrograms: { suitablePrograms: Program[]; bestMatch: string };\n  speedTargets: SpeedMetrics;\n  liftTargets: StrengthMetrics;\n  bodyFatTarget?: number;\n  program: string;\n  setProgram: (value: string) => void;\n  traineeMetrics: TraineeMetrics;\n}) => {\n  const { t } = useTranslation();\n  const { preferedUnitsType } = trainee;\n  const selectedProgram = getProgram(program);\n  const selectedProgramWorkouts = selectedProgram?.workouts(traineeMetrics.strengthLevel);\n  const selectedValue = program || recommendedPrograms.bestMatch;\n\n  useEffect(() => {\n    setProgram(selectedValue);\n  }, [program, recommendedPrograms]);\n\n  return (\n    <FormCard heading={'Training Recommendation'}>\n      <Box marginBottom={3}>\n        <Text>{t('You should focus on getting stronger and faster aiming for the following short term goals:')}</Text>\n        {liftTargets && <LiftingTargets liftTargets={liftTargets} unitsType={UnitsType[preferedUnitsType]} />}\n        {speedTargets && <SpeedTargets speedTargets={speedTargets} />}\n        {bodyFatTarget && (\n          <BulletPoint>\n            <Text fontSize={'xs'}>{t('Get your body fat down to {{bodyFatTarget}}%', { bodyFatTarget })}</Text>\n          </BulletPoint>\n        )}\n      </Box>\n      <Box marginBottom={3}>\n        <Text fontSize={'xs'} italic>\n          {t(\n            'The most recommended program to achieve the above is selected, but you can also chose one of the other programs that match your level of strength and preferences and you will still see good results.'\n          )}\n        </Text>\n        <Select\n          selectedValue={selectedValue}\n          onValueChange={(value: string) => setProgram(value)}\n          items={recommendedPrograms.suitablePrograms.map((program) => ({\n            label: `${program.name}${program.id === recommendedPrograms.bestMatch ? ` (recommended)` : ''}`,\n            value: program.id,\n          }))}\n        />\n      </Box>\n      {selectedProgramWorkouts && <WorkoutRoutinesHScroll workouts={selectedProgramWorkouts} />}\n      <InlineField>\n        <Text maxWidth={'85%'}>\n          <Text bold>{t('End workouts with a speed or endurance finisher.')}</Text>{' '}\n          {t(\n            'In true vigilante fashion, workouts will randomly end with a bodyweight exercise for reps and/or time, some sort of carry for distance and/or time or a 1 mile or 5k run for time.'\n          )}\n        </Text>\n        <Switch size=\"sm\" isChecked />\n      </InlineField>\n    </FormCard>\n  );\n};\n","import { useState } from 'react';\nimport { DefaultLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { WeekDay } from '../../domain/constants';\nimport { getTraineeMetrics, getTraineeRecommendations, useActiveProgram, useTrainee } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { Comparison } from './Comparison';\nimport { NutritionRecommendation } from './NutritionRecommendation';\nimport { ProgramRecommendation } from './ProgramRecommendation';\n\nexport default function ProgramSelection() {\n  const [program, setProgram] = useState<string>();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { initialiseProgram } = useActiveProgram();\n\n  if (!traineeLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition, recommendedPrograms, speedTargets, liftTargets, bodyFatTarget } = getTraineeRecommendations(\n    trainee!,\n    traineeMetrics\n  );\n\n  return (\n    <DefaultLayout>\n      <Comparison trainee={trainee!} traineeMetrics={traineeMetrics} />\n      <NutritionRecommendation trainee={trainee!} updateTrainee={updateTrainee} recommendedNutrition={recommendedNutrition} />\n      <ProgramRecommendation\n        trainee={trainee!}\n        traineeMetrics={traineeMetrics}\n        recommendedPrograms={recommendedPrograms}\n        speedTargets={speedTargets}\n        liftTargets={liftTargets}\n        bodyFatTarget={bodyFatTarget}\n        program={program!}\n        setProgram={setProgram}\n      />\n      <RoutingButton\n        to={Destination.Dashboard}\n        onPress={() => initialiseProgram(program!, traineeMetrics.strengthLevel, WeekDay[trainee!.preferedWeekStart])}\n      >\n        {'Lets Go!'}\n      </RoutingButton>\n    </DefaultLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport { Paragraph } from '../../components/Content';\nimport { DashboardCard } from '../../components/Dashboards';\nimport { getTodaysCalories, NutritionProtocol } from '../../domain/nutrition';\nimport { ScheduledWorkout } from '../../domain/trainee';\nimport { RoutingButton } from '../../utils/routing';\n\nexport default function Today({\n  recommendedNutrition,\n  workout,\n}: {\n  recommendedNutrition: NutritionProtocol;\n  workout: ScheduledWorkout | undefined;\n}) {\n  const { t } = useTranslation();\n  const calories = getTodaysCalories(recommendedNutrition, !!workout);\n  const protein = recommendedNutrition.targetProtein;\n  // const { startWorkout, link } = useWorkout(Number(workout?.id))\n\n  return (\n    <DashboardCard heading={t('Today')}>\n      {workout ? (\n        <Paragraph>\n          <Text paddingRight={3}>\n            {t('Today you are scheduled to perform:')} <Text bold>{workout.name}</Text>.\n          </Text>\n          {/* {workout.status === 'in progress' && <RoutingButton to={link}>Continue Workout</RoutingButton>}\n          {workout.status === 'pending' && (\n            <RoutingButton to={link} onPress={startWorkout}>\n              Start Workout\n            </RoutingButton>\n          )} */}\n        </Paragraph>\n      ) : (\n        <Paragraph>{t('Today is an active recovery day. Go for a run, do some stretching and/or some mobility work.')}</Paragraph>\n      )}\n\n      <Paragraph>\n        <Trans t={t} calories={calories} protein={protein}>\n          You should consume <Text bold>{{ calories }} calories</Text> and at least{' '}\n          <Text bold>{{ protein }} grams of protein</Text>. Calories can be split between fat and carbs to preference,\n          recommendation is that 20-30% come from healthy fats to maintain hormonal balance.\n        </Trans>\n      </Paragraph>\n    </DashboardCard>\n  );\n}\n","import { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport Today from './Today';\nimport { getTraineeMetrics, getTraineeRecommendations, useActiveProgram, useTrainee } from '../../domain/trainee';\n\nexport default function Dashboard() {\n  const { traineeLoaded, trainee } = useTrainee();\n  const { activeProgramLoaded, todaysWorkout } = useActiveProgram();\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const traineeMetrics = getTraineeMetrics(trainee!);\n  const { recommendedNutrition } = getTraineeRecommendations(trainee!, traineeMetrics);\n\n  return (\n    <HeadedLayout showNav heading=\"Dashboard\">\n      <Today recommendedNutrition={recommendedNutrition!} workout={todaysWorkout} />\n    </HeadedLayout>\n  );\n}\n","import { Box, Divider, HStack, Icon, Text } from 'native-base';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { goToWorkout, useNavigate } from '../../utils/routing';\nimport { ScheduledWorkout } from '../../domain/trainee';\n\nexport const WorkoutList = ({ workouts, dateFormat = 'date' }: { workouts: ScheduledWorkout[]; dateFormat?: 'day' | 'date' }) => {\n  const navigate = useNavigate();\n  return (\n    <>\n      {workouts.map((item, idx) => {\n        const isDone = item.status === 'done';\n        return (\n          <Box key={`workout-${idx}`}>\n            <HStack>\n              <Icon\n                color={isDone ? 'green.500' : 'amber.500'}\n                mb={1}\n                as={MaterialIcons}\n                name={isDone ? 'done' : 'schedule'}\n                size={'md'}\n                marginRight={1}\n              />\n              <Text>\n                {dateFormat === 'date'\n                  ? new Date(item.date).toLocaleDateString('en-GB', {\n                      weekday: 'short',\n                      month: 'long',\n                      day: 'numeric',\n                    })\n                  : new Date(item.date).toLocaleDateString('en-GB', { weekday: 'long' })}\n                :\n              </Text>\n              <Text bold>{` ${item.name}`}</Text>\n              <Icon\n                as={MaterialCommunityIcons}\n                name={'eye'}\n                size={'md'}\n                marginLeft={'auto'}\n                onPress={() => {\n                  goToWorkout(navigate)(idx);\n                }}\n              />\n            </HStack>\n            <Divider marginY={2} />\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { Text } from 'native-base';\nimport { useMemo } from 'react';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutList } from '../../components/Workouts';\nimport { ScheduledWorkout } from '../../domain/schedule';\n\nexport const Schedule = ({ schedule }: { schedule: ScheduledWorkout[] }) => {\n  const completedCount = useMemo(() => schedule.filter((item) => item.status === 'done').length, [schedule]);\n\n  return (\n    <DashboardCard heading={'Schedule'}>\n      <WorkoutList workouts={schedule} />\n      <Text italic textAlign={'right'}>\n        {completedCount}/{schedule.length} workouts complete\n      </Text>\n    </DashboardCard>\n  );\n};\n","import { DashboardCard } from '../../components/Dashboards';\nimport { WorkoutRoutinesHScroll } from '../../components/Workouts/WorkoutRoutinesHScroll';\nimport { Workout } from '../../domain/programs';\n\nexport const Workouts = ({ workouts }: { workouts: Workout[] }) => (\n  <DashboardCard heading={'Workouts'}>\n    <WorkoutRoutinesHScroll workouts={workouts} />\n  </DashboardCard>\n);\n","import { Center } from 'native-base';\n\nimport { Video } from '../../components/Content';\nimport { DashboardCard, DashboardDetail } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram } from '../../domain/trainee';\nimport { Schedule } from './Schedule';\nimport { Workouts } from './Workouts';\n\nexport default function Program() {\n  const { activeProgramLoaded, program, schedule } = useActiveProgram();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n  return (\n    <HeadedLayout showNav heading=\"Program\">\n      <DashboardCard heading={'Active Program'}>\n        <DashboardDetail label=\"Name\" value={program!.name} />\n        <DashboardDetail label=\"Author\" value={program!.author} />\n        {program!.link && <DashboardDetail label=\"Sourced from\" value={program!.link} />}\n        <DashboardDetail label=\"Duration\" value={`${program!.duration} weeks`} />\n        <DashboardDetail label=\"Workouts per week\" value={program!.daysPerWeek} />\n        <DashboardDetail label=\"Workout duration\" value={`${program!.workoutDuration} min`} />\n        {program?.video && (\n          <Center paddingTop={2}>\n            <Video video={program.video} />\n          </Center>\n        )}\n      </DashboardCard>\n      <Workouts workouts={program!.workouts()} />\n      <Schedule schedule={schedule!} />\n    </HeadedLayout>\n  );\n}\n","import { useTranslation } from 'react-i18next';\n\nimport { BottomButtonsBox } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { useActiveProgram, useLog } from '../../domain/trainee';\nimport { Destination, RoutingButton } from '../../utils/routing';\n\nexport default function Settings() {\n  const { t } = useTranslation();\n  const { activeProgramLoaded, resetProgram } = useActiveProgram();\n  const { resetLog } = useLog();\n\n  if (!activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Settings')}>\n      <BottomButtonsBox>\n        <RoutingButton to={Destination.Log} onPress={resetLog} colorScheme=\"secondary\" marginY={1}>\n          {t('Reset Log')}\n        </RoutingButton>\n        <RoutingButton to={Destination.GetStarted} onPress={resetProgram}>\n          {t('Reset/Change Program')}\n        </RoutingButton>\n      </BottomButtonsBox>\n    </HeadedLayout>\n  );\n}\n","import { Text } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { HeadedLayout } from '../../components/Layouts';\n\nexport default function Vault() {\n  const { t } = useTranslation();\n\n  return (\n    <HeadedLayout showNav heading={t('Vault')}>\n      <Text>{t('Coming Soon')}</Text>\n    </HeadedLayout>\n  );\n}\n","import { Box, Divider, HStack, Text, VStack } from 'native-base';\nimport { useTranslation } from 'react-i18next';\n\nimport { DashboardCard } from '../../components/Dashboards';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { RoutineEntry } from '../../domain/programs';\nimport { useLog } from '../../domain/trainee';\n\nexport default function Log() {\n  const { t } = useTranslation();\n  const { workoutLog, logLoaded } = useLog();\n\n  if (!logLoaded) {\n    return <Loader />;\n  }\n\n  return (\n    <HeadedLayout showNav heading={t('Log')}>\n      {(!workoutLog || !workoutLog.length) && <Text>{t('No workouts logged.')}</Text>}\n      {workoutLog?.map((workout) => {\n        const key = `${workout.datePerformed}-${workout.name}`;\n        return (\n          <DashboardCard key={key}>\n            <VStack space={1}>\n              <Text bold fontSize={'xs'}>\n                {new Date(workout.datePerformed).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                })}\n              </Text>\n              <Text fontSize={'xs'}>\n                {t('{{workoutName}}, {{program}}', { workoutName: workout.name, program: workout.program })}\n              </Text>\n              <Divider />\n              {workout.routine.map((item: RoutineEntry) => (\n                <Box key={`${key}-${item.exercise}`}>\n                  {item.sets.length > 0 && (\n                    <Box>\n                      <Text bold fontSize={'xs'}>\n                        {item.exercise}\n                      </Text>\n                      <HStack>\n                        {item.sets.map((set, setId) => (\n                          <Text fontSize={'xs'} key={`${key}-${item.exercise}set-${setId}`} marginRight={2}>\n                            {!!set.weight && !!set.reps && `${set.weight}x${set.reps}`}\n                            {!set.weight && !!set.reps && `${set.reps}reps`}\n                          </Text>\n                        ))}\n                      </HStack>\n                    </Box>\n                  )}\n                </Box>\n              ))}\n            </VStack>\n          </DashboardCard>\n        );\n      })}\n    </HeadedLayout>\n  );\n}\n","import { toNearestIncrement } from '../../utils/weight';\nimport { LiftAttempt, Lifts } from '../exercises';\nimport { RoutineEntry, RoutineSet } from '../programs';\nimport { ScheduledWorkout } from '../schedule';\nimport { StrengthStandards } from '../standards';\n\nexport const getWorkoutById = (schedule: ScheduledWorkout[]) => (id: number) => schedule.find((entry) => entry.id === id);\n\nexport const getWorkoutTotalSetCount = (workout: ScheduledWorkout): number =>\n  workout.routine.reduce((acc, current) => {\n    if (current.warmup) acc = acc + current.warmup.length;\n    if (current.sets) acc = acc + current.sets.length;\n    return acc;\n  }, 0);\n\nexport const getCompleteSetCount = (workout: ScheduledWorkout): number => {\n  return workout.routine.reduce((acc: number, curr: RoutineEntry) => {\n    let count = acc;\n    [...(curr.warmup ? curr.warmup : []), ...(curr.sets ? curr.sets : [])].forEach((curr) => {\n      if (curr.status === 'done') count = count + 1;\n    });\n\n    return count;\n  }, 0);\n};\n\nexport const getPreviousWorkoutOfType = (schedule: ScheduledWorkout[]) => (workoutId: number) => {\n  const workout = schedule[workoutId];\n  let previous;\n  for (let i = workoutId - 1; i >= 0; i--) {\n    if (schedule[i].name === workout.name) {\n      previous = schedule[i];\n      break;\n    }\n  }\n  return previous;\n};\n\nexport const getPreviousLift =\n  (schedule: ScheduledWorkout[], workoutId: number, currentLifts?: Lifts) =>\n  (exerciseId: number, setId: number, warmup = false): { weight: number | undefined; reps: number } | undefined => {\n    // @TODO track and handle warmup history\n    if (warmup) return;\n\n    const previousWorkout = getPreviousWorkoutOfType(schedule!)(workoutId);\n    const previousSet = previousWorkout?.routine[exerciseId].sets[setId];\n\n    let previous = previousSet ? { weight: previousSet.weight, reps: previousSet.reps! } : undefined;\n\n    // if no previous and it is not a warmup\n    if (!previous && setId === 0 && currentLifts) {\n      previous = currentLifts[schedule[workoutId].routine[exerciseId].exercise as keyof typeof currentLifts];\n    }\n\n    return previous;\n  };\n\nexport const getRecommendedWeight =\n  ({\n    schedule,\n    workoutId,\n    barbellIncrement,\n    barbellDecrement,\n    dumbbellIncrement,\n    dumbbellDecrement,\n    strengthStandards,\n    bodyweight,\n    currentLifts,\n  }: {\n    schedule: ScheduledWorkout[];\n    workoutId: number;\n    barbellIncrement: number;\n    barbellDecrement: number;\n    dumbbellIncrement: number;\n    dumbbellDecrement: number;\n    strengthStandards: StrengthStandards;\n    bodyweight: number;\n    currentLifts: Lifts;\n  }) =>\n  (exerciseId: number, setId: number, warmup = false): number | undefined => {\n    const entry = schedule[workoutId].routine[exerciseId];\n    const currentLift = currentLifts[entry.exercise as keyof typeof currentLifts];\n    const liftStandards = strengthStandards[entry.exercise as keyof typeof strengthStandards];\n    const set = warmup ? entry.warmup?.[setId] : entry.sets[setId];\n\n    // @TODO by exercise type\n    const smallestIncrement = barbellIncrement;\n    const deloadDecrement = barbellDecrement;\n\n    let weight;\n    if (set?.weight) {\n      weight = set.weight;\n    } else if (set?.percentage && liftStandards) {\n      weight = liftStandards[set.basis ?? 'oneRepMax']! * (set.percentage / 100);\n    } else if (set?.ratio) {\n      weight = bodyweight * set.ratio;\n    } else if (!warmup && currentLift) {\n      const needsDeload = currentLift.fails && currentLift.fails >= 3;\n      const passedLastAttempt = currentLift.targetReps && currentLift.reps >= currentLift.targetReps;\n      const needsToRepeatPrevious = currentLift.targetReps && currentLift.reps < currentLift.targetReps;\n      if (needsDeload) {\n        weight = Number(currentLift.weight) - Number(currentLift.weight) * (deloadDecrement / 100);\n      } else if (passedLastAttempt) {\n        weight = Number(currentLift.weight) + Number(smallestIncrement);\n      } else if (needsToRepeatPrevious) {\n        weight = Number(currentLift.weight);\n      } else if (liftStandards) {\n        // @TODO should be configurable?\n        weight = liftStandards['fiveRepMax'];\n      }\n    } else if (liftStandards && entry.startingWeight) {\n      weight = Number(liftStandards[entry.startingWeight]!);\n    } else if (!warmup && currentLift) {\n      weight = Number(currentLift.weight);\n    }\n\n    return weight && toNearestIncrement(weight, smallestIncrement);\n  };\n\nconst getBestAttemptFromSets = (sets: RoutineSet[]): LiftAttempt =>\n  sets.reduce(\n    (acc, set) => {\n      if (!set.weight && !set.reps) return acc;\n\n      if (set.weight && set.weight >= acc.weight) {\n        acc.weight = Number(set.weight);\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      } else if ((set.weight == acc.weight || !set.weight) && set.reps! > acc.reps) {\n        acc.reps = Number(set.reps!);\n        acc.targetReps = Number(set.targetReps ?? set.maxReps ?? set.reps);\n      }\n      return acc;\n    },\n    <LiftAttempt>{ weight: 0, reps: 0, targetReps: 0 }\n  );\n\nexport const updateCurrentLifts = (\n  currentLifts: Lifts,\n  workout: ScheduledWorkout,\n  setCurrentLifts: (newLifts: Lifts) => void\n) => {\n  setCurrentLifts({\n    ...currentLifts,\n    ...workout?.routine.reduce((acc, curr: RoutineEntry) => {\n      if (curr.ignoreForTracking) return acc;\n\n      const { weight, reps, targetReps } = getBestAttemptFromSets(curr.sets);\n      const currentFails = currentLifts[curr.exercise as keyof typeof currentLifts]?.fails ?? 0;\n      const isFail = targetReps && reps < targetReps;\n\n      return { ...acc, [curr.exercise as string]: { weight, reps, targetReps, fails: isFail ? currentFails + 1 : 0 } };\n    }, {}),\n  });\n};\n","import { Icon, Modal, Pressable } from 'native-base';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useState } from 'react';\nimport { RoutineEntry } from '../../../../domain/programs';\nimport { Video } from '../../../../components/Content';\n\nexport const ExerciseInfo = ({ item }: { item: RoutineEntry }) => {\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n  const { video } = item;\n  return (\n    <>\n      <Modal\n        isOpen={modalVisible}\n        onClose={() => {\n          setModalVisible(false);\n        }}\n      >\n        <Modal.CloseButton />\n        {video && <Video video={video} />}\n      </Modal>\n      {video && (\n        <Pressable\n          onPress={() => {\n            setModalVisible(true);\n          }}\n        >\n          <Icon as={MaterialCommunityIcons} name={'information-outline'} size={'sm'} />\n        </Pressable>\n      )}\n    </>\n  );\n};\n","import { Box, Text } from 'native-base';\n\nexport const SetIdentifier = ({ warmup, setId }: { warmup?: boolean; setId: number }) => (\n  <Box width={25} borderRadius={10} background={warmup ? 'primary.50' : 'primary.200'} padding={0.5}>\n    <Text textAlign={'center'} fontSize={'xs'}>\n      {setId + 1}\n    </Text>\n  </Box>\n);\n","import { RoutineSet } from '../../../domain/programs';\n\nexport const getTargetRepsPlaceholder = (entry: RoutineSet): string => {\n  let placeholder = '';\n  if (entry.minReps) {\n    placeholder = `${entry.minReps}-${entry.maxReps}`;\n  } else if (entry.targetReps) {\n    placeholder = `${entry.targetReps}`;\n  } else if (entry.reps) {\n    placeholder = `${entry.reps}`;\n  }\n\n  if (entry.AMRAP) placeholder = `${placeholder}+`;\n\n  return placeholder;\n};\n\nexport const getPreviousLabel =\n  (\n    getPreviousLift: (\n      exerciseId: number,\n      setId: number,\n      isWarmup: boolean\n    ) => { weight: number | undefined; reps: number } | undefined\n  ) =>\n  (exerciseId: number, setId: number, isWarmup = false) => {\n    const prev = getPreviousLift(exerciseId, setId, isWarmup);\n    if (prev && prev.weight) {\n      return `${prev?.weight}x${prev?.reps}`;\n    } else if (prev && prev.reps) {\n      return `${prev?.reps}`;\n    }\n    return '-';\n  };\n","import { Checkbox, Input, Text } from 'native-base';\nimport { useState } from 'react';\nimport { TableRow } from '../../../components/Content';\n\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel, getTargetRepsPlaceholder } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Sets = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  const [sets, setSets] = useState<RoutineSet[]>(routine.sets);\n  const onUpdate = (setId: number, attr: 'weight' | 'reps', value: any) => {\n    const newSets = [...sets];\n    newSets[setId][attr] = value;\n    setSets(newSets);\n  };\n  return (\n    <>\n      {sets.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-set-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId), textAlign: 'center' },\n            ...(!routine.bodyweight\n              ? [\n                  {\n                    content: (\n                      <Input\n                        keyboardType={'decimal-pad'}\n                        value={entry.weight?.toString() || ''}\n                        textAlign={'center'}\n                        onChangeText={(value: string) => onUpdate(setId, 'weight', value)}\n                        placeholder={getRecommendedWeight(exerciseId, setId)?.toString()}\n                        marginX={1}\n                      />\n                    ),\n                    textAlign: 'center',\n                  },\n                ]\n              : []),\n            {\n              content: (\n                <Input\n                  keyboardType={'number-pad'}\n                  value={entry.reps?.toString() || ''}\n                  textAlign={'center'}\n                  onChangeText={(value: string) => onUpdate(setId, 'reps', Number(value))}\n                  placeholder={getTargetRepsPlaceholder(entry)}\n                  marginX={1}\n                />\n              ),\n              textAlign: 'center',\n            },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, false)}\n                >\n                  <Text display={'none'}>Done</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Checkbox, Text } from 'native-base';\n\nimport { TableRow } from '../../../components/Content';\nimport { RoutineEntry, RoutineSet } from '../../../domain/programs';\nimport { SetIdentifier } from './components/SetIdentifier';\nimport { getPreviousLabel } from './helpers';\nimport { SetProps } from './interfaces';\n\nexport const Warmups = ({\n  exerciseId,\n  routine,\n  getRecommendedWeight,\n  onSetComplete,\n  getPreviousLift,\n}: { exerciseId: number; routine: RoutineEntry } & SetProps) => {\n  return (\n    <>\n      {routine.warmup?.map((entry: RoutineSet, setId: number) => (\n        <TableRow\n          key={`${exerciseId}-warmup-${setId}`}\n          values={[\n            { width: 10, content: <SetIdentifier warmup setId={setId} /> },\n            { content: getPreviousLabel(getPreviousLift)(exerciseId, setId, true), textAlign: 'center' },\n            ...(!routine.bodyweight ? [{ content: getRecommendedWeight(exerciseId, setId, true), textAlign: 'center' }] : []),\n            { content: entry.reps, textAlign: 'center' },\n            {\n              textAlign: 'right',\n              content: (\n                <Checkbox\n                  marginLeft={'auto'}\n                  isChecked={entry.status === 'done'}\n                  value={'done'}\n                  onChange={(checked: boolean) => checked && onSetComplete(exerciseId, setId, true)}\n                >\n                  <Text display={'none'}>Done</Text>\n                </Checkbox>\n              ),\n            },\n          ]}\n        />\n      ))}\n    </>\n  );\n};\n","import { Box, Heading, Text } from 'native-base';\nimport { Table, TableHeader } from '../../../components/Content';\n\nimport { RoutineEntry } from '../../../domain/programs';\nimport { ScheduledWorkout } from '../../../domain/trainee';\nimport { ExerciseInfo } from './components/ExerciseInfo';\nimport { SetProps } from './interfaces';\nimport { Sets } from './Sets';\nimport { Warmups } from './Warmups';\n\nexport const WorkoutSheet = ({\n  workout,\n  ...rest\n}: {\n  workout: ScheduledWorkout;\n} & SetProps) => {\n  return (\n    <>\n      {workout.routine.map((item: RoutineEntry, exerciseId: number) => {\n        return (\n          <Box key={`workout-${item.exercise}`} marginBottom={10}>\n            <Heading fontSize={'md'} fontWeight={400} marginY={2}>\n              {item.optional && <Text italic>(Optional) </Text>}\n              {item.exercise} <ExerciseInfo item={item} />\n            </Heading>\n            {item.note && <Text>Note: {item.note}</Text>}\n            <Table>\n              <TableHeader\n                headings={[\n                  { content: 'Set', textAlign: 'left', width: 10 },\n                  { content: 'Previous' },\n                  ...(!item.bodyweight ? [{ content: 'Weight' }] : []),\n                  { content: 'Reps' },\n                  { content: '' },\n                ]}\n              />\n              <Warmups exerciseId={exerciseId} routine={item} {...rest} />\n              <Sets exerciseId={exerciseId} routine={item} {...rest} />\n            </Table>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\n\nimport { FormCard } from '../../components/Forms';\nimport { HeadedLayout } from '../../components/Layouts';\nimport { Loader } from '../../components/Loader';\nimport { getTraineeMetrics, Lifts, useActiveProgram, useLog, useTrainee } from '../../domain/trainee';\nimport { getPreviousLift, getRecommendedWeight, getWorkoutById, updateCurrentLifts } from '../../domain/workout';\nimport { Destination, RoutingButton } from '../../utils/routing';\nimport { WorkoutSheet } from './WorkoutSheet';\n\nexport default function Workout() {\n  const { t } = useTranslation();\n  const { id } = useParams();\n  const { trainee, traineeLoaded, updateTrainee } = useTrainee();\n  const { program, schedule, activeProgramLoaded, updateSchedule } = useActiveProgram();\n  const { logWorkout } = useLog();\n\n  if (!traineeLoaded || !activeProgramLoaded) {\n    return <Loader />;\n  }\n\n  const workout = getWorkoutById(schedule!)(Number(id));\n  const { strengthMetrics } = getTraineeMetrics(trainee!);\n\n  const finishWorkout = () => {\n    updateCurrentLifts(trainee!.currentLifts, workout!, (newLifts: Lifts) => updateTrainee('currentLifts', newLifts));\n    updateSchedule({ type: 'end_workout', payload: { id } });\n    logWorkout(workout!, program!.name);\n  };\n\n  const getSetRecommendedWeight = getRecommendedWeight({\n    schedule: schedule!,\n    workoutId: Number(id),\n    barbellIncrement: 5,\n    barbellDecrement: 10,\n    dumbbellIncrement: 2,\n    dumbbellDecrement: 15,\n    strengthStandards: strengthMetrics,\n    bodyweight: trainee!.weight,\n    currentLifts: trainee!.currentLifts,\n  });\n\n  const onChangeSetWeight = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_weight', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onChangeSetReps = (exerciseId: number, setId: number, value: number) => {\n    updateSchedule({ type: 'change_set_reps', payload: { id, exerciseId, setId, value } });\n  };\n\n  const onSetComplete = (exerciseId: number, setId: number, isWarmup: boolean) => {\n    updateSchedule({\n      type: 'complete_set',\n      payload: { id, exerciseId, setId, isWarmup, recommendedWeight: getSetRecommendedWeight(exerciseId, setId, isWarmup) },\n    });\n  };\n\n  return (\n    <HeadedLayout showNav heading={workout.name}>\n      <FormCard>\n        <WorkoutSheet\n          workout={workout}\n          getRecommendedWeight={getSetRecommendedWeight}\n          onChangeSetReps={onChangeSetReps}\n          onChangeSetWeight={onChangeSetWeight}\n          onSetComplete={onSetComplete}\n          getPreviousLift={getPreviousLift(schedule!, Number(id), trainee!.currentLifts)}\n        />\n        {/* {workout.status !== 'done' && ( */}\n        <RoutingButton to={Destination.Dashboard} onPress={finishWorkout}>\n          {t('Finish Workout')}\n        </RoutingButton>\n        {/* )} */}\n      </FormCard>\n    </HeadedLayout>\n  );\n}\n","import { Route, Routes } from 'react-router';\nimport { NativeBaseProvider } from 'native-base';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport { nativeBaseTheme } from './theme';\nimport { Destination, Router } from './utils/routing';\nimport { Loader } from './components/Loader';\n\nimport About from './screens/About';\nimport Welcome from './screens/Welcome';\nimport GetStarted from './screens/GetStarted';\nimport ProgramSelection from './screens/ProgramSelection';\nimport Dashboard from './screens/Dashboard';\nimport Program from './screens/Program';\nimport Settings from './screens/Settings';\nimport Vault from './screens/Vault';\nimport Log from './screens/Log';\nimport Workout from './screens/Workout';\n\ni18n.use(initReactI18next).init({\n  resources: {},\n  lng: 'en',\n  fallbackLng: 'en',\n});\n\nexport default function App() {\n  const activeProgramLoaded = true;\n\n  return (\n    <NativeBaseProvider theme={nativeBaseTheme}>\n      {!activeProgramLoaded ? (\n        <Loader />\n      ) : (\n        <Router>\n          <Routes>\n            <Route path={Destination.Home} element={<Welcome />} />\n            <Route path={Destination.About} element={<About />} />\n            <Route path={Destination.Dashboard} element={<Dashboard />} />\n            <Route path={Destination.GetStarted} element={<GetStarted />} />\n            <Route path={Destination.ProgramSelection} element={<ProgramSelection />} />\n            <Route path={Destination.Program} element={<Program />} />\n            <Route path={Destination.Settings} element={<Settings />} />\n            <Route path={Destination.Vault} element={<Vault />} />\n            <Route path={Destination.Log} element={<Log />} />\n            <Route path={Destination.Workout} element={<Workout />} />\n          </Routes>\n        </Router>\n      )}\n    </NativeBaseProvider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.19683717.png\";","module.exports = __webpack_public_path__ + \"static/media/go.077d9926.png\";","module.exports = __webpack_public_path__ + \"static/media/welcome2.bd841836.png\";","module.exports = __webpack_public_path__ + \"static/media/Male10.f23d08d5.png\";","module.exports = __webpack_public_path__ + \"static/media/Male15.293ba6ba.png\";","module.exports = __webpack_public_path__ + \"static/media/Male20.4ad2a421.png\";","module.exports = __webpack_public_path__ + \"static/media/Male25.a2cbf1de.png\";","module.exports = __webpack_public_path__ + \"static/media/Male30.c81ae86e.png\";","module.exports = __webpack_public_path__ + \"static/media/Female10.0c2955e8.png\";","module.exports = __webpack_public_path__ + \"static/media/Female15.6d965ec9.png\";","module.exports = __webpack_public_path__ + \"static/media/Female20.14ba5dd7.png\";","module.exports = __webpack_public_path__ + \"static/media/Female25.91e6a499.png\";","module.exports = __webpack_public_path__ + \"static/media/Female30.fd170a69.png\";"],"sourceRoot":""}